{"version":3,"sources":["generated/graphql.tsx","constants.ts","components/nav.tsx","lib/utils.tsx","components/classes/shared/class-summary.tsx","components/classes/shared/features.tsx","components/classes/shared/subtable.tsx","components/classes/shared/pc-class.tsx","components/classes/classes.tsx","components/races/races.tsx","components/races/subraces.tsx","components/races/race-form.tsx","components/ability-scores/options/attribute-input.tsx","components/ability-scores/options/point-buy.tsx","components/ability-scores/options/standard.tsx","components/ability-scores/options/manual.tsx","components/ability-scores/options/card-block.tsx","components/ability-scores/asi-generator.tsx","components/descript/skill.tsx","components/descript/tool.tsx","components/descript/language.tsx","components/descript/custom-bg.tsx","components/descript/descript.tsx","components/spells/spell.tsx","components/spells/spells.tsx","components/feats/feats.tsx","components/character-sheet/character-components/general-block.tsx","components/character-sheet/character-components/saving-throw-block.tsx","components/character-sheet/character-components/skills-block.tsx","components/character-sheet/character-components/core-stat-block.tsx","components/character-sheet/character-components/health-block.tsx","components/character-sheet/character-components/character-core-stats.tsx","components/character-sheet/character-components/character-subheader.tsx","components/character-sheet/character-components/passive-block.tsx","components/character-sheet/character-components/action-feature-block.tsx","components/character-sheet/character-sheet.tsx","components/sign-up.tsx","components/sign-in.tsx","components/sign-out.tsx","components/layout.tsx","components/home.tsx","components/class-creation/feature-asi.tsx","components/class-creation/feature-general.tsx","components/class-creation/feature-start-prof.tsx","components/class-creation/class-features.tsx","components/class-creation/class-creation.tsx","App.tsx","index.tsx"],"names":["AttributesOrderBy","BgFeaturesOrderBy","BgsOrderBy","ClassFeaturesOrderBy","ClassesOrderBy","ConditionsOrderBy","DiseasesOrderBy","EquipmentOrderBy","FeatsOrderBy","KnexMigrationsLocksOrderBy","KnexMigrationsOrderBy","LanguagesOrderBy","MinionsOrderBy","RaceFeaturesOrderBy","RacesOrderBy","RacialFeaturesOrderBy","SkillsOrderBy","SpellSlugsOrderBy","SpellsOrderBy","SubclassFeaturesOrderBy","SubclassesOrderBy","SubraceFeaturesOrderBy","SubracesOrderBy","UserRole","WizardsOrderBy","AUTH_TOKEN","NavBar","links","isPublic","signout","location","useLocation","subpath","pathname","split","RegExp","className","href","src","alt","link","text","filter","x","indexOf","map","getLongFormAbilityScore","asiAbbrev","getFeatures","list","classFeats","subclassFeats","parsedList","hasSubclassFeats","toLowerCase","name","level","y","parseFeatureList","sort","a","b","Number","classFeature","sortFeatureList","undefined","featsFormatted","key","feat","push","parsedFeatures","classFeatures","hashFeatures","forEach","f","feature","numberToSpeakable","num","ClassSummary","gen","gen2","Object","assign","multiclassing","JSON","parse","startingEquipment","startingProficiencies","mcProf","proficienciesGained","mcReq","requirements","mcReqs","or","keys","r","str","hdNumber","hdFaces","Math","floor","armor","length","join","weapons","tools","proficiency","prof","skills","choose","count","from","default","eq","i","goldAlternative","StringType","entry","ListType","items","EntryType","entries","e","predicate","type","attributes","TableType","caption","colLabels","cl","rows","row","col","Features","features","features2","cloneDeep","subclassShortName","id","Subtable","tableGroups","subclassTableGroups","showSpellSlotsHeader","classTableGroups","find","title","sctg","label","l","toString","toRoll","number","faces","value","PcClass","classData","subclassFeatures","subclassName","subclasses","sc","shortName","getSubclassTableGroups","subclassesByClassId","nodes","classFeaturesByClassId","meta","defaultOptions","SigninDocument","gql","SignUpDocument","AllBgFeaturesDocument","AllBgsDocument","AllClassNamesDocument","AllClassesDocument","AllEquipmentDocument","AllFeatsDocument","useAllFeatsQuery","baseOptions","options","Apollo","GetAllLanguagesDocument","GetAllRacesDocument","AllSkillsDocument","GetAllSpellsDocument","ClassByIdDocument","Classes","useAllClassesQuery","data","loading","useState","classOptions","setClassOptions","subclassOptions","setSubclassOptions","selectedClass","setSelectedClass","selectedSubclass","setSelectedSubclass","setSubclassFeatures","allClasses","opt","placeholder","onChange","choice","handleClassChange","subclassFeaturesByClassId","Races","races","selected","disabled","Subraces","subraces","getItemFromArrayWithId","someId","someArray","oneItem","buildRacialFeatureHtmlBlocks","racialFeatureByRacialFeatureId","description","buildAsiString","asis","asiArr","asi","numVal","plusOrMinusSymbol","sign","stringChunk","RaceSelectionForm","selectedRaceId","setSelectedRaceId","selectedSubraceId","setSelectedSubraceId","useGetAllRacesQuery","raceDetailHtml","subraceDetailHtml","activeRace","allRaces","activeSubrace","subracesByRaceId","racialFeatureHtmlBlocks","raceFeaturesByRaceId","languagesString","languages","languagesStr","lastIndex","language","buildLanguagesString","racialTraitsStr","race","racialTraitsArr","asiString","featName","buildRacialTraitsString","summary","movement","lifespan","alignment","subracialFeatureHtmlBlock","subraceFeaturesBySubraceId","event","target","AttributeInputBlock","props","indexOfOptionSelected","setIndexOfOptionSelected","availablePoints","pointCosts","lastPointKey","optionsArr","optionHmtl","attribute","buildAvailableOptions","allOptions","state","currentlySelectedIndex","startingIndex","pointDisplayVals","priceAlreadyPaid","parseInt","firstUnavailableOption","priceOfFirstUnavailableOption","currentPointKey","addOrRemoveAvailableOptionsAtIndex","newAssignedScore","eventTargetVal","optionsInState","getIndexOfOptions","currentAssignedScore","PointBuy","attributesImmutable","callbackToSetAttributes","setAttributes","pointsRemaining","setPointsRemaining","standardPointsPool","15","14","13","12","11","10","9","8","standardPointCost","doBeforeReturningInChangeHandler","attr","newAttributeScore","updatedAttributes","previousAssignedScore","eventValArr","attributeId","prevAttributeScore","userIncreasedScore","pointCost","debit","credit","StandardArray","hashMap","selectedVal","availOptions","_buildHashMap","hashTable","setHashTable","handleSelection","optionValuesSplit","newSelectedScore","updatedAttrId","localHashTable","localAttributes","attrIds","attrId","valToPutBack","whereToPutItBack","_getIndexOfCorrectOptForThisPool","splice","thisAttrOptsPool","indexOfItemInThisAttrOptsPool","comparisonVal","someFlatArray","compInt","ManualOption","onBlur","getValidScore","console","error","tempAttrs","handleChange","defaultValue","returnValue","isNaN","tryParseInt","intVal","bonuses","AttributeCardBlock","val","defaultAttributes","AsiGenerator","activeMethod","setActiveMethod","method","SkillProficienciesSelector","skillOptions","numberOfSkillsGranted","validOptions","skill","isAutoGranted","_getValidOptions","validSkillOptions","skillOptsArray","_areSkillOptionChoicesRequired","dummy_array_to_help_generate_correct_num_of_select_elems","elemsRequired","_buildArrayWithThisManyItems","numOfSkillsGranted","skillOptionsArray","numOfSkillsAutoGranted","_calcNumOfSelectElemsToGenerate","ToolProficienciesSelector","equipment","allToolOptions","numberOfToolsGranted","currentBgRequiresChoice","toolOptsArray","areToolOptionChoicesRequired","extraEquipment","standardOptions","instruments","artisanTools","gamingSet","tool","concat","getValidOptions","validToolOptions","emptyArrayOfCorrectLen","buildArrayWithThisManyItems","numOftoolsGranted","toolOptionsArray","numOftoolsAutoGranted","calcNumOfSelectElemsToGenerate","LanguageSelector","numberOfLanguagesGranted","languageOptionConstraints","languageOptsArray","areLanguageOptionChoicesRequired","validLanguageOptions","correctKeyReference","getKeyReferenceForLanguage","getValidLanguageOptions","dummy_array_to_generate_correct_num_of_select_elems","numOfLanguagesAutoGranted","buildDummyArrayOfCorrectLength","buildToolsBlock","numOfSelectElems","dummy_array","buildDummyArrayToMapOver","sortedTools","buildLanguagesBlock","dummyArray","CustomBgSelector","skillsData","languageData","bgFeatures","customOptionReferenceConstants","customOptions","display","ALL","customOptionIsSelected","setCustomOptionIsSelected","selectedCustomRuleOption","setSelectedCustomRuleOption","backgroundFeatureIsSelected","setBackgroundFeatureIsSelected","selectedBgFeature","setSelectedBgFeature","displayBgFeatureDetail","bgFeatToSave","selectedBgName","bgFeat","customProficiencySelectorsBlock","fullBlockToReturn","skills_block","buildSkillsBlock","bg_feature_block","displayBgFeatureDetailClosure","buildBgFeatureBlock","toolsBlock","languagesBlock","buildProficiencySelectorsBlock","backgroundFeatureInfoBlock","conferringBg","PhysicalCharacteristicsChunk","SelectedBgChunks","selectedBg","allSkills","allLanguages","allEquipment","allBgFeatures","index","isLast","toolOptions","languageOptions","numberOfExtraLanguages","bgFeatureByBackgroundFeature","bgFeatureByAlternateBackgroundFeature","alternateBgFeatureChunk","CharDescript","setSelectedBg","useAllBgsQuery","backgrounds","useGetAllLanguagesQuery","useAllEquipmentQuery","useAllBgFeaturesQuery","useAllSkillsQuery","chosenBgName","allBgs","bg","buildDescTypeEntries","desc","_getRandoNum","item","buildDescTypeStr","buildDescTypeList","buildDescTypeTable","isType2","min","roll","max","colTxt","buildSpellDescriptHtml","spell","htmlDescriptChunkInner","hasOwnProperty","Spell","higherLevel","rawSpell","detailsActive","setDetailsActive","range","formatted","formatSpell","rangeTextHash","point","touch","self","sight","unlimited","amount","distance","radius","sphere","cone","onClick","concentration","school","castingTime","getRangeTextFromHash","components","material","duration","page","random","spellCasters","spellLevels","lvl","active","SpellsSelector","selectedCaster","setSelectedCaster","filteredSpells","setFilteredSpells","useGetAllSpellsQuery","noSpellsFoundMessage","allSpells","spells","getCurrentFilteredSpells","caster","activeSpellLevelHash","filteringByLevel","eligCasters","dndClass","levelIsIncluded","levelInt","includes","clickedSpellLevel","targetIndex","updateSpellLevelStates","classnames","slug","Feats","focusedFeat","setFocusedFeat","allFeats","feats","handleMethodChange","prereq","points","p","GeneralBlock","hitDieRemaining","setHitDieRemaining","showRemainingHitDieInput","toggleShowRemainingHitDieInput","xmlns","viewBox","fill","d","currentTarget","SavingThrowBlock","notProf","stat","bonus","save","SkillsBlock","CoreStatBlock","score","toUpperCase","HealthBlock","maxHealth","currentHp","setcurrentHp","tempHp","setTempHp","inputVal","setInputVal","showTempHpInput","toggleShowTempHpInput","newHealth","intTempHp","intInputVal","totalMinusTemp","CharacterCoreStats","CharacterSubHeader","PassiveBlock","ActionFeatureBlock","isActive","setIsActive","checkIsActive","caller","baseHeaderClasses","activeClasses","CharacterSheet","SignUp","user","setUser","pass","setPass","signUpSuccessful","setSignUpSuccessful","useSignUpMutation","performSignup","handleSubmit","preventDefault","variables","username","password","signup","boolean","window","onSubmit","htmlFor","hidden","SignIn","formHasErrors","setFormHasErrors","useSigninMutation","signin","jwtToken","localStorage","setItem","SignOut","Layout","children","style","backgroundImage","Home","FeatureAsi","viewOnly","toggleDetailsActive","setEntries","setChoice","featSelection","setFeatSelection","useEffect","parsed","scores","SkillOptionType","arrayToIterate","Array","FightOptionType","FeatureGeneral","toggleDetailActive","hasOptions","FeatureStartProf","savingThrows","profDetailsActive","toggleProfDetailsActive","ClassFeatures","classObj","setClassSelected","currentLevel","setCurrentLevel","setClassFeatures","classFeaturesHigher","setClassFeaturesHigher","setStartingProficiencies","hpDetailsActive","toggleHpDetailsActive","higherFeaturesVisible","toggleHigherFeaturesVisible","useClassByIdQuery","filteredEligible","classById","filteredIneligible","ClassCreation","useAllClassNamesQuery","classes","classSelected","c","transform","publicLinks","privateLinks","App","authToken","getItem","HttpLink","uri","authLink","setContext","_","headers","token","authorization","client","ApolloClient","cache","InMemoryCache","watchQuery","fetchPolicy","errorPolicy","query","ApolloProvider","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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E,yBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,yBAAAA,E,2BAAAA,E,gCAAAA,E,mCAAAA,M,cAwzDAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,uBAAAA,E,yBAAAA,E,mBAAAA,E,qBAAAA,E,yBAAAA,E,2BAAAA,E,gCAAAA,E,mCAAAA,M,cAkEAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,mBAAAA,E,sBAAAA,M,cAsFAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,mBAAAA,E,qBAAAA,E,uBAAAA,E,yBAAAA,E,uBAAAA,E,yBAAAA,E,uBAAAA,E,0BAAAA,M,cAuIAC,K,kBAAAA,E,qBAAAA,E,uBAAAA,E,4BAAAA,E,8BAAAA,E,gCAAAA,E,mCAAAA,M,cAWAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,sCAAAA,E,wCAAAA,E,gCAAAA,E,mCAAAA,M,cAiFAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,uBAAAA,E,yBAAAA,E,0CAAAA,E,4CAAAA,E,mBAAAA,E,sBAAAA,M,cA6FAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,2BAAAA,E,6BAAAA,E,4BAAAA,E,8BAAAA,E,mBAAAA,E,qBAAAA,E,gCAAAA,E,mCAAAA,M,cAwhDAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,wBAAAA,E,0BAAAA,E,2CAAAA,E,8CAAAA,M,cA2DAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,yBAAAA,E,2BAAAA,E,mBAAAA,E,qBAAAA,E,2BAAAA,E,6BAAAA,E,mBAAAA,E,qBAAAA,E,6BAAAA,E,+BAAAA,E,2BAAAA,E,6BAAAA,E,6BAAAA,E,gCAAAA,M,cAyGAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,iCAAAA,E,oCAAAA,M,cAkHAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,qBAAAA,E,uBAAAA,E,wBAAAA,E,2BAAAA,M,cA2MAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,mBAAAA,E,qBAAAA,E,+BAAAA,E,iCAAAA,E,qBAAAA,E,uBAAAA,E,4BAAAA,E,8BAAAA,E,uBAAAA,E,yBAAAA,E,4BAAAA,E,+BAAAA,M,cA2CAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,mBAAAA,E,qBAAAA,E,mBAAAA,E,qBAAAA,E,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,+BAAAA,E,iCAAAA,E,2BAAAA,E,6BAAAA,E,uBAAAA,E,yBAAAA,E,2BAAAA,E,6BAAAA,E,qCAAAA,E,uCAAAA,E,kCAAAA,E,oCAAAA,E,qBAAAA,E,uBAAAA,E,4BAAAA,E,8BAAAA,E,uBAAAA,E,yBAAAA,E,kCAAAA,E,oCAAAA,E,4BAAAA,E,8BAAAA,E,6BAAAA,E,+BAAAA,E,yBAAAA,E,4BAAAA,M,cAmMAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,uBAAAA,E,yBAAAA,E,qBAAAA,E,uBAAAA,E,0BAAAA,E,4BAAAA,E,+CAAAA,E,iDAAAA,E,wCAAAA,E,0CAAAA,E,wDAAAA,E,0DAAAA,E,mBAAAA,E,qBAAAA,E,yBAAAA,E,2BAAAA,E,gCAAAA,E,mCAAAA,M,cAqFAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,8BAAAA,E,gCAAAA,E,4CAAAA,E,8CAAAA,E,0BAAAA,E,4BAAAA,E,mDAAAA,E,qDAAAA,E,4CAAAA,E,8CAAAA,E,kDAAAA,E,oDAAAA,E,8CAAAA,E,gDAAAA,E,gDAAAA,E,kDAAAA,E,yDAAAA,E,2DAAAA,E,uBAAAA,E,yBAAAA,E,mBAAAA,E,qBAAAA,E,wCAAAA,E,0CAAAA,E,gCAAAA,E,mCAAAA,M,cAqIAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,8BAAAA,E,gCAAAA,E,2CAAAA,E,8CAAAA,M,cAmDAC,K,kBAAAA,E,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,yBAAAA,E,2BAAAA,E,mBAAAA,E,qBAAAA,E,wBAAAA,E,2BAAAA,M,cAi/BAC,K,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","file":"static/js/main.9fa7cd80.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** A location in a connection that can be used for resuming pagination. */\n  Cursor: any;\n  /**\n   * A point in time as described by the [ISO\n   * 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.\n   */\n  Datetime: any;\n  /** A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  JSON: any;\n  /**\n   * A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)\n   * which securely represents claims between two parties.\n   */\n  JwtToken: any;\n  /** A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122). */\n  UUID: any;\n};\n\nexport type Attribute = {\n  __typename?: 'Attribute';\n  id?: Maybe<Scalars['UUID']>;\n  attribute: Scalars['String'];\n  /** Reads and enables pagination through a set of `Skill`. */\n  skillsByAttrId: SkillsConnection;\n};\n\n\nexport type AttributeSkillsByAttrIdArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SkillsOrderBy>>;\n  condition?: Maybe<SkillCondition>;\n};\n\n/**\n * A condition to be used against `Attribute` object types. All fields are tested\n * for equality and combined with a logical ‘and.’\n */\nexport type AttributeCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `attribute` field. */\n  attribute?: Maybe<Scalars['String']>;\n};\n\n/** An input for mutations affecting `Attribute` */\nexport type AttributeInput = {\n  id?: Maybe<Scalars['UUID']>;\n  attribute: Scalars['String'];\n};\n\n/** Represents an update to a `Attribute`. Fields that are set will be updated. */\nexport type AttributePatch = {\n  id?: Maybe<Scalars['UUID']>;\n  attribute?: Maybe<Scalars['String']>;\n};\n\n/** A connection to a list of `Attribute` values. */\nexport type AttributesConnection = {\n  __typename?: 'AttributesConnection';\n  /** A list of `Attribute` objects. */\n  nodes: Array<Maybe<Attribute>>;\n  /** A list of edges which contains the `Attribute` and cursor to aid in pagination. */\n  edges: Array<AttributesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Attribute` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Attribute` edge in the connection. */\nexport type AttributesEdge = {\n  __typename?: 'AttributesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Attribute` at the end of the edge. */\n  node?: Maybe<Attribute>;\n};\n\n/** Methods to use when ordering `Attribute`. */\nexport enum AttributesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  AttributeAsc = 'ATTRIBUTE_ASC',\n  AttributeDesc = 'ATTRIBUTE_DESC'\n}\n\nexport type Bg = {\n  __typename?: 'Bg';\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n  numberOfExtraLanguages: Scalars['Int'];\n  languageOptions?: Maybe<Scalars['JSON']>;\n  numberOfToolsGranted?: Maybe<Scalars['Int']>;\n  toolOptions?: Maybe<Scalars['JSON']>;\n  numberOfSkillsGranted?: Maybe<Scalars['Int']>;\n  skillOptions?: Maybe<Scalars['JSON']>;\n  backgroundFeature?: Maybe<Scalars['UUID']>;\n  alternateBackgroundFeature?: Maybe<Scalars['UUID']>;\n  /** Reads a single `BgFeature` that is related to this `Bg`. */\n  bgFeatureByBackgroundFeature?: Maybe<BgFeature>;\n  /** Reads a single `BgFeature` that is related to this `Bg`. */\n  bgFeatureByAlternateBackgroundFeature?: Maybe<BgFeature>;\n};\n\n/** A condition to be used against `Bg` object types. All fields are tested for equality and combined with a logical ‘and.’ */\nexport type BgCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `description` field. */\n  description?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `numberOfExtraLanguages` field. */\n  numberOfExtraLanguages?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `languageOptions` field. */\n  languageOptions?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `numberOfToolsGranted` field. */\n  numberOfToolsGranted?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `toolOptions` field. */\n  toolOptions?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `numberOfSkillsGranted` field. */\n  numberOfSkillsGranted?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `skillOptions` field. */\n  skillOptions?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `backgroundFeature` field. */\n  backgroundFeature?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `alternateBackgroundFeature` field. */\n  alternateBackgroundFeature?: Maybe<Scalars['UUID']>;\n};\n\nexport type BgFeature = {\n  __typename?: 'BgFeature';\n  id?: Maybe<Scalars['UUID']>;\n  name: Scalars['String'];\n  conferringBg: Scalars['String'];\n  description: Scalars['String'];\n  /** Reads and enables pagination through a set of `Bg`. */\n  bgsByBackgroundFeature: BgsConnection;\n  /** Reads and enables pagination through a set of `Bg`. */\n  bgsByAlternateBackgroundFeature: BgsConnection;\n};\n\n\nexport type BgFeatureBgsByBackgroundFeatureArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<BgsOrderBy>>;\n  condition?: Maybe<BgCondition>;\n};\n\n\nexport type BgFeatureBgsByAlternateBackgroundFeatureArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<BgsOrderBy>>;\n  condition?: Maybe<BgCondition>;\n};\n\n/**\n * A condition to be used against `BgFeature` object types. All fields are tested\n * for equality and combined with a logical ‘and.’\n */\nexport type BgFeatureCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `conferringBg` field. */\n  conferringBg?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `description` field. */\n  description?: Maybe<Scalars['String']>;\n};\n\n/** An input for mutations affecting `BgFeature` */\nexport type BgFeatureInput = {\n  id?: Maybe<Scalars['UUID']>;\n  name: Scalars['String'];\n  conferringBg: Scalars['String'];\n  description: Scalars['String'];\n};\n\n/** Represents an update to a `BgFeature`. Fields that are set will be updated. */\nexport type BgFeaturePatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  conferringBg?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\n/** A connection to a list of `BgFeature` values. */\nexport type BgFeaturesConnection = {\n  __typename?: 'BgFeaturesConnection';\n  /** A list of `BgFeature` objects. */\n  nodes: Array<Maybe<BgFeature>>;\n  /** A list of edges which contains the `BgFeature` and cursor to aid in pagination. */\n  edges: Array<BgFeaturesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `BgFeature` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `BgFeature` edge in the connection. */\nexport type BgFeaturesEdge = {\n  __typename?: 'BgFeaturesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `BgFeature` at the end of the edge. */\n  node?: Maybe<BgFeature>;\n};\n\n/** Methods to use when ordering `BgFeature`. */\nexport enum BgFeaturesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  ConferringBgAsc = 'CONFERRING_BG_ASC',\n  ConferringBgDesc = 'CONFERRING_BG_DESC',\n  DescriptionAsc = 'DESCRIPTION_ASC',\n  DescriptionDesc = 'DESCRIPTION_DESC'\n}\n\n/** An input for mutations affecting `Bg` */\nexport type BgInput = {\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n  numberOfExtraLanguages: Scalars['Int'];\n  languageOptions?: Maybe<Scalars['JSON']>;\n  numberOfToolsGranted?: Maybe<Scalars['Int']>;\n  toolOptions?: Maybe<Scalars['JSON']>;\n  numberOfSkillsGranted?: Maybe<Scalars['Int']>;\n  skillOptions?: Maybe<Scalars['JSON']>;\n  backgroundFeature?: Maybe<Scalars['UUID']>;\n  alternateBackgroundFeature?: Maybe<Scalars['UUID']>;\n};\n\n/** Represents an update to a `Bg`. Fields that are set will be updated. */\nexport type BgPatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  numberOfExtraLanguages?: Maybe<Scalars['Int']>;\n  languageOptions?: Maybe<Scalars['JSON']>;\n  numberOfToolsGranted?: Maybe<Scalars['Int']>;\n  toolOptions?: Maybe<Scalars['JSON']>;\n  numberOfSkillsGranted?: Maybe<Scalars['Int']>;\n  skillOptions?: Maybe<Scalars['JSON']>;\n  backgroundFeature?: Maybe<Scalars['UUID']>;\n  alternateBackgroundFeature?: Maybe<Scalars['UUID']>;\n};\n\n/** A connection to a list of `Bg` values. */\nexport type BgsConnection = {\n  __typename?: 'BgsConnection';\n  /** A list of `Bg` objects. */\n  nodes: Array<Maybe<Bg>>;\n  /** A list of edges which contains the `Bg` and cursor to aid in pagination. */\n  edges: Array<BgsEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Bg` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Bg` edge in the connection. */\nexport type BgsEdge = {\n  __typename?: 'BgsEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Bg` at the end of the edge. */\n  node?: Maybe<Bg>;\n};\n\n/** Methods to use when ordering `Bg`. */\nexport enum BgsOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  DescriptionAsc = 'DESCRIPTION_ASC',\n  DescriptionDesc = 'DESCRIPTION_DESC',\n  NumberOfExtraLanguagesAsc = 'NUMBER_OF_EXTRA_LANGUAGES_ASC',\n  NumberOfExtraLanguagesDesc = 'NUMBER_OF_EXTRA_LANGUAGES_DESC',\n  LanguageOptionsAsc = 'LANGUAGE_OPTIONS_ASC',\n  LanguageOptionsDesc = 'LANGUAGE_OPTIONS_DESC',\n  NumberOfToolsGrantedAsc = 'NUMBER_OF_TOOLS_GRANTED_ASC',\n  NumberOfToolsGrantedDesc = 'NUMBER_OF_TOOLS_GRANTED_DESC',\n  ToolOptionsAsc = 'TOOL_OPTIONS_ASC',\n  ToolOptionsDesc = 'TOOL_OPTIONS_DESC',\n  NumberOfSkillsGrantedAsc = 'NUMBER_OF_SKILLS_GRANTED_ASC',\n  NumberOfSkillsGrantedDesc = 'NUMBER_OF_SKILLS_GRANTED_DESC',\n  SkillOptionsAsc = 'SKILL_OPTIONS_ASC',\n  SkillOptionsDesc = 'SKILL_OPTIONS_DESC',\n  BackgroundFeatureAsc = 'BACKGROUND_FEATURE_ASC',\n  BackgroundFeatureDesc = 'BACKGROUND_FEATURE_DESC',\n  AlternateBackgroundFeatureAsc = 'ALTERNATE_BACKGROUND_FEATURE_ASC',\n  AlternateBackgroundFeatureDesc = 'ALTERNATE_BACKGROUND_FEATURE_DESC'\n}\n\nexport type Class = Node & {\n  __typename?: 'Class';\n  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */\n  nodeId: Scalars['ID'];\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  page?: Maybe<Scalars['Int']>;\n  srd?: Maybe<Scalars['Boolean']>;\n  hdNumber?: Maybe<Scalars['Int']>;\n  hdFaces?: Maybe<Scalars['Int']>;\n  proficiency?: Maybe<Array<Maybe<Scalars['String']>>>;\n  spellcastingAbility?: Maybe<Scalars['String']>;\n  casterProgression?: Maybe<Scalars['String']>;\n  preparedSpells?: Maybe<Scalars['String']>;\n  cantripProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  spellsKnownProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  spellsKnownProgressionFixed?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  spellsKnownProgressionFixedAllowLowerLevel?: Maybe<Scalars['Boolean']>;\n  spellsKnownProgressionFixedByLevel?: Maybe<Scalars['JSON']>;\n  classFeatures?: Maybe<Array<Maybe<Scalars['String']>>>;\n  meta?: Maybe<Scalars['JSON']>;\n  startingProficiencies?: Maybe<Scalars['JSON']>;\n  startingEquipment?: Maybe<Scalars['JSON']>;\n  optionalFeatureProgression?: Maybe<Scalars['JSON']>;\n  multiclassing?: Maybe<Scalars['JSON']>;\n  subclassTitle?: Maybe<Scalars['String']>;\n  /** Reads and enables pagination through a set of `Subclass`. */\n  subclassesByClassId: SubclassesConnection;\n  /** Reads and enables pagination through a set of `ClassFeature`. */\n  classFeaturesByClassId: ClassFeaturesConnection;\n  /** Reads and enables pagination through a set of `SubclassFeature`. */\n  subclassFeaturesByClassId: SubclassFeaturesConnection;\n};\n\n\nexport type ClassSubclassesByClassIdArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SubclassesOrderBy>>;\n  condition?: Maybe<SubclassCondition>;\n};\n\n\nexport type ClassClassFeaturesByClassIdArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<ClassFeaturesOrderBy>>;\n  condition?: Maybe<ClassFeatureCondition>;\n};\n\n\nexport type ClassSubclassFeaturesByClassIdArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SubclassFeaturesOrderBy>>;\n  condition?: Maybe<SubclassFeatureCondition>;\n};\n\n/** A condition to be used against `Class` object types. All fields are tested for equality and combined with a logical ‘and.’ */\nexport type ClassCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `source` field. */\n  source?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `page` field. */\n  page?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `srd` field. */\n  srd?: Maybe<Scalars['Boolean']>;\n  /** Checks for equality with the object’s `hdNumber` field. */\n  hdNumber?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `hdFaces` field. */\n  hdFaces?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `proficiency` field. */\n  proficiency?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** Checks for equality with the object’s `spellcastingAbility` field. */\n  spellcastingAbility?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `casterProgression` field. */\n  casterProgression?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `preparedSpells` field. */\n  preparedSpells?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `cantripProgression` field. */\n  cantripProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  /** Checks for equality with the object’s `spellsKnownProgression` field. */\n  spellsKnownProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  /** Checks for equality with the object’s `spellsKnownProgressionFixed` field. */\n  spellsKnownProgressionFixed?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  /** Checks for equality with the object’s `spellsKnownProgressionFixedAllowLowerLevel` field. */\n  spellsKnownProgressionFixedAllowLowerLevel?: Maybe<Scalars['Boolean']>;\n  /** Checks for equality with the object’s `spellsKnownProgressionFixedByLevel` field. */\n  spellsKnownProgressionFixedByLevel?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `classFeatures` field. */\n  classFeatures?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** Checks for equality with the object’s `meta` field. */\n  meta?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `startingProficiencies` field. */\n  startingProficiencies?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `startingEquipment` field. */\n  startingEquipment?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `optionalFeatureProgression` field. */\n  optionalFeatureProgression?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `multiclassing` field. */\n  multiclassing?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `subclassTitle` field. */\n  subclassTitle?: Maybe<Scalars['String']>;\n};\n\nexport type ClassFeature = Node & {\n  __typename?: 'ClassFeature';\n  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */\n  nodeId: Scalars['ID'];\n  id: Scalars['UUID'];\n  name?: Maybe<Scalars['String']>;\n  classId?: Maybe<Scalars['UUID']>;\n  source?: Maybe<Scalars['String']>;\n  isClassFeatureVariant?: Maybe<Scalars['Boolean']>;\n  page?: Maybe<Scalars['Int']>;\n  classSource?: Maybe<Scalars['String']>;\n  level?: Maybe<Scalars['Int']>;\n  entries?: Maybe<Scalars['JSON']>;\n  hasOptions?: Maybe<Scalars['Boolean']>;\n  /** Reads a single `Class` that is related to this `ClassFeature`. */\n  classByClassId?: Maybe<Class>;\n};\n\n/**\n * A condition to be used against `ClassFeature` object types. All fields are\n * tested for equality and combined with a logical ‘and.’\n */\nexport type ClassFeatureCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `classId` field. */\n  classId?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `source` field. */\n  source?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `isClassFeatureVariant` field. */\n  isClassFeatureVariant?: Maybe<Scalars['Boolean']>;\n  /** Checks for equality with the object’s `page` field. */\n  page?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `classSource` field. */\n  classSource?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `level` field. */\n  level?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `entries` field. */\n  entries?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `hasOptions` field. */\n  hasOptions?: Maybe<Scalars['Boolean']>;\n};\n\n/** An input for mutations affecting `ClassFeature` */\nexport type ClassFeatureInput = {\n  id: Scalars['UUID'];\n  name?: Maybe<Scalars['String']>;\n  classId?: Maybe<Scalars['UUID']>;\n  source?: Maybe<Scalars['String']>;\n  isClassFeatureVariant?: Maybe<Scalars['Boolean']>;\n  page?: Maybe<Scalars['Int']>;\n  classSource?: Maybe<Scalars['String']>;\n  level?: Maybe<Scalars['Int']>;\n  entries?: Maybe<Scalars['JSON']>;\n  hasOptions?: Maybe<Scalars['Boolean']>;\n};\n\n/** Represents an update to a `ClassFeature`. Fields that are set will be updated. */\nexport type ClassFeaturePatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  classId?: Maybe<Scalars['UUID']>;\n  source?: Maybe<Scalars['String']>;\n  isClassFeatureVariant?: Maybe<Scalars['Boolean']>;\n  page?: Maybe<Scalars['Int']>;\n  classSource?: Maybe<Scalars['String']>;\n  level?: Maybe<Scalars['Int']>;\n  entries?: Maybe<Scalars['JSON']>;\n  hasOptions?: Maybe<Scalars['Boolean']>;\n};\n\n/** A connection to a list of `ClassFeature` values. */\nexport type ClassFeaturesConnection = {\n  __typename?: 'ClassFeaturesConnection';\n  /** A list of `ClassFeature` objects. */\n  nodes: Array<Maybe<ClassFeature>>;\n  /** A list of edges which contains the `ClassFeature` and cursor to aid in pagination. */\n  edges: Array<ClassFeaturesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `ClassFeature` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `ClassFeature` edge in the connection. */\nexport type ClassFeaturesEdge = {\n  __typename?: 'ClassFeaturesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `ClassFeature` at the end of the edge. */\n  node?: Maybe<ClassFeature>;\n};\n\n/** Methods to use when ordering `ClassFeature`. */\nexport enum ClassFeaturesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  ClassIdAsc = 'CLASS_ID_ASC',\n  ClassIdDesc = 'CLASS_ID_DESC',\n  SourceAsc = 'SOURCE_ASC',\n  SourceDesc = 'SOURCE_DESC',\n  IsClassFeatureVariantAsc = 'IS_CLASS_FEATURE_VARIANT_ASC',\n  IsClassFeatureVariantDesc = 'IS_CLASS_FEATURE_VARIANT_DESC',\n  PageAsc = 'PAGE_ASC',\n  PageDesc = 'PAGE_DESC',\n  ClassSourceAsc = 'CLASS_SOURCE_ASC',\n  ClassSourceDesc = 'CLASS_SOURCE_DESC',\n  LevelAsc = 'LEVEL_ASC',\n  LevelDesc = 'LEVEL_DESC',\n  EntriesAsc = 'ENTRIES_ASC',\n  EntriesDesc = 'ENTRIES_DESC',\n  HasOptionsAsc = 'HAS_OPTIONS_ASC',\n  HasOptionsDesc = 'HAS_OPTIONS_DESC',\n  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',\n  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'\n}\n\n/** An input for mutations affecting `Class` */\nexport type ClassInput = {\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  page?: Maybe<Scalars['Int']>;\n  srd?: Maybe<Scalars['Boolean']>;\n  hdNumber?: Maybe<Scalars['Int']>;\n  hdFaces?: Maybe<Scalars['Int']>;\n  proficiency?: Maybe<Array<Maybe<Scalars['String']>>>;\n  spellcastingAbility?: Maybe<Scalars['String']>;\n  casterProgression?: Maybe<Scalars['String']>;\n  preparedSpells?: Maybe<Scalars['String']>;\n  cantripProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  spellsKnownProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  spellsKnownProgressionFixed?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  spellsKnownProgressionFixedAllowLowerLevel?: Maybe<Scalars['Boolean']>;\n  spellsKnownProgressionFixedByLevel?: Maybe<Scalars['JSON']>;\n  classFeatures?: Maybe<Array<Maybe<Scalars['String']>>>;\n  meta?: Maybe<Scalars['JSON']>;\n  startingProficiencies?: Maybe<Scalars['JSON']>;\n  startingEquipment?: Maybe<Scalars['JSON']>;\n  optionalFeatureProgression?: Maybe<Scalars['JSON']>;\n  multiclassing?: Maybe<Scalars['JSON']>;\n  subclassTitle?: Maybe<Scalars['String']>;\n};\n\n/** Represents an update to a `Class`. Fields that are set will be updated. */\nexport type ClassPatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  source?: Maybe<Scalars['String']>;\n  page?: Maybe<Scalars['Int']>;\n  srd?: Maybe<Scalars['Boolean']>;\n  hdNumber?: Maybe<Scalars['Int']>;\n  hdFaces?: Maybe<Scalars['Int']>;\n  proficiency?: Maybe<Array<Maybe<Scalars['String']>>>;\n  spellcastingAbility?: Maybe<Scalars['String']>;\n  casterProgression?: Maybe<Scalars['String']>;\n  preparedSpells?: Maybe<Scalars['String']>;\n  cantripProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  spellsKnownProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  spellsKnownProgressionFixed?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  spellsKnownProgressionFixedAllowLowerLevel?: Maybe<Scalars['Boolean']>;\n  spellsKnownProgressionFixedByLevel?: Maybe<Scalars['JSON']>;\n  classFeatures?: Maybe<Array<Maybe<Scalars['String']>>>;\n  meta?: Maybe<Scalars['JSON']>;\n  startingProficiencies?: Maybe<Scalars['JSON']>;\n  startingEquipment?: Maybe<Scalars['JSON']>;\n  optionalFeatureProgression?: Maybe<Scalars['JSON']>;\n  multiclassing?: Maybe<Scalars['JSON']>;\n  subclassTitle?: Maybe<Scalars['String']>;\n};\n\n/** A connection to a list of `Class` values. */\nexport type ClassesConnection = {\n  __typename?: 'ClassesConnection';\n  /** A list of `Class` objects. */\n  nodes: Array<Maybe<Class>>;\n  /** A list of edges which contains the `Class` and cursor to aid in pagination. */\n  edges: Array<ClassesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Class` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Class` edge in the connection. */\nexport type ClassesEdge = {\n  __typename?: 'ClassesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Class` at the end of the edge. */\n  node?: Maybe<Class>;\n};\n\n/** Methods to use when ordering `Class`. */\nexport enum ClassesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  SourceAsc = 'SOURCE_ASC',\n  SourceDesc = 'SOURCE_DESC',\n  PageAsc = 'PAGE_ASC',\n  PageDesc = 'PAGE_DESC',\n  SrdAsc = 'SRD_ASC',\n  SrdDesc = 'SRD_DESC',\n  HdNumberAsc = 'HD_NUMBER_ASC',\n  HdNumberDesc = 'HD_NUMBER_DESC',\n  HdFacesAsc = 'HD_FACES_ASC',\n  HdFacesDesc = 'HD_FACES_DESC',\n  ProficiencyAsc = 'PROFICIENCY_ASC',\n  ProficiencyDesc = 'PROFICIENCY_DESC',\n  SpellcastingAbilityAsc = 'SPELLCASTING_ABILITY_ASC',\n  SpellcastingAbilityDesc = 'SPELLCASTING_ABILITY_DESC',\n  CasterProgressionAsc = 'CASTER_PROGRESSION_ASC',\n  CasterProgressionDesc = 'CASTER_PROGRESSION_DESC',\n  PreparedSpellsAsc = 'PREPARED_SPELLS_ASC',\n  PreparedSpellsDesc = 'PREPARED_SPELLS_DESC',\n  CantripProgressionAsc = 'CANTRIP_PROGRESSION_ASC',\n  CantripProgressionDesc = 'CANTRIP_PROGRESSION_DESC',\n  SpellsKnownProgressionAsc = 'SPELLS_KNOWN_PROGRESSION_ASC',\n  SpellsKnownProgressionDesc = 'SPELLS_KNOWN_PROGRESSION_DESC',\n  SpellsKnownProgressionFixedAsc = 'SPELLS_KNOWN_PROGRESSION_FIXED_ASC',\n  SpellsKnownProgressionFixedDesc = 'SPELLS_KNOWN_PROGRESSION_FIXED_DESC',\n  SpellsKnownProgressionFixedAllowLowerLevelAsc = 'SPELLS_KNOWN_PROGRESSION_FIXED_ALLOW_LOWER_LEVEL_ASC',\n  SpellsKnownProgressionFixedAllowLowerLevelDesc = 'SPELLS_KNOWN_PROGRESSION_FIXED_ALLOW_LOWER_LEVEL_DESC',\n  SpellsKnownProgressionFixedByLevelAsc = 'SPELLS_KNOWN_PROGRESSION_FIXED_BY_LEVEL_ASC',\n  SpellsKnownProgressionFixedByLevelDesc = 'SPELLS_KNOWN_PROGRESSION_FIXED_BY_LEVEL_DESC',\n  ClassFeaturesAsc = 'CLASS_FEATURES_ASC',\n  ClassFeaturesDesc = 'CLASS_FEATURES_DESC',\n  MetaAsc = 'META_ASC',\n  MetaDesc = 'META_DESC',\n  StartingProficienciesAsc = 'STARTING_PROFICIENCIES_ASC',\n  StartingProficienciesDesc = 'STARTING_PROFICIENCIES_DESC',\n  StartingEquipmentAsc = 'STARTING_EQUIPMENT_ASC',\n  StartingEquipmentDesc = 'STARTING_EQUIPMENT_DESC',\n  OptionalFeatureProgressionAsc = 'OPTIONAL_FEATURE_PROGRESSION_ASC',\n  OptionalFeatureProgressionDesc = 'OPTIONAL_FEATURE_PROGRESSION_DESC',\n  MulticlassingAsc = 'MULTICLASSING_ASC',\n  MulticlassingDesc = 'MULTICLASSING_DESC',\n  SubclassTitleAsc = 'SUBCLASS_TITLE_ASC',\n  SubclassTitleDesc = 'SUBCLASS_TITLE_DESC',\n  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',\n  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'\n}\n\nexport type Condition = Node & {\n  __typename?: 'Condition';\n  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */\n  nodeId: Scalars['ID'];\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  page?: Maybe<Scalars['Int']>;\n  srd?: Maybe<Scalars['Boolean']>;\n  entries?: Maybe<Scalars['JSON']>;\n};\n\n/**\n * A condition to be used against `Condition` object types. All fields are tested\n * for equality and combined with a logical ‘and.’\n */\nexport type ConditionCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `source` field. */\n  source?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `page` field. */\n  page?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `srd` field. */\n  srd?: Maybe<Scalars['Boolean']>;\n  /** Checks for equality with the object’s `entries` field. */\n  entries?: Maybe<Scalars['JSON']>;\n};\n\n/** An input for mutations affecting `Condition` */\nexport type ConditionInput = {\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  page?: Maybe<Scalars['Int']>;\n  srd?: Maybe<Scalars['Boolean']>;\n  entries?: Maybe<Scalars['JSON']>;\n};\n\n/** Represents an update to a `Condition`. Fields that are set will be updated. */\nexport type ConditionPatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  source?: Maybe<Scalars['String']>;\n  page?: Maybe<Scalars['Int']>;\n  srd?: Maybe<Scalars['Boolean']>;\n  entries?: Maybe<Scalars['JSON']>;\n};\n\n/** A connection to a list of `Condition` values. */\nexport type ConditionsConnection = {\n  __typename?: 'ConditionsConnection';\n  /** A list of `Condition` objects. */\n  nodes: Array<Maybe<Condition>>;\n  /** A list of edges which contains the `Condition` and cursor to aid in pagination. */\n  edges: Array<ConditionsEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Condition` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Condition` edge in the connection. */\nexport type ConditionsEdge = {\n  __typename?: 'ConditionsEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Condition` at the end of the edge. */\n  node?: Maybe<Condition>;\n};\n\n/** Methods to use when ordering `Condition`. */\nexport enum ConditionsOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  SourceAsc = 'SOURCE_ASC',\n  SourceDesc = 'SOURCE_DESC',\n  PageAsc = 'PAGE_ASC',\n  PageDesc = 'PAGE_DESC',\n  SrdAsc = 'SRD_ASC',\n  SrdDesc = 'SRD_DESC',\n  EntriesAsc = 'ENTRIES_ASC',\n  EntriesDesc = 'ENTRIES_DESC',\n  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',\n  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'\n}\n\n/** All input for the create `Attribute` mutation. */\nexport type CreateAttributeInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Attribute` to be created by this mutation. */\n  attribute: AttributeInput;\n};\n\n/** The output of our create `Attribute` mutation. */\nexport type CreateAttributePayload = {\n  __typename?: 'CreateAttributePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Attribute` that was created by this mutation. */\n  attribute?: Maybe<Attribute>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Attribute`. May be used by Relay 1. */\n  attributeEdge?: Maybe<AttributesEdge>;\n};\n\n\n/** The output of our create `Attribute` mutation. */\nexport type CreateAttributePayloadAttributeEdgeArgs = {\n  orderBy?: Maybe<Array<AttributesOrderBy>>;\n};\n\n/** All input for the create `BgFeature` mutation. */\nexport type CreateBgFeatureInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `BgFeature` to be created by this mutation. */\n  bgFeature: BgFeatureInput;\n};\n\n/** The output of our create `BgFeature` mutation. */\nexport type CreateBgFeaturePayload = {\n  __typename?: 'CreateBgFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `BgFeature` that was created by this mutation. */\n  bgFeature?: Maybe<BgFeature>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `BgFeature`. May be used by Relay 1. */\n  bgFeatureEdge?: Maybe<BgFeaturesEdge>;\n};\n\n\n/** The output of our create `BgFeature` mutation. */\nexport type CreateBgFeaturePayloadBgFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<BgFeaturesOrderBy>>;\n};\n\n/** All input for the create `Bg` mutation. */\nexport type CreateBgInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Bg` to be created by this mutation. */\n  bg: BgInput;\n};\n\n/** The output of our create `Bg` mutation. */\nexport type CreateBgPayload = {\n  __typename?: 'CreateBgPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Bg` that was created by this mutation. */\n  bg?: Maybe<Bg>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `BgFeature` that is related to this `Bg`. */\n  bgFeatureByBackgroundFeature?: Maybe<BgFeature>;\n  /** Reads a single `BgFeature` that is related to this `Bg`. */\n  bgFeatureByAlternateBackgroundFeature?: Maybe<BgFeature>;\n  /** An edge for our `Bg`. May be used by Relay 1. */\n  bgEdge?: Maybe<BgsEdge>;\n};\n\n\n/** The output of our create `Bg` mutation. */\nexport type CreateBgPayloadBgEdgeArgs = {\n  orderBy?: Maybe<Array<BgsOrderBy>>;\n};\n\n/** All input for the create `ClassFeature` mutation. */\nexport type CreateClassFeatureInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `ClassFeature` to be created by this mutation. */\n  classFeature: ClassFeatureInput;\n};\n\n/** The output of our create `ClassFeature` mutation. */\nexport type CreateClassFeaturePayload = {\n  __typename?: 'CreateClassFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `ClassFeature` that was created by this mutation. */\n  classFeature?: Maybe<ClassFeature>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Class` that is related to this `ClassFeature`. */\n  classByClassId?: Maybe<Class>;\n  /** An edge for our `ClassFeature`. May be used by Relay 1. */\n  classFeatureEdge?: Maybe<ClassFeaturesEdge>;\n};\n\n\n/** The output of our create `ClassFeature` mutation. */\nexport type CreateClassFeaturePayloadClassFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<ClassFeaturesOrderBy>>;\n};\n\n/** All input for the create `Class` mutation. */\nexport type CreateClassInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Class` to be created by this mutation. */\n  class: ClassInput;\n};\n\n/** The output of our create `Class` mutation. */\nexport type CreateClassPayload = {\n  __typename?: 'CreateClassPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Class` that was created by this mutation. */\n  class?: Maybe<Class>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Class`. May be used by Relay 1. */\n  classEdge?: Maybe<ClassesEdge>;\n};\n\n\n/** The output of our create `Class` mutation. */\nexport type CreateClassPayloadClassEdgeArgs = {\n  orderBy?: Maybe<Array<ClassesOrderBy>>;\n};\n\n/** All input for the create `Condition` mutation. */\nexport type CreateConditionInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Condition` to be created by this mutation. */\n  condition: ConditionInput;\n};\n\n/** The output of our create `Condition` mutation. */\nexport type CreateConditionPayload = {\n  __typename?: 'CreateConditionPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Condition` that was created by this mutation. */\n  condition?: Maybe<Condition>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Condition`. May be used by Relay 1. */\n  conditionEdge?: Maybe<ConditionsEdge>;\n};\n\n\n/** The output of our create `Condition` mutation. */\nexport type CreateConditionPayloadConditionEdgeArgs = {\n  orderBy?: Maybe<Array<ConditionsOrderBy>>;\n};\n\n/** All input for the create `Disease` mutation. */\nexport type CreateDiseaseInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Disease` to be created by this mutation. */\n  disease: DiseaseInput;\n};\n\n/** The output of our create `Disease` mutation. */\nexport type CreateDiseasePayload = {\n  __typename?: 'CreateDiseasePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Disease` that was created by this mutation. */\n  disease?: Maybe<Disease>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Disease`. May be used by Relay 1. */\n  diseaseEdge?: Maybe<DiseasesEdge>;\n};\n\n\n/** The output of our create `Disease` mutation. */\nexport type CreateDiseasePayloadDiseaseEdgeArgs = {\n  orderBy?: Maybe<Array<DiseasesOrderBy>>;\n};\n\n/** All input for the create `Equipment` mutation. */\nexport type CreateEquipmentInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Equipment` to be created by this mutation. */\n  equipment: EquipmentInput;\n};\n\n/** The output of our create `Equipment` mutation. */\nexport type CreateEquipmentPayload = {\n  __typename?: 'CreateEquipmentPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Equipment` that was created by this mutation. */\n  equipment?: Maybe<Equipment>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Equipment`. May be used by Relay 1. */\n  equipmentEdge?: Maybe<EquipmentEdge>;\n};\n\n\n/** The output of our create `Equipment` mutation. */\nexport type CreateEquipmentPayloadEquipmentEdgeArgs = {\n  orderBy?: Maybe<Array<EquipmentOrderBy>>;\n};\n\n/** All input for the create `Feat` mutation. */\nexport type CreateFeatInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Feat` to be created by this mutation. */\n  feat: FeatInput;\n};\n\n/** The output of our create `Feat` mutation. */\nexport type CreateFeatPayload = {\n  __typename?: 'CreateFeatPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Feat` that was created by this mutation. */\n  feat?: Maybe<Feat>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Feat`. May be used by Relay 1. */\n  featEdge?: Maybe<FeatsEdge>;\n};\n\n\n/** The output of our create `Feat` mutation. */\nexport type CreateFeatPayloadFeatEdgeArgs = {\n  orderBy?: Maybe<Array<FeatsOrderBy>>;\n};\n\n/** All input for the create `KnexMigration` mutation. */\nexport type CreateKnexMigrationInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `KnexMigration` to be created by this mutation. */\n  knexMigration: KnexMigrationInput;\n};\n\n/** The output of our create `KnexMigration` mutation. */\nexport type CreateKnexMigrationPayload = {\n  __typename?: 'CreateKnexMigrationPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `KnexMigration` that was created by this mutation. */\n  knexMigration?: Maybe<KnexMigration>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `KnexMigration`. May be used by Relay 1. */\n  knexMigrationEdge?: Maybe<KnexMigrationsEdge>;\n};\n\n\n/** The output of our create `KnexMigration` mutation. */\nexport type CreateKnexMigrationPayloadKnexMigrationEdgeArgs = {\n  orderBy?: Maybe<Array<KnexMigrationsOrderBy>>;\n};\n\n/** All input for the create `KnexMigrationsLock` mutation. */\nexport type CreateKnexMigrationsLockInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `KnexMigrationsLock` to be created by this mutation. */\n  knexMigrationsLock: KnexMigrationsLockInput;\n};\n\n/** The output of our create `KnexMigrationsLock` mutation. */\nexport type CreateKnexMigrationsLockPayload = {\n  __typename?: 'CreateKnexMigrationsLockPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `KnexMigrationsLock` that was created by this mutation. */\n  knexMigrationsLock?: Maybe<KnexMigrationsLock>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `KnexMigrationsLock`. May be used by Relay 1. */\n  knexMigrationsLockEdge?: Maybe<KnexMigrationsLocksEdge>;\n};\n\n\n/** The output of our create `KnexMigrationsLock` mutation. */\nexport type CreateKnexMigrationsLockPayloadKnexMigrationsLockEdgeArgs = {\n  orderBy?: Maybe<Array<KnexMigrationsLocksOrderBy>>;\n};\n\n/** All input for the create `Language` mutation. */\nexport type CreateLanguageInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Language` to be created by this mutation. */\n  language: LanguageInput;\n};\n\n/** The output of our create `Language` mutation. */\nexport type CreateLanguagePayload = {\n  __typename?: 'CreateLanguagePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Language` that was created by this mutation. */\n  language?: Maybe<Language>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Language`. May be used by Relay 1. */\n  languageEdge?: Maybe<LanguagesEdge>;\n};\n\n\n/** The output of our create `Language` mutation. */\nexport type CreateLanguagePayloadLanguageEdgeArgs = {\n  orderBy?: Maybe<Array<LanguagesOrderBy>>;\n};\n\n/** All input for the create `Minion` mutation. */\nexport type CreateMinionInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Minion` to be created by this mutation. */\n  minion: MinionInput;\n};\n\n/** The output of our create `Minion` mutation. */\nexport type CreateMinionPayload = {\n  __typename?: 'CreateMinionPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Minion` that was created by this mutation. */\n  minion?: Maybe<Minion>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Minion`. May be used by Relay 1. */\n  minionEdge?: Maybe<MinionsEdge>;\n};\n\n\n/** The output of our create `Minion` mutation. */\nexport type CreateMinionPayloadMinionEdgeArgs = {\n  orderBy?: Maybe<Array<MinionsOrderBy>>;\n};\n\n/** All input for the create `RaceFeature` mutation. */\nexport type CreateRaceFeatureInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `RaceFeature` to be created by this mutation. */\n  raceFeature: RaceFeatureInput;\n};\n\n/** The output of our create `RaceFeature` mutation. */\nexport type CreateRaceFeaturePayload = {\n  __typename?: 'CreateRaceFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `RaceFeature` that was created by this mutation. */\n  raceFeature?: Maybe<RaceFeature>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Race` that is related to this `RaceFeature`. */\n  raceByRaceId?: Maybe<Race>;\n  /** Reads a single `RacialFeature` that is related to this `RaceFeature`. */\n  racialFeatureByRacialFeatureId?: Maybe<RacialFeature>;\n  /** An edge for our `RaceFeature`. May be used by Relay 1. */\n  raceFeatureEdge?: Maybe<RaceFeaturesEdge>;\n};\n\n\n/** The output of our create `RaceFeature` mutation. */\nexport type CreateRaceFeaturePayloadRaceFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<RaceFeaturesOrderBy>>;\n};\n\n/** All input for the create `Race` mutation. */\nexport type CreateRaceInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Race` to be created by this mutation. */\n  race: RaceInput;\n};\n\n/** The output of our create `Race` mutation. */\nexport type CreateRacePayload = {\n  __typename?: 'CreateRacePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Race` that was created by this mutation. */\n  race?: Maybe<Race>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Race`. May be used by Relay 1. */\n  raceEdge?: Maybe<RacesEdge>;\n};\n\n\n/** The output of our create `Race` mutation. */\nexport type CreateRacePayloadRaceEdgeArgs = {\n  orderBy?: Maybe<Array<RacesOrderBy>>;\n};\n\n/** All input for the create `RacialFeature` mutation. */\nexport type CreateRacialFeatureInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `RacialFeature` to be created by this mutation. */\n  racialFeature: RacialFeatureInput;\n};\n\n/** The output of our create `RacialFeature` mutation. */\nexport type CreateRacialFeaturePayload = {\n  __typename?: 'CreateRacialFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `RacialFeature` that was created by this mutation. */\n  racialFeature?: Maybe<RacialFeature>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `RacialFeature`. May be used by Relay 1. */\n  racialFeatureEdge?: Maybe<RacialFeaturesEdge>;\n};\n\n\n/** The output of our create `RacialFeature` mutation. */\nexport type CreateRacialFeaturePayloadRacialFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<RacialFeaturesOrderBy>>;\n};\n\n/** All input for the create `Skill` mutation. */\nexport type CreateSkillInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Skill` to be created by this mutation. */\n  skill: SkillInput;\n};\n\n/** The output of our create `Skill` mutation. */\nexport type CreateSkillPayload = {\n  __typename?: 'CreateSkillPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Skill` that was created by this mutation. */\n  skill?: Maybe<Skill>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Attribute` that is related to this `Skill`. */\n  attributeByAttrId?: Maybe<Attribute>;\n  /** An edge for our `Skill`. May be used by Relay 1. */\n  skillEdge?: Maybe<SkillsEdge>;\n};\n\n\n/** The output of our create `Skill` mutation. */\nexport type CreateSkillPayloadSkillEdgeArgs = {\n  orderBy?: Maybe<Array<SkillsOrderBy>>;\n};\n\n/** All input for the create `Spell` mutation. */\nexport type CreateSpellInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Spell` to be created by this mutation. */\n  spell: SpellInput;\n};\n\n/** The output of our create `Spell` mutation. */\nexport type CreateSpellPayload = {\n  __typename?: 'CreateSpellPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Spell` that was created by this mutation. */\n  spell?: Maybe<Spell>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Spell`. May be used by Relay 1. */\n  spellEdge?: Maybe<SpellsEdge>;\n};\n\n\n/** The output of our create `Spell` mutation. */\nexport type CreateSpellPayloadSpellEdgeArgs = {\n  orderBy?: Maybe<Array<SpellsOrderBy>>;\n};\n\n/** All input for the create `SpellSlug` mutation. */\nexport type CreateSpellSlugInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `SpellSlug` to be created by this mutation. */\n  spellSlug: SpellSlugInput;\n};\n\n/** The output of our create `SpellSlug` mutation. */\nexport type CreateSpellSlugPayload = {\n  __typename?: 'CreateSpellSlugPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `SpellSlug` that was created by this mutation. */\n  spellSlug?: Maybe<SpellSlug>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `SpellSlug`. May be used by Relay 1. */\n  spellSlugEdge?: Maybe<SpellSlugsEdge>;\n};\n\n\n/** The output of our create `SpellSlug` mutation. */\nexport type CreateSpellSlugPayloadSpellSlugEdgeArgs = {\n  orderBy?: Maybe<Array<SpellSlugsOrderBy>>;\n};\n\n/** All input for the create `SubclassFeature` mutation. */\nexport type CreateSubclassFeatureInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `SubclassFeature` to be created by this mutation. */\n  subclassFeature: SubclassFeatureInput;\n};\n\n/** The output of our create `SubclassFeature` mutation. */\nexport type CreateSubclassFeaturePayload = {\n  __typename?: 'CreateSubclassFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `SubclassFeature` that was created by this mutation. */\n  subclassFeature?: Maybe<SubclassFeature>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Class` that is related to this `SubclassFeature`. */\n  classByClassId?: Maybe<Class>;\n  /** An edge for our `SubclassFeature`. May be used by Relay 1. */\n  subclassFeatureEdge?: Maybe<SubclassFeaturesEdge>;\n};\n\n\n/** The output of our create `SubclassFeature` mutation. */\nexport type CreateSubclassFeaturePayloadSubclassFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<SubclassFeaturesOrderBy>>;\n};\n\n/** All input for the create `Subclass` mutation. */\nexport type CreateSubclassInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Subclass` to be created by this mutation. */\n  subclass: SubclassInput;\n};\n\n/** The output of our create `Subclass` mutation. */\nexport type CreateSubclassPayload = {\n  __typename?: 'CreateSubclassPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Subclass` that was created by this mutation. */\n  subclass?: Maybe<Subclass>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Class` that is related to this `Subclass`. */\n  classByClassId?: Maybe<Class>;\n  /** An edge for our `Subclass`. May be used by Relay 1. */\n  subclassEdge?: Maybe<SubclassesEdge>;\n};\n\n\n/** The output of our create `Subclass` mutation. */\nexport type CreateSubclassPayloadSubclassEdgeArgs = {\n  orderBy?: Maybe<Array<SubclassesOrderBy>>;\n};\n\n/** All input for the create `SubraceFeature` mutation. */\nexport type CreateSubraceFeatureInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `SubraceFeature` to be created by this mutation. */\n  subraceFeature: SubraceFeatureInput;\n};\n\n/** The output of our create `SubraceFeature` mutation. */\nexport type CreateSubraceFeaturePayload = {\n  __typename?: 'CreateSubraceFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `SubraceFeature` that was created by this mutation. */\n  subraceFeature?: Maybe<SubraceFeature>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Subrace` that is related to this `SubraceFeature`. */\n  subraceBySubraceId?: Maybe<Subrace>;\n  /** Reads a single `RacialFeature` that is related to this `SubraceFeature`. */\n  racialFeatureByRacialFeatureId?: Maybe<RacialFeature>;\n  /** An edge for our `SubraceFeature`. May be used by Relay 1. */\n  subraceFeatureEdge?: Maybe<SubraceFeaturesEdge>;\n};\n\n\n/** The output of our create `SubraceFeature` mutation. */\nexport type CreateSubraceFeaturePayloadSubraceFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<SubraceFeaturesOrderBy>>;\n};\n\n/** All input for the create `Subrace` mutation. */\nexport type CreateSubraceInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Subrace` to be created by this mutation. */\n  subrace: SubraceInput;\n};\n\n/** The output of our create `Subrace` mutation. */\nexport type CreateSubracePayload = {\n  __typename?: 'CreateSubracePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Subrace` that was created by this mutation. */\n  subrace?: Maybe<Subrace>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Race` that is related to this `Subrace`. */\n  raceByRaceId?: Maybe<Race>;\n  /** An edge for our `Subrace`. May be used by Relay 1. */\n  subraceEdge?: Maybe<SubracesEdge>;\n};\n\n\n/** The output of our create `Subrace` mutation. */\nexport type CreateSubracePayloadSubraceEdgeArgs = {\n  orderBy?: Maybe<Array<SubracesOrderBy>>;\n};\n\n/** All input for the create `Wizard` mutation. */\nexport type CreateWizardInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Wizard` to be created by this mutation. */\n  wizard: WizardInput;\n};\n\n/** The output of our create `Wizard` mutation. */\nexport type CreateWizardPayload = {\n  __typename?: 'CreateWizardPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Wizard` that was created by this mutation. */\n  wizard?: Maybe<Wizard>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Minion` that is related to this `Wizard`. */\n  minionByUserId?: Maybe<Minion>;\n  /** An edge for our `Wizard`. May be used by Relay 1. */\n  wizardEdge?: Maybe<WizardsEdge>;\n};\n\n\n/** The output of our create `Wizard` mutation. */\nexport type CreateWizardPayloadWizardEdgeArgs = {\n  orderBy?: Maybe<Array<WizardsOrderBy>>;\n};\n\n\n\n/** All input for the `deleteAttributeById` mutation. */\nexport type DeleteAttributeByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** The output of our delete `Attribute` mutation. */\nexport type DeleteAttributePayload = {\n  __typename?: 'DeleteAttributePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Attribute` that was deleted by this mutation. */\n  attribute?: Maybe<Attribute>;\n  deletedAttributeId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Attribute`. May be used by Relay 1. */\n  attributeEdge?: Maybe<AttributesEdge>;\n};\n\n\n/** The output of our delete `Attribute` mutation. */\nexport type DeleteAttributePayloadAttributeEdgeArgs = {\n  orderBy?: Maybe<Array<AttributesOrderBy>>;\n};\n\n/** All input for the `deleteBgById` mutation. */\nexport type DeleteBgByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `deleteBgFeatureById` mutation. */\nexport type DeleteBgFeatureByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** The output of our delete `BgFeature` mutation. */\nexport type DeleteBgFeaturePayload = {\n  __typename?: 'DeleteBgFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `BgFeature` that was deleted by this mutation. */\n  bgFeature?: Maybe<BgFeature>;\n  deletedBgFeatureId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `BgFeature`. May be used by Relay 1. */\n  bgFeatureEdge?: Maybe<BgFeaturesEdge>;\n};\n\n\n/** The output of our delete `BgFeature` mutation. */\nexport type DeleteBgFeaturePayloadBgFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<BgFeaturesOrderBy>>;\n};\n\n/** The output of our delete `Bg` mutation. */\nexport type DeleteBgPayload = {\n  __typename?: 'DeleteBgPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Bg` that was deleted by this mutation. */\n  bg?: Maybe<Bg>;\n  deletedBgId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `BgFeature` that is related to this `Bg`. */\n  bgFeatureByBackgroundFeature?: Maybe<BgFeature>;\n  /** Reads a single `BgFeature` that is related to this `Bg`. */\n  bgFeatureByAlternateBackgroundFeature?: Maybe<BgFeature>;\n  /** An edge for our `Bg`. May be used by Relay 1. */\n  bgEdge?: Maybe<BgsEdge>;\n};\n\n\n/** The output of our delete `Bg` mutation. */\nexport type DeleteBgPayloadBgEdgeArgs = {\n  orderBy?: Maybe<Array<BgsOrderBy>>;\n};\n\n/** All input for the `deleteClassById` mutation. */\nexport type DeleteClassByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `deleteClassFeatureById` mutation. */\nexport type DeleteClassFeatureByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `deleteClassFeature` mutation. */\nexport type DeleteClassFeatureInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `ClassFeature` to be deleted. */\n  nodeId: Scalars['ID'];\n};\n\n/** The output of our delete `ClassFeature` mutation. */\nexport type DeleteClassFeaturePayload = {\n  __typename?: 'DeleteClassFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `ClassFeature` that was deleted by this mutation. */\n  classFeature?: Maybe<ClassFeature>;\n  deletedClassFeatureId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Class` that is related to this `ClassFeature`. */\n  classByClassId?: Maybe<Class>;\n  /** An edge for our `ClassFeature`. May be used by Relay 1. */\n  classFeatureEdge?: Maybe<ClassFeaturesEdge>;\n};\n\n\n/** The output of our delete `ClassFeature` mutation. */\nexport type DeleteClassFeaturePayloadClassFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<ClassFeaturesOrderBy>>;\n};\n\n/** All input for the `deleteClass` mutation. */\nexport type DeleteClassInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `Class` to be deleted. */\n  nodeId: Scalars['ID'];\n};\n\n/** The output of our delete `Class` mutation. */\nexport type DeleteClassPayload = {\n  __typename?: 'DeleteClassPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Class` that was deleted by this mutation. */\n  class?: Maybe<Class>;\n  deletedClassId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Class`. May be used by Relay 1. */\n  classEdge?: Maybe<ClassesEdge>;\n};\n\n\n/** The output of our delete `Class` mutation. */\nexport type DeleteClassPayloadClassEdgeArgs = {\n  orderBy?: Maybe<Array<ClassesOrderBy>>;\n};\n\n/** All input for the `deleteConditionById` mutation. */\nexport type DeleteConditionByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `deleteCondition` mutation. */\nexport type DeleteConditionInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `Condition` to be deleted. */\n  nodeId: Scalars['ID'];\n};\n\n/** The output of our delete `Condition` mutation. */\nexport type DeleteConditionPayload = {\n  __typename?: 'DeleteConditionPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Condition` that was deleted by this mutation. */\n  condition?: Maybe<Condition>;\n  deletedConditionId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Condition`. May be used by Relay 1. */\n  conditionEdge?: Maybe<ConditionsEdge>;\n};\n\n\n/** The output of our delete `Condition` mutation. */\nexport type DeleteConditionPayloadConditionEdgeArgs = {\n  orderBy?: Maybe<Array<ConditionsOrderBy>>;\n};\n\n/** All input for the `deleteDiseaseById` mutation. */\nexport type DeleteDiseaseByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `deleteDisease` mutation. */\nexport type DeleteDiseaseInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `Disease` to be deleted. */\n  nodeId: Scalars['ID'];\n};\n\n/** The output of our delete `Disease` mutation. */\nexport type DeleteDiseasePayload = {\n  __typename?: 'DeleteDiseasePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Disease` that was deleted by this mutation. */\n  disease?: Maybe<Disease>;\n  deletedDiseaseId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Disease`. May be used by Relay 1. */\n  diseaseEdge?: Maybe<DiseasesEdge>;\n};\n\n\n/** The output of our delete `Disease` mutation. */\nexport type DeleteDiseasePayloadDiseaseEdgeArgs = {\n  orderBy?: Maybe<Array<DiseasesOrderBy>>;\n};\n\n/** All input for the `deleteEquipmentById` mutation. */\nexport type DeleteEquipmentByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** The output of our delete `Equipment` mutation. */\nexport type DeleteEquipmentPayload = {\n  __typename?: 'DeleteEquipmentPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Equipment` that was deleted by this mutation. */\n  equipment?: Maybe<Equipment>;\n  deletedEquipmentId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Equipment`. May be used by Relay 1. */\n  equipmentEdge?: Maybe<EquipmentEdge>;\n};\n\n\n/** The output of our delete `Equipment` mutation. */\nexport type DeleteEquipmentPayloadEquipmentEdgeArgs = {\n  orderBy?: Maybe<Array<EquipmentOrderBy>>;\n};\n\n/** All input for the `deleteFeatById` mutation. */\nexport type DeleteFeatByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** The output of our delete `Feat` mutation. */\nexport type DeleteFeatPayload = {\n  __typename?: 'DeleteFeatPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Feat` that was deleted by this mutation. */\n  feat?: Maybe<Feat>;\n  deletedFeatId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Feat`. May be used by Relay 1. */\n  featEdge?: Maybe<FeatsEdge>;\n};\n\n\n/** The output of our delete `Feat` mutation. */\nexport type DeleteFeatPayloadFeatEdgeArgs = {\n  orderBy?: Maybe<Array<FeatsOrderBy>>;\n};\n\n/** All input for the `deleteKnexMigrationById` mutation. */\nexport type DeleteKnexMigrationByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['Int'];\n};\n\n/** All input for the `deleteKnexMigration` mutation. */\nexport type DeleteKnexMigrationInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `KnexMigration` to be deleted. */\n  nodeId: Scalars['ID'];\n};\n\n/** The output of our delete `KnexMigration` mutation. */\nexport type DeleteKnexMigrationPayload = {\n  __typename?: 'DeleteKnexMigrationPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `KnexMigration` that was deleted by this mutation. */\n  knexMigration?: Maybe<KnexMigration>;\n  deletedKnexMigrationId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `KnexMigration`. May be used by Relay 1. */\n  knexMigrationEdge?: Maybe<KnexMigrationsEdge>;\n};\n\n\n/** The output of our delete `KnexMigration` mutation. */\nexport type DeleteKnexMigrationPayloadKnexMigrationEdgeArgs = {\n  orderBy?: Maybe<Array<KnexMigrationsOrderBy>>;\n};\n\n/** All input for the `deleteKnexMigrationsLockByIndex` mutation. */\nexport type DeleteKnexMigrationsLockByIndexInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  index: Scalars['Int'];\n};\n\n/** All input for the `deleteKnexMigrationsLock` mutation. */\nexport type DeleteKnexMigrationsLockInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `KnexMigrationsLock` to be deleted. */\n  nodeId: Scalars['ID'];\n};\n\n/** The output of our delete `KnexMigrationsLock` mutation. */\nexport type DeleteKnexMigrationsLockPayload = {\n  __typename?: 'DeleteKnexMigrationsLockPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `KnexMigrationsLock` that was deleted by this mutation. */\n  knexMigrationsLock?: Maybe<KnexMigrationsLock>;\n  deletedKnexMigrationsLockId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `KnexMigrationsLock`. May be used by Relay 1. */\n  knexMigrationsLockEdge?: Maybe<KnexMigrationsLocksEdge>;\n};\n\n\n/** The output of our delete `KnexMigrationsLock` mutation. */\nexport type DeleteKnexMigrationsLockPayloadKnexMigrationsLockEdgeArgs = {\n  orderBy?: Maybe<Array<KnexMigrationsLocksOrderBy>>;\n};\n\n/** All input for the `deleteLanguageById` mutation. */\nexport type DeleteLanguageByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** The output of our delete `Language` mutation. */\nexport type DeleteLanguagePayload = {\n  __typename?: 'DeleteLanguagePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Language` that was deleted by this mutation. */\n  language?: Maybe<Language>;\n  deletedLanguageId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Language`. May be used by Relay 1. */\n  languageEdge?: Maybe<LanguagesEdge>;\n};\n\n\n/** The output of our delete `Language` mutation. */\nexport type DeleteLanguagePayloadLanguageEdgeArgs = {\n  orderBy?: Maybe<Array<LanguagesOrderBy>>;\n};\n\n/** All input for the `deleteMinionById` mutation. */\nexport type DeleteMinionByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `deleteMinionByUserName` mutation. */\nexport type DeleteMinionByUserNameInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  userName: Scalars['String'];\n};\n\n/** All input for the `deleteMinion` mutation. */\nexport type DeleteMinionInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `Minion` to be deleted. */\n  nodeId: Scalars['ID'];\n};\n\n/** The output of our delete `Minion` mutation. */\nexport type DeleteMinionPayload = {\n  __typename?: 'DeleteMinionPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Minion` that was deleted by this mutation. */\n  minion?: Maybe<Minion>;\n  deletedMinionId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Minion`. May be used by Relay 1. */\n  minionEdge?: Maybe<MinionsEdge>;\n};\n\n\n/** The output of our delete `Minion` mutation. */\nexport type DeleteMinionPayloadMinionEdgeArgs = {\n  orderBy?: Maybe<Array<MinionsOrderBy>>;\n};\n\n/** All input for the `deleteRaceById` mutation. */\nexport type DeleteRaceByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `deleteRaceFeatureById` mutation. */\nexport type DeleteRaceFeatureByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** The output of our delete `RaceFeature` mutation. */\nexport type DeleteRaceFeaturePayload = {\n  __typename?: 'DeleteRaceFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `RaceFeature` that was deleted by this mutation. */\n  raceFeature?: Maybe<RaceFeature>;\n  deletedRaceFeatureId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Race` that is related to this `RaceFeature`. */\n  raceByRaceId?: Maybe<Race>;\n  /** Reads a single `RacialFeature` that is related to this `RaceFeature`. */\n  racialFeatureByRacialFeatureId?: Maybe<RacialFeature>;\n  /** An edge for our `RaceFeature`. May be used by Relay 1. */\n  raceFeatureEdge?: Maybe<RaceFeaturesEdge>;\n};\n\n\n/** The output of our delete `RaceFeature` mutation. */\nexport type DeleteRaceFeaturePayloadRaceFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<RaceFeaturesOrderBy>>;\n};\n\n/** The output of our delete `Race` mutation. */\nexport type DeleteRacePayload = {\n  __typename?: 'DeleteRacePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Race` that was deleted by this mutation. */\n  race?: Maybe<Race>;\n  deletedRaceId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Race`. May be used by Relay 1. */\n  raceEdge?: Maybe<RacesEdge>;\n};\n\n\n/** The output of our delete `Race` mutation. */\nexport type DeleteRacePayloadRaceEdgeArgs = {\n  orderBy?: Maybe<Array<RacesOrderBy>>;\n};\n\n/** All input for the `deleteRacialFeatureById` mutation. */\nexport type DeleteRacialFeatureByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** The output of our delete `RacialFeature` mutation. */\nexport type DeleteRacialFeaturePayload = {\n  __typename?: 'DeleteRacialFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `RacialFeature` that was deleted by this mutation. */\n  racialFeature?: Maybe<RacialFeature>;\n  deletedRacialFeatureId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `RacialFeature`. May be used by Relay 1. */\n  racialFeatureEdge?: Maybe<RacialFeaturesEdge>;\n};\n\n\n/** The output of our delete `RacialFeature` mutation. */\nexport type DeleteRacialFeaturePayloadRacialFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<RacialFeaturesOrderBy>>;\n};\n\n/** All input for the `deleteSkillById` mutation. */\nexport type DeleteSkillByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** The output of our delete `Skill` mutation. */\nexport type DeleteSkillPayload = {\n  __typename?: 'DeleteSkillPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Skill` that was deleted by this mutation. */\n  skill?: Maybe<Skill>;\n  deletedSkillId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Attribute` that is related to this `Skill`. */\n  attributeByAttrId?: Maybe<Attribute>;\n  /** An edge for our `Skill`. May be used by Relay 1. */\n  skillEdge?: Maybe<SkillsEdge>;\n};\n\n\n/** The output of our delete `Skill` mutation. */\nexport type DeleteSkillPayloadSkillEdgeArgs = {\n  orderBy?: Maybe<Array<SkillsOrderBy>>;\n};\n\n/** All input for the `deleteSpellById` mutation. */\nexport type DeleteSpellByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** The output of our delete `Spell` mutation. */\nexport type DeleteSpellPayload = {\n  __typename?: 'DeleteSpellPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Spell` that was deleted by this mutation. */\n  spell?: Maybe<Spell>;\n  deletedSpellId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Spell`. May be used by Relay 1. */\n  spellEdge?: Maybe<SpellsEdge>;\n};\n\n\n/** The output of our delete `Spell` mutation. */\nexport type DeleteSpellPayloadSpellEdgeArgs = {\n  orderBy?: Maybe<Array<SpellsOrderBy>>;\n};\n\n/** All input for the `deleteSpellSlugById` mutation. */\nexport type DeleteSpellSlugByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** The output of our delete `SpellSlug` mutation. */\nexport type DeleteSpellSlugPayload = {\n  __typename?: 'DeleteSpellSlugPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `SpellSlug` that was deleted by this mutation. */\n  spellSlug?: Maybe<SpellSlug>;\n  deletedSpellSlugId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `SpellSlug`. May be used by Relay 1. */\n  spellSlugEdge?: Maybe<SpellSlugsEdge>;\n};\n\n\n/** The output of our delete `SpellSlug` mutation. */\nexport type DeleteSpellSlugPayloadSpellSlugEdgeArgs = {\n  orderBy?: Maybe<Array<SpellSlugsOrderBy>>;\n};\n\n/** All input for the `deleteSubclassById` mutation. */\nexport type DeleteSubclassByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `deleteSubclassFeatureById` mutation. */\nexport type DeleteSubclassFeatureByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `deleteSubclassFeature` mutation. */\nexport type DeleteSubclassFeatureInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `SubclassFeature` to be deleted. */\n  nodeId: Scalars['ID'];\n};\n\n/** The output of our delete `SubclassFeature` mutation. */\nexport type DeleteSubclassFeaturePayload = {\n  __typename?: 'DeleteSubclassFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `SubclassFeature` that was deleted by this mutation. */\n  subclassFeature?: Maybe<SubclassFeature>;\n  deletedSubclassFeatureId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Class` that is related to this `SubclassFeature`. */\n  classByClassId?: Maybe<Class>;\n  /** An edge for our `SubclassFeature`. May be used by Relay 1. */\n  subclassFeatureEdge?: Maybe<SubclassFeaturesEdge>;\n};\n\n\n/** The output of our delete `SubclassFeature` mutation. */\nexport type DeleteSubclassFeaturePayloadSubclassFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<SubclassFeaturesOrderBy>>;\n};\n\n/** All input for the `deleteSubclass` mutation. */\nexport type DeleteSubclassInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `Subclass` to be deleted. */\n  nodeId: Scalars['ID'];\n};\n\n/** The output of our delete `Subclass` mutation. */\nexport type DeleteSubclassPayload = {\n  __typename?: 'DeleteSubclassPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Subclass` that was deleted by this mutation. */\n  subclass?: Maybe<Subclass>;\n  deletedSubclassId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Class` that is related to this `Subclass`. */\n  classByClassId?: Maybe<Class>;\n  /** An edge for our `Subclass`. May be used by Relay 1. */\n  subclassEdge?: Maybe<SubclassesEdge>;\n};\n\n\n/** The output of our delete `Subclass` mutation. */\nexport type DeleteSubclassPayloadSubclassEdgeArgs = {\n  orderBy?: Maybe<Array<SubclassesOrderBy>>;\n};\n\n/** All input for the `deleteSubraceById` mutation. */\nexport type DeleteSubraceByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `deleteSubraceFeatureById` mutation. */\nexport type DeleteSubraceFeatureByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** The output of our delete `SubraceFeature` mutation. */\nexport type DeleteSubraceFeaturePayload = {\n  __typename?: 'DeleteSubraceFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `SubraceFeature` that was deleted by this mutation. */\n  subraceFeature?: Maybe<SubraceFeature>;\n  deletedSubraceFeatureId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Subrace` that is related to this `SubraceFeature`. */\n  subraceBySubraceId?: Maybe<Subrace>;\n  /** Reads a single `RacialFeature` that is related to this `SubraceFeature`. */\n  racialFeatureByRacialFeatureId?: Maybe<RacialFeature>;\n  /** An edge for our `SubraceFeature`. May be used by Relay 1. */\n  subraceFeatureEdge?: Maybe<SubraceFeaturesEdge>;\n};\n\n\n/** The output of our delete `SubraceFeature` mutation. */\nexport type DeleteSubraceFeaturePayloadSubraceFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<SubraceFeaturesOrderBy>>;\n};\n\n/** The output of our delete `Subrace` mutation. */\nexport type DeleteSubracePayload = {\n  __typename?: 'DeleteSubracePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Subrace` that was deleted by this mutation. */\n  subrace?: Maybe<Subrace>;\n  deletedSubraceId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Race` that is related to this `Subrace`. */\n  raceByRaceId?: Maybe<Race>;\n  /** An edge for our `Subrace`. May be used by Relay 1. */\n  subraceEdge?: Maybe<SubracesEdge>;\n};\n\n\n/** The output of our delete `Subrace` mutation. */\nexport type DeleteSubracePayloadSubraceEdgeArgs = {\n  orderBy?: Maybe<Array<SubracesOrderBy>>;\n};\n\n/** All input for the `deleteWizardById` mutation. */\nexport type DeleteWizardByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `deleteWizardByUserId` mutation. */\nexport type DeleteWizardByUserIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  userId: Scalars['UUID'];\n};\n\n/** All input for the `deleteWizard` mutation. */\nexport type DeleteWizardInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `Wizard` to be deleted. */\n  nodeId: Scalars['ID'];\n};\n\n/** The output of our delete `Wizard` mutation. */\nexport type DeleteWizardPayload = {\n  __typename?: 'DeleteWizardPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Wizard` that was deleted by this mutation. */\n  wizard?: Maybe<Wizard>;\n  deletedWizardId?: Maybe<Scalars['ID']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Minion` that is related to this `Wizard`. */\n  minionByUserId?: Maybe<Minion>;\n  /** An edge for our `Wizard`. May be used by Relay 1. */\n  wizardEdge?: Maybe<WizardsEdge>;\n};\n\n\n/** The output of our delete `Wizard` mutation. */\nexport type DeleteWizardPayloadWizardEdgeArgs = {\n  orderBy?: Maybe<Array<WizardsOrderBy>>;\n};\n\nexport type Disease = Node & {\n  __typename?: 'Disease';\n  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */\n  nodeId: Scalars['ID'];\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  page?: Maybe<Scalars['Int']>;\n  entries?: Maybe<Scalars['JSON']>;\n};\n\n/** A condition to be used against `Disease` object types. All fields are tested for equality and combined with a logical ‘and.’ */\nexport type DiseaseCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `source` field. */\n  source?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `page` field. */\n  page?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `entries` field. */\n  entries?: Maybe<Scalars['JSON']>;\n};\n\n/** An input for mutations affecting `Disease` */\nexport type DiseaseInput = {\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  page?: Maybe<Scalars['Int']>;\n  entries?: Maybe<Scalars['JSON']>;\n};\n\n/** Represents an update to a `Disease`. Fields that are set will be updated. */\nexport type DiseasePatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  source?: Maybe<Scalars['String']>;\n  page?: Maybe<Scalars['Int']>;\n  entries?: Maybe<Scalars['JSON']>;\n};\n\n/** A connection to a list of `Disease` values. */\nexport type DiseasesConnection = {\n  __typename?: 'DiseasesConnection';\n  /** A list of `Disease` objects. */\n  nodes: Array<Maybe<Disease>>;\n  /** A list of edges which contains the `Disease` and cursor to aid in pagination. */\n  edges: Array<DiseasesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Disease` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Disease` edge in the connection. */\nexport type DiseasesEdge = {\n  __typename?: 'DiseasesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Disease` at the end of the edge. */\n  node?: Maybe<Disease>;\n};\n\n/** Methods to use when ordering `Disease`. */\nexport enum DiseasesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  SourceAsc = 'SOURCE_ASC',\n  SourceDesc = 'SOURCE_DESC',\n  PageAsc = 'PAGE_ASC',\n  PageDesc = 'PAGE_DESC',\n  EntriesAsc = 'ENTRIES_ASC',\n  EntriesDesc = 'ENTRIES_DESC',\n  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',\n  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'\n}\n\nexport type Equipment = {\n  __typename?: 'Equipment';\n  id?: Maybe<Scalars['UUID']>;\n  type: Scalars['String'];\n  name: Scalars['String'];\n};\n\n/**\n * A condition to be used against `Equipment` object types. All fields are tested\n * for equality and combined with a logical ‘and.’\n */\nexport type EquipmentCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `type` field. */\n  type?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n};\n\n/** A connection to a list of `Equipment` values. */\nexport type EquipmentConnection = {\n  __typename?: 'EquipmentConnection';\n  /** A list of `Equipment` objects. */\n  nodes: Array<Maybe<Equipment>>;\n  /** A list of edges which contains the `Equipment` and cursor to aid in pagination. */\n  edges: Array<EquipmentEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Equipment` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Equipment` edge in the connection. */\nexport type EquipmentEdge = {\n  __typename?: 'EquipmentEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Equipment` at the end of the edge. */\n  node?: Maybe<Equipment>;\n};\n\n/** An input for mutations affecting `Equipment` */\nexport type EquipmentInput = {\n  id?: Maybe<Scalars['UUID']>;\n  type: Scalars['String'];\n  name: Scalars['String'];\n};\n\n/** Methods to use when ordering `Equipment`. */\nexport enum EquipmentOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  TypeAsc = 'TYPE_ASC',\n  TypeDesc = 'TYPE_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC'\n}\n\n/** Represents an update to a `Equipment`. Fields that are set will be updated. */\nexport type EquipmentPatch = {\n  id?: Maybe<Scalars['UUID']>;\n  type?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type Feat = {\n  __typename?: 'Feat';\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  points?: Maybe<Array<Maybe<Scalars['String']>>>;\n  prereq?: Maybe<Scalars['String']>;\n  scores?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\n/** A condition to be used against `Feat` object types. All fields are tested for equality and combined with a logical ‘and.’ */\nexport type FeatCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `desc` field. */\n  desc?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `points` field. */\n  points?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** Checks for equality with the object’s `prereq` field. */\n  prereq?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `scores` field. */\n  scores?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\n/** An input for mutations affecting `Feat` */\nexport type FeatInput = {\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  points?: Maybe<Array<Maybe<Scalars['String']>>>;\n  prereq?: Maybe<Scalars['String']>;\n  scores?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\n/** Represents an update to a `Feat`. Fields that are set will be updated. */\nexport type FeatPatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  desc?: Maybe<Scalars['String']>;\n  points?: Maybe<Array<Maybe<Scalars['String']>>>;\n  prereq?: Maybe<Scalars['String']>;\n  scores?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\n/** A connection to a list of `Feat` values. */\nexport type FeatsConnection = {\n  __typename?: 'FeatsConnection';\n  /** A list of `Feat` objects. */\n  nodes: Array<Maybe<Feat>>;\n  /** A list of edges which contains the `Feat` and cursor to aid in pagination. */\n  edges: Array<FeatsEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Feat` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Feat` edge in the connection. */\nexport type FeatsEdge = {\n  __typename?: 'FeatsEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Feat` at the end of the edge. */\n  node?: Maybe<Feat>;\n};\n\n/** Methods to use when ordering `Feat`. */\nexport enum FeatsOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  DescAsc = 'DESC_ASC',\n  DescDesc = 'DESC_DESC',\n  PointsAsc = 'POINTS_ASC',\n  PointsDesc = 'POINTS_DESC',\n  PrereqAsc = 'PREREQ_ASC',\n  PrereqDesc = 'PREREQ_DESC',\n  ScoresAsc = 'SCORES_ASC',\n  ScoresDesc = 'SCORES_DESC'\n}\n\n\n\nexport type KnexMigration = Node & {\n  __typename?: 'KnexMigration';\n  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */\n  nodeId: Scalars['ID'];\n  id: Scalars['Int'];\n  name?: Maybe<Scalars['String']>;\n  batch?: Maybe<Scalars['Int']>;\n  migrationTime?: Maybe<Scalars['Datetime']>;\n};\n\n/**\n * A condition to be used against `KnexMigration` object types. All fields are\n * tested for equality and combined with a logical ‘and.’\n */\nexport type KnexMigrationCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `batch` field. */\n  batch?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `migrationTime` field. */\n  migrationTime?: Maybe<Scalars['Datetime']>;\n};\n\n/** An input for mutations affecting `KnexMigration` */\nexport type KnexMigrationInput = {\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  batch?: Maybe<Scalars['Int']>;\n  migrationTime?: Maybe<Scalars['Datetime']>;\n};\n\n/** Represents an update to a `KnexMigration`. Fields that are set will be updated. */\nexport type KnexMigrationPatch = {\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  batch?: Maybe<Scalars['Int']>;\n  migrationTime?: Maybe<Scalars['Datetime']>;\n};\n\n/** A connection to a list of `KnexMigration` values. */\nexport type KnexMigrationsConnection = {\n  __typename?: 'KnexMigrationsConnection';\n  /** A list of `KnexMigration` objects. */\n  nodes: Array<Maybe<KnexMigration>>;\n  /** A list of edges which contains the `KnexMigration` and cursor to aid in pagination. */\n  edges: Array<KnexMigrationsEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `KnexMigration` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `KnexMigration` edge in the connection. */\nexport type KnexMigrationsEdge = {\n  __typename?: 'KnexMigrationsEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `KnexMigration` at the end of the edge. */\n  node?: Maybe<KnexMigration>;\n};\n\nexport type KnexMigrationsLock = Node & {\n  __typename?: 'KnexMigrationsLock';\n  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */\n  nodeId: Scalars['ID'];\n  index: Scalars['Int'];\n  isLocked?: Maybe<Scalars['Int']>;\n};\n\n/**\n * A condition to be used against `KnexMigrationsLock` object types. All fields are\n * tested for equality and combined with a logical ‘and.’\n */\nexport type KnexMigrationsLockCondition = {\n  /** Checks for equality with the object’s `index` field. */\n  index?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `isLocked` field. */\n  isLocked?: Maybe<Scalars['Int']>;\n};\n\n/** An input for mutations affecting `KnexMigrationsLock` */\nexport type KnexMigrationsLockInput = {\n  index?: Maybe<Scalars['Int']>;\n  isLocked?: Maybe<Scalars['Int']>;\n};\n\n/** Represents an update to a `KnexMigrationsLock`. Fields that are set will be updated. */\nexport type KnexMigrationsLockPatch = {\n  index?: Maybe<Scalars['Int']>;\n  isLocked?: Maybe<Scalars['Int']>;\n};\n\n/** A connection to a list of `KnexMigrationsLock` values. */\nexport type KnexMigrationsLocksConnection = {\n  __typename?: 'KnexMigrationsLocksConnection';\n  /** A list of `KnexMigrationsLock` objects. */\n  nodes: Array<Maybe<KnexMigrationsLock>>;\n  /** A list of edges which contains the `KnexMigrationsLock` and cursor to aid in pagination. */\n  edges: Array<KnexMigrationsLocksEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `KnexMigrationsLock` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `KnexMigrationsLock` edge in the connection. */\nexport type KnexMigrationsLocksEdge = {\n  __typename?: 'KnexMigrationsLocksEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `KnexMigrationsLock` at the end of the edge. */\n  node?: Maybe<KnexMigrationsLock>;\n};\n\n/** Methods to use when ordering `KnexMigrationsLock`. */\nexport enum KnexMigrationsLocksOrderBy {\n  Natural = 'NATURAL',\n  IndexAsc = 'INDEX_ASC',\n  IndexDesc = 'INDEX_DESC',\n  IsLockedAsc = 'IS_LOCKED_ASC',\n  IsLockedDesc = 'IS_LOCKED_DESC',\n  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',\n  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'\n}\n\n/** Methods to use when ordering `KnexMigration`. */\nexport enum KnexMigrationsOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  BatchAsc = 'BATCH_ASC',\n  BatchDesc = 'BATCH_DESC',\n  MigrationTimeAsc = 'MIGRATION_TIME_ASC',\n  MigrationTimeDesc = 'MIGRATION_TIME_DESC',\n  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',\n  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'\n}\n\nexport type Language = {\n  __typename?: 'Language';\n  id?: Maybe<Scalars['UUID']>;\n  name: Scalars['String'];\n  script: Scalars['String'];\n  typicalSpeakers: Scalars['String'];\n  type: Scalars['String'];\n};\n\n/**\n * A condition to be used against `Language` object types. All fields are tested\n * for equality and combined with a logical ‘and.’\n */\nexport type LanguageCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `script` field. */\n  script?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `typicalSpeakers` field. */\n  typicalSpeakers?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `type` field. */\n  type?: Maybe<Scalars['String']>;\n};\n\n/** An input for mutations affecting `Language` */\nexport type LanguageInput = {\n  id?: Maybe<Scalars['UUID']>;\n  name: Scalars['String'];\n  script: Scalars['String'];\n  typicalSpeakers: Scalars['String'];\n  type: Scalars['String'];\n};\n\n/** Represents an update to a `Language`. Fields that are set will be updated. */\nexport type LanguagePatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  script?: Maybe<Scalars['String']>;\n  typicalSpeakers?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n};\n\n/** A connection to a list of `Language` values. */\nexport type LanguagesConnection = {\n  __typename?: 'LanguagesConnection';\n  /** A list of `Language` objects. */\n  nodes: Array<Maybe<Language>>;\n  /** A list of edges which contains the `Language` and cursor to aid in pagination. */\n  edges: Array<LanguagesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Language` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Language` edge in the connection. */\nexport type LanguagesEdge = {\n  __typename?: 'LanguagesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Language` at the end of the edge. */\n  node?: Maybe<Language>;\n};\n\n/** Methods to use when ordering `Language`. */\nexport enum LanguagesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  ScriptAsc = 'SCRIPT_ASC',\n  ScriptDesc = 'SCRIPT_DESC',\n  TypicalSpeakersAsc = 'TYPICAL_SPEAKERS_ASC',\n  TypicalSpeakersDesc = 'TYPICAL_SPEAKERS_DESC',\n  TypeAsc = 'TYPE_ASC',\n  TypeDesc = 'TYPE_DESC'\n}\n\nexport type Minion = Node & {\n  __typename?: 'Minion';\n  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */\n  nodeId: Scalars['ID'];\n  id: Scalars['UUID'];\n  password?: Maybe<Scalars['String']>;\n  userName: Scalars['String'];\n  role?: Maybe<UserRole>;\n  /** Reads a single `Wizard` that is related to this `Minion`. */\n  wizardByUserId?: Maybe<Wizard>;\n  /**\n   * Reads and enables pagination through a set of `Wizard`.\n   * @deprecated Please use wizardByUserId instead\n   */\n  wizardsByUserId: WizardsConnection;\n};\n\n\nexport type MinionWizardsByUserIdArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<WizardsOrderBy>>;\n  condition?: Maybe<WizardCondition>;\n};\n\n/** A condition to be used against `Minion` object types. All fields are tested for equality and combined with a logical ‘and.’ */\nexport type MinionCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `password` field. */\n  password?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `userName` field. */\n  userName?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `role` field. */\n  role?: Maybe<UserRole>;\n};\n\n/** An input for mutations affecting `Minion` */\nexport type MinionInput = {\n  id?: Maybe<Scalars['UUID']>;\n  password?: Maybe<Scalars['String']>;\n  userName: Scalars['String'];\n  role?: Maybe<UserRole>;\n};\n\n/** Represents an update to a `Minion`. Fields that are set will be updated. */\nexport type MinionPatch = {\n  id?: Maybe<Scalars['UUID']>;\n  password?: Maybe<Scalars['String']>;\n  userName?: Maybe<Scalars['String']>;\n  role?: Maybe<UserRole>;\n};\n\n/** A connection to a list of `Minion` values. */\nexport type MinionsConnection = {\n  __typename?: 'MinionsConnection';\n  /** A list of `Minion` objects. */\n  nodes: Array<Maybe<Minion>>;\n  /** A list of edges which contains the `Minion` and cursor to aid in pagination. */\n  edges: Array<MinionsEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Minion` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Minion` edge in the connection. */\nexport type MinionsEdge = {\n  __typename?: 'MinionsEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Minion` at the end of the edge. */\n  node?: Maybe<Minion>;\n};\n\n/** Methods to use when ordering `Minion`. */\nexport enum MinionsOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  PasswordAsc = 'PASSWORD_ASC',\n  PasswordDesc = 'PASSWORD_DESC',\n  UserNameAsc = 'USER_NAME_ASC',\n  UserNameDesc = 'USER_NAME_DESC',\n  RoleAsc = 'ROLE_ASC',\n  RoleDesc = 'ROLE_DESC',\n  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',\n  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'\n}\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type Mutation = {\n  __typename?: 'Mutation';\n  /** Creates a single `Attribute`. */\n  createAttribute?: Maybe<CreateAttributePayload>;\n  /** Creates a single `BgFeature`. */\n  createBgFeature?: Maybe<CreateBgFeaturePayload>;\n  /** Creates a single `Bg`. */\n  createBg?: Maybe<CreateBgPayload>;\n  /** Creates a single `ClassFeature`. */\n  createClassFeature?: Maybe<CreateClassFeaturePayload>;\n  /** Creates a single `Class`. */\n  createClass?: Maybe<CreateClassPayload>;\n  /** Creates a single `Condition`. */\n  createCondition?: Maybe<CreateConditionPayload>;\n  /** Creates a single `Disease`. */\n  createDisease?: Maybe<CreateDiseasePayload>;\n  /** Creates a single `Equipment`. */\n  createEquipment?: Maybe<CreateEquipmentPayload>;\n  /** Creates a single `Feat`. */\n  createFeat?: Maybe<CreateFeatPayload>;\n  /** Creates a single `KnexMigration`. */\n  createKnexMigration?: Maybe<CreateKnexMigrationPayload>;\n  /** Creates a single `KnexMigrationsLock`. */\n  createKnexMigrationsLock?: Maybe<CreateKnexMigrationsLockPayload>;\n  /** Creates a single `Language`. */\n  createLanguage?: Maybe<CreateLanguagePayload>;\n  /** Creates a single `Minion`. */\n  createMinion?: Maybe<CreateMinionPayload>;\n  /** Creates a single `RaceFeature`. */\n  createRaceFeature?: Maybe<CreateRaceFeaturePayload>;\n  /** Creates a single `Race`. */\n  createRace?: Maybe<CreateRacePayload>;\n  /** Creates a single `RacialFeature`. */\n  createRacialFeature?: Maybe<CreateRacialFeaturePayload>;\n  /** Creates a single `Skill`. */\n  createSkill?: Maybe<CreateSkillPayload>;\n  /** Creates a single `SpellSlug`. */\n  createSpellSlug?: Maybe<CreateSpellSlugPayload>;\n  /** Creates a single `Spell`. */\n  createSpell?: Maybe<CreateSpellPayload>;\n  /** Creates a single `SubclassFeature`. */\n  createSubclassFeature?: Maybe<CreateSubclassFeaturePayload>;\n  /** Creates a single `Subclass`. */\n  createSubclass?: Maybe<CreateSubclassPayload>;\n  /** Creates a single `SubraceFeature`. */\n  createSubraceFeature?: Maybe<CreateSubraceFeaturePayload>;\n  /** Creates a single `Subrace`. */\n  createSubrace?: Maybe<CreateSubracePayload>;\n  /** Creates a single `Wizard`. */\n  createWizard?: Maybe<CreateWizardPayload>;\n  /** Updates a single `Attribute` using a unique key and a patch. */\n  updateAttributeById?: Maybe<UpdateAttributePayload>;\n  /** Updates a single `BgFeature` using a unique key and a patch. */\n  updateBgFeatureById?: Maybe<UpdateBgFeaturePayload>;\n  /** Updates a single `Bg` using a unique key and a patch. */\n  updateBgById?: Maybe<UpdateBgPayload>;\n  /** Updates a single `ClassFeature` using its globally unique id and a patch. */\n  updateClassFeature?: Maybe<UpdateClassFeaturePayload>;\n  /** Updates a single `ClassFeature` using a unique key and a patch. */\n  updateClassFeatureById?: Maybe<UpdateClassFeaturePayload>;\n  /** Updates a single `Class` using its globally unique id and a patch. */\n  updateClass?: Maybe<UpdateClassPayload>;\n  /** Updates a single `Class` using a unique key and a patch. */\n  updateClassById?: Maybe<UpdateClassPayload>;\n  /** Updates a single `Condition` using its globally unique id and a patch. */\n  updateCondition?: Maybe<UpdateConditionPayload>;\n  /** Updates a single `Condition` using a unique key and a patch. */\n  updateConditionById?: Maybe<UpdateConditionPayload>;\n  /** Updates a single `Disease` using its globally unique id and a patch. */\n  updateDisease?: Maybe<UpdateDiseasePayload>;\n  /** Updates a single `Disease` using a unique key and a patch. */\n  updateDiseaseById?: Maybe<UpdateDiseasePayload>;\n  /** Updates a single `Equipment` using a unique key and a patch. */\n  updateEquipmentById?: Maybe<UpdateEquipmentPayload>;\n  /** Updates a single `Feat` using a unique key and a patch. */\n  updateFeatById?: Maybe<UpdateFeatPayload>;\n  /** Updates a single `KnexMigration` using its globally unique id and a patch. */\n  updateKnexMigration?: Maybe<UpdateKnexMigrationPayload>;\n  /** Updates a single `KnexMigration` using a unique key and a patch. */\n  updateKnexMigrationById?: Maybe<UpdateKnexMigrationPayload>;\n  /** Updates a single `KnexMigrationsLock` using its globally unique id and a patch. */\n  updateKnexMigrationsLock?: Maybe<UpdateKnexMigrationsLockPayload>;\n  /** Updates a single `KnexMigrationsLock` using a unique key and a patch. */\n  updateKnexMigrationsLockByIndex?: Maybe<UpdateKnexMigrationsLockPayload>;\n  /** Updates a single `Language` using a unique key and a patch. */\n  updateLanguageById?: Maybe<UpdateLanguagePayload>;\n  /** Updates a single `Minion` using its globally unique id and a patch. */\n  updateMinion?: Maybe<UpdateMinionPayload>;\n  /** Updates a single `Minion` using a unique key and a patch. */\n  updateMinionById?: Maybe<UpdateMinionPayload>;\n  /** Updates a single `Minion` using a unique key and a patch. */\n  updateMinionByUserName?: Maybe<UpdateMinionPayload>;\n  /** Updates a single `RaceFeature` using a unique key and a patch. */\n  updateRaceFeatureById?: Maybe<UpdateRaceFeaturePayload>;\n  /** Updates a single `Race` using a unique key and a patch. */\n  updateRaceById?: Maybe<UpdateRacePayload>;\n  /** Updates a single `RacialFeature` using a unique key and a patch. */\n  updateRacialFeatureById?: Maybe<UpdateRacialFeaturePayload>;\n  /** Updates a single `Skill` using a unique key and a patch. */\n  updateSkillById?: Maybe<UpdateSkillPayload>;\n  /** Updates a single `SpellSlug` using a unique key and a patch. */\n  updateSpellSlugById?: Maybe<UpdateSpellSlugPayload>;\n  /** Updates a single `Spell` using a unique key and a patch. */\n  updateSpellById?: Maybe<UpdateSpellPayload>;\n  /** Updates a single `SubclassFeature` using its globally unique id and a patch. */\n  updateSubclassFeature?: Maybe<UpdateSubclassFeaturePayload>;\n  /** Updates a single `SubclassFeature` using a unique key and a patch. */\n  updateSubclassFeatureById?: Maybe<UpdateSubclassFeaturePayload>;\n  /** Updates a single `Subclass` using its globally unique id and a patch. */\n  updateSubclass?: Maybe<UpdateSubclassPayload>;\n  /** Updates a single `Subclass` using a unique key and a patch. */\n  updateSubclassById?: Maybe<UpdateSubclassPayload>;\n  /** Updates a single `SubraceFeature` using a unique key and a patch. */\n  updateSubraceFeatureById?: Maybe<UpdateSubraceFeaturePayload>;\n  /** Updates a single `Subrace` using a unique key and a patch. */\n  updateSubraceById?: Maybe<UpdateSubracePayload>;\n  /** Updates a single `Wizard` using its globally unique id and a patch. */\n  updateWizard?: Maybe<UpdateWizardPayload>;\n  /** Updates a single `Wizard` using a unique key and a patch. */\n  updateWizardById?: Maybe<UpdateWizardPayload>;\n  /** Updates a single `Wizard` using a unique key and a patch. */\n  updateWizardByUserId?: Maybe<UpdateWizardPayload>;\n  /** Deletes a single `Attribute` using a unique key. */\n  deleteAttributeById?: Maybe<DeleteAttributePayload>;\n  /** Deletes a single `BgFeature` using a unique key. */\n  deleteBgFeatureById?: Maybe<DeleteBgFeaturePayload>;\n  /** Deletes a single `Bg` using a unique key. */\n  deleteBgById?: Maybe<DeleteBgPayload>;\n  /** Deletes a single `ClassFeature` using its globally unique id. */\n  deleteClassFeature?: Maybe<DeleteClassFeaturePayload>;\n  /** Deletes a single `ClassFeature` using a unique key. */\n  deleteClassFeatureById?: Maybe<DeleteClassFeaturePayload>;\n  /** Deletes a single `Class` using its globally unique id. */\n  deleteClass?: Maybe<DeleteClassPayload>;\n  /** Deletes a single `Class` using a unique key. */\n  deleteClassById?: Maybe<DeleteClassPayload>;\n  /** Deletes a single `Condition` using its globally unique id. */\n  deleteCondition?: Maybe<DeleteConditionPayload>;\n  /** Deletes a single `Condition` using a unique key. */\n  deleteConditionById?: Maybe<DeleteConditionPayload>;\n  /** Deletes a single `Disease` using its globally unique id. */\n  deleteDisease?: Maybe<DeleteDiseasePayload>;\n  /** Deletes a single `Disease` using a unique key. */\n  deleteDiseaseById?: Maybe<DeleteDiseasePayload>;\n  /** Deletes a single `Equipment` using a unique key. */\n  deleteEquipmentById?: Maybe<DeleteEquipmentPayload>;\n  /** Deletes a single `Feat` using a unique key. */\n  deleteFeatById?: Maybe<DeleteFeatPayload>;\n  /** Deletes a single `KnexMigration` using its globally unique id. */\n  deleteKnexMigration?: Maybe<DeleteKnexMigrationPayload>;\n  /** Deletes a single `KnexMigration` using a unique key. */\n  deleteKnexMigrationById?: Maybe<DeleteKnexMigrationPayload>;\n  /** Deletes a single `KnexMigrationsLock` using its globally unique id. */\n  deleteKnexMigrationsLock?: Maybe<DeleteKnexMigrationsLockPayload>;\n  /** Deletes a single `KnexMigrationsLock` using a unique key. */\n  deleteKnexMigrationsLockByIndex?: Maybe<DeleteKnexMigrationsLockPayload>;\n  /** Deletes a single `Language` using a unique key. */\n  deleteLanguageById?: Maybe<DeleteLanguagePayload>;\n  /** Deletes a single `Minion` using its globally unique id. */\n  deleteMinion?: Maybe<DeleteMinionPayload>;\n  /** Deletes a single `Minion` using a unique key. */\n  deleteMinionById?: Maybe<DeleteMinionPayload>;\n  /** Deletes a single `Minion` using a unique key. */\n  deleteMinionByUserName?: Maybe<DeleteMinionPayload>;\n  /** Deletes a single `RaceFeature` using a unique key. */\n  deleteRaceFeatureById?: Maybe<DeleteRaceFeaturePayload>;\n  /** Deletes a single `Race` using a unique key. */\n  deleteRaceById?: Maybe<DeleteRacePayload>;\n  /** Deletes a single `RacialFeature` using a unique key. */\n  deleteRacialFeatureById?: Maybe<DeleteRacialFeaturePayload>;\n  /** Deletes a single `Skill` using a unique key. */\n  deleteSkillById?: Maybe<DeleteSkillPayload>;\n  /** Deletes a single `SpellSlug` using a unique key. */\n  deleteSpellSlugById?: Maybe<DeleteSpellSlugPayload>;\n  /** Deletes a single `Spell` using a unique key. */\n  deleteSpellById?: Maybe<DeleteSpellPayload>;\n  /** Deletes a single `SubclassFeature` using its globally unique id. */\n  deleteSubclassFeature?: Maybe<DeleteSubclassFeaturePayload>;\n  /** Deletes a single `SubclassFeature` using a unique key. */\n  deleteSubclassFeatureById?: Maybe<DeleteSubclassFeaturePayload>;\n  /** Deletes a single `Subclass` using its globally unique id. */\n  deleteSubclass?: Maybe<DeleteSubclassPayload>;\n  /** Deletes a single `Subclass` using a unique key. */\n  deleteSubclassById?: Maybe<DeleteSubclassPayload>;\n  /** Deletes a single `SubraceFeature` using a unique key. */\n  deleteSubraceFeatureById?: Maybe<DeleteSubraceFeaturePayload>;\n  /** Deletes a single `Subrace` using a unique key. */\n  deleteSubraceById?: Maybe<DeleteSubracePayload>;\n  /** Deletes a single `Wizard` using its globally unique id. */\n  deleteWizard?: Maybe<DeleteWizardPayload>;\n  /** Deletes a single `Wizard` using a unique key. */\n  deleteWizardById?: Maybe<DeleteWizardPayload>;\n  /** Deletes a single `Wizard` using a unique key. */\n  deleteWizardByUserId?: Maybe<DeleteWizardPayload>;\n  signin?: Maybe<SigninPayload>;\n  signup?: Maybe<SignupPayload>;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateAttributeArgs = {\n  input: CreateAttributeInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateBgFeatureArgs = {\n  input: CreateBgFeatureInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateBgArgs = {\n  input: CreateBgInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateClassFeatureArgs = {\n  input: CreateClassFeatureInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateClassArgs = {\n  input: CreateClassInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateConditionArgs = {\n  input: CreateConditionInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateDiseaseArgs = {\n  input: CreateDiseaseInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateEquipmentArgs = {\n  input: CreateEquipmentInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateFeatArgs = {\n  input: CreateFeatInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateKnexMigrationArgs = {\n  input: CreateKnexMigrationInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateKnexMigrationsLockArgs = {\n  input: CreateKnexMigrationsLockInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateLanguageArgs = {\n  input: CreateLanguageInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateMinionArgs = {\n  input: CreateMinionInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateRaceFeatureArgs = {\n  input: CreateRaceFeatureInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateRaceArgs = {\n  input: CreateRaceInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateRacialFeatureArgs = {\n  input: CreateRacialFeatureInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateSkillArgs = {\n  input: CreateSkillInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateSpellSlugArgs = {\n  input: CreateSpellSlugInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateSpellArgs = {\n  input: CreateSpellInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateSubclassFeatureArgs = {\n  input: CreateSubclassFeatureInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateSubclassArgs = {\n  input: CreateSubclassInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateSubraceFeatureArgs = {\n  input: CreateSubraceFeatureInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateSubraceArgs = {\n  input: CreateSubraceInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationCreateWizardArgs = {\n  input: CreateWizardInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateAttributeByIdArgs = {\n  input: UpdateAttributeByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateBgFeatureByIdArgs = {\n  input: UpdateBgFeatureByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateBgByIdArgs = {\n  input: UpdateBgByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateClassFeatureArgs = {\n  input: UpdateClassFeatureInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateClassFeatureByIdArgs = {\n  input: UpdateClassFeatureByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateClassArgs = {\n  input: UpdateClassInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateClassByIdArgs = {\n  input: UpdateClassByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateConditionArgs = {\n  input: UpdateConditionInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateConditionByIdArgs = {\n  input: UpdateConditionByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateDiseaseArgs = {\n  input: UpdateDiseaseInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateDiseaseByIdArgs = {\n  input: UpdateDiseaseByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateEquipmentByIdArgs = {\n  input: UpdateEquipmentByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateFeatByIdArgs = {\n  input: UpdateFeatByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateKnexMigrationArgs = {\n  input: UpdateKnexMigrationInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateKnexMigrationByIdArgs = {\n  input: UpdateKnexMigrationByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateKnexMigrationsLockArgs = {\n  input: UpdateKnexMigrationsLockInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateKnexMigrationsLockByIndexArgs = {\n  input: UpdateKnexMigrationsLockByIndexInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateLanguageByIdArgs = {\n  input: UpdateLanguageByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateMinionArgs = {\n  input: UpdateMinionInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateMinionByIdArgs = {\n  input: UpdateMinionByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateMinionByUserNameArgs = {\n  input: UpdateMinionByUserNameInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateRaceFeatureByIdArgs = {\n  input: UpdateRaceFeatureByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateRaceByIdArgs = {\n  input: UpdateRaceByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateRacialFeatureByIdArgs = {\n  input: UpdateRacialFeatureByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateSkillByIdArgs = {\n  input: UpdateSkillByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateSpellSlugByIdArgs = {\n  input: UpdateSpellSlugByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateSpellByIdArgs = {\n  input: UpdateSpellByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateSubclassFeatureArgs = {\n  input: UpdateSubclassFeatureInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateSubclassFeatureByIdArgs = {\n  input: UpdateSubclassFeatureByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateSubclassArgs = {\n  input: UpdateSubclassInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateSubclassByIdArgs = {\n  input: UpdateSubclassByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateSubraceFeatureByIdArgs = {\n  input: UpdateSubraceFeatureByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateSubraceByIdArgs = {\n  input: UpdateSubraceByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateWizardArgs = {\n  input: UpdateWizardInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateWizardByIdArgs = {\n  input: UpdateWizardByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationUpdateWizardByUserIdArgs = {\n  input: UpdateWizardByUserIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteAttributeByIdArgs = {\n  input: DeleteAttributeByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteBgFeatureByIdArgs = {\n  input: DeleteBgFeatureByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteBgByIdArgs = {\n  input: DeleteBgByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteClassFeatureArgs = {\n  input: DeleteClassFeatureInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteClassFeatureByIdArgs = {\n  input: DeleteClassFeatureByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteClassArgs = {\n  input: DeleteClassInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteClassByIdArgs = {\n  input: DeleteClassByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteConditionArgs = {\n  input: DeleteConditionInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteConditionByIdArgs = {\n  input: DeleteConditionByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteDiseaseArgs = {\n  input: DeleteDiseaseInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteDiseaseByIdArgs = {\n  input: DeleteDiseaseByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteEquipmentByIdArgs = {\n  input: DeleteEquipmentByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteFeatByIdArgs = {\n  input: DeleteFeatByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteKnexMigrationArgs = {\n  input: DeleteKnexMigrationInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteKnexMigrationByIdArgs = {\n  input: DeleteKnexMigrationByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteKnexMigrationsLockArgs = {\n  input: DeleteKnexMigrationsLockInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteKnexMigrationsLockByIndexArgs = {\n  input: DeleteKnexMigrationsLockByIndexInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteLanguageByIdArgs = {\n  input: DeleteLanguageByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteMinionArgs = {\n  input: DeleteMinionInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteMinionByIdArgs = {\n  input: DeleteMinionByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteMinionByUserNameArgs = {\n  input: DeleteMinionByUserNameInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteRaceFeatureByIdArgs = {\n  input: DeleteRaceFeatureByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteRaceByIdArgs = {\n  input: DeleteRaceByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteRacialFeatureByIdArgs = {\n  input: DeleteRacialFeatureByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteSkillByIdArgs = {\n  input: DeleteSkillByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteSpellSlugByIdArgs = {\n  input: DeleteSpellSlugByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteSpellByIdArgs = {\n  input: DeleteSpellByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteSubclassFeatureArgs = {\n  input: DeleteSubclassFeatureInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteSubclassFeatureByIdArgs = {\n  input: DeleteSubclassFeatureByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteSubclassArgs = {\n  input: DeleteSubclassInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteSubclassByIdArgs = {\n  input: DeleteSubclassByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteSubraceFeatureByIdArgs = {\n  input: DeleteSubraceFeatureByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteSubraceByIdArgs = {\n  input: DeleteSubraceByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteWizardArgs = {\n  input: DeleteWizardInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteWizardByIdArgs = {\n  input: DeleteWizardByIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationDeleteWizardByUserIdArgs = {\n  input: DeleteWizardByUserIdInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationSigninArgs = {\n  input: SigninInput;\n};\n\n\n/** The root mutation type which contains root level fields which mutate data. */\nexport type MutationSignupArgs = {\n  input: SignupInput;\n};\n\n/** An object with a globally unique `ID`. */\nexport type Node = {\n  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */\n  nodeId: Scalars['ID'];\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['Cursor']>;\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['Cursor']>;\n};\n\n/** The root query type which gives access points into the data universe. */\nexport type Query = Node & {\n  __typename?: 'Query';\n  /**\n   * Exposes the root query type nested one level down. This is helpful for Relay 1\n   * which can only query top level fields if they are in a particular form.\n   */\n  query: Query;\n  /** The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. */\n  nodeId: Scalars['ID'];\n  /** Fetches an object given its globally unique `ID`. */\n  node?: Maybe<Node>;\n  /** Reads and enables pagination through a set of `Attribute`. */\n  allAttributes?: Maybe<AttributesConnection>;\n  /** Reads and enables pagination through a set of `BgFeature`. */\n  allBgFeatures?: Maybe<BgFeaturesConnection>;\n  /** Reads and enables pagination through a set of `Bg`. */\n  allBgs?: Maybe<BgsConnection>;\n  /** Reads and enables pagination through a set of `ClassFeature`. */\n  allClassFeatures?: Maybe<ClassFeaturesConnection>;\n  /** Reads and enables pagination through a set of `Class`. */\n  allClasses?: Maybe<ClassesConnection>;\n  /** Reads and enables pagination through a set of `Condition`. */\n  allConditions?: Maybe<ConditionsConnection>;\n  /** Reads and enables pagination through a set of `Disease`. */\n  allDiseases?: Maybe<DiseasesConnection>;\n  /** Reads and enables pagination through a set of `Equipment`. */\n  allEquipment?: Maybe<EquipmentConnection>;\n  /** Reads and enables pagination through a set of `Feat`. */\n  allFeats?: Maybe<FeatsConnection>;\n  /** Reads and enables pagination through a set of `KnexMigration`. */\n  allKnexMigrations?: Maybe<KnexMigrationsConnection>;\n  /** Reads and enables pagination through a set of `KnexMigrationsLock`. */\n  allKnexMigrationsLocks?: Maybe<KnexMigrationsLocksConnection>;\n  /** Reads and enables pagination through a set of `Language`. */\n  allLanguages?: Maybe<LanguagesConnection>;\n  /** Reads and enables pagination through a set of `Minion`. */\n  allMinions?: Maybe<MinionsConnection>;\n  /** Reads and enables pagination through a set of `RaceFeature`. */\n  allRaceFeatures?: Maybe<RaceFeaturesConnection>;\n  /** Reads and enables pagination through a set of `Race`. */\n  allRaces?: Maybe<RacesConnection>;\n  /** Reads and enables pagination through a set of `RacialFeature`. */\n  allRacialFeatures?: Maybe<RacialFeaturesConnection>;\n  /** Reads and enables pagination through a set of `Skill`. */\n  allSkills?: Maybe<SkillsConnection>;\n  /** Reads and enables pagination through a set of `SpellSlug`. */\n  allSpellSlugs?: Maybe<SpellSlugsConnection>;\n  /** Reads and enables pagination through a set of `Spell`. */\n  allSpells?: Maybe<SpellsConnection>;\n  /** Reads and enables pagination through a set of `SubclassFeature`. */\n  allSubclassFeatures?: Maybe<SubclassFeaturesConnection>;\n  /** Reads and enables pagination through a set of `Subclass`. */\n  allSubclasses?: Maybe<SubclassesConnection>;\n  /** Reads and enables pagination through a set of `SubraceFeature`. */\n  allSubraceFeatures?: Maybe<SubraceFeaturesConnection>;\n  /** Reads and enables pagination through a set of `Subrace`. */\n  allSubraces?: Maybe<SubracesConnection>;\n  /** Reads and enables pagination through a set of `Wizard`. */\n  allWizards?: Maybe<WizardsConnection>;\n  attributeById?: Maybe<Attribute>;\n  bgFeatureById?: Maybe<BgFeature>;\n  bgById?: Maybe<Bg>;\n  classFeatureById?: Maybe<ClassFeature>;\n  classById?: Maybe<Class>;\n  conditionById?: Maybe<Condition>;\n  diseaseById?: Maybe<Disease>;\n  equipmentById?: Maybe<Equipment>;\n  featById?: Maybe<Feat>;\n  knexMigrationById?: Maybe<KnexMigration>;\n  knexMigrationsLockByIndex?: Maybe<KnexMigrationsLock>;\n  languageById?: Maybe<Language>;\n  minionById?: Maybe<Minion>;\n  minionByUserName?: Maybe<Minion>;\n  raceFeatureById?: Maybe<RaceFeature>;\n  raceById?: Maybe<Race>;\n  racialFeatureById?: Maybe<RacialFeature>;\n  skillById?: Maybe<Skill>;\n  spellSlugById?: Maybe<SpellSlug>;\n  spellById?: Maybe<Spell>;\n  subclassFeatureById?: Maybe<SubclassFeature>;\n  subclassById?: Maybe<Subclass>;\n  subraceFeatureById?: Maybe<SubraceFeature>;\n  subraceById?: Maybe<Subrace>;\n  wizardById?: Maybe<Wizard>;\n  wizardByUserId?: Maybe<Wizard>;\n  /** Reads a single `ClassFeature` using its globally unique `ID`. */\n  classFeature?: Maybe<ClassFeature>;\n  /** Reads a single `Class` using its globally unique `ID`. */\n  class?: Maybe<Class>;\n  /** Reads a single `Condition` using its globally unique `ID`. */\n  condition?: Maybe<Condition>;\n  /** Reads a single `Disease` using its globally unique `ID`. */\n  disease?: Maybe<Disease>;\n  /** Reads a single `KnexMigration` using its globally unique `ID`. */\n  knexMigration?: Maybe<KnexMigration>;\n  /** Reads a single `KnexMigrationsLock` using its globally unique `ID`. */\n  knexMigrationsLock?: Maybe<KnexMigrationsLock>;\n  /** Reads a single `Minion` using its globally unique `ID`. */\n  minion?: Maybe<Minion>;\n  /** Reads a single `SubclassFeature` using its globally unique `ID`. */\n  subclassFeature?: Maybe<SubclassFeature>;\n  /** Reads a single `Subclass` using its globally unique `ID`. */\n  subclass?: Maybe<Subclass>;\n  /** Reads a single `Wizard` using its globally unique `ID`. */\n  wizard?: Maybe<Wizard>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryNodeArgs = {\n  nodeId: Scalars['ID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllAttributesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<AttributesOrderBy>>;\n  condition?: Maybe<AttributeCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllBgFeaturesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<BgFeaturesOrderBy>>;\n  condition?: Maybe<BgFeatureCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllBgsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<BgsOrderBy>>;\n  condition?: Maybe<BgCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllClassFeaturesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<ClassFeaturesOrderBy>>;\n  condition?: Maybe<ClassFeatureCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllClassesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<ClassesOrderBy>>;\n  condition?: Maybe<ClassCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllConditionsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<ConditionsOrderBy>>;\n  condition?: Maybe<ConditionCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllDiseasesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<DiseasesOrderBy>>;\n  condition?: Maybe<DiseaseCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllEquipmentArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<EquipmentOrderBy>>;\n  condition?: Maybe<EquipmentCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllFeatsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<FeatsOrderBy>>;\n  condition?: Maybe<FeatCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllKnexMigrationsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<KnexMigrationsOrderBy>>;\n  condition?: Maybe<KnexMigrationCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllKnexMigrationsLocksArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<KnexMigrationsLocksOrderBy>>;\n  condition?: Maybe<KnexMigrationsLockCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllLanguagesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<LanguagesOrderBy>>;\n  condition?: Maybe<LanguageCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllMinionsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<MinionsOrderBy>>;\n  condition?: Maybe<MinionCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllRaceFeaturesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<RaceFeaturesOrderBy>>;\n  condition?: Maybe<RaceFeatureCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllRacesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<RacesOrderBy>>;\n  condition?: Maybe<RaceCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllRacialFeaturesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<RacialFeaturesOrderBy>>;\n  condition?: Maybe<RacialFeatureCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllSkillsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SkillsOrderBy>>;\n  condition?: Maybe<SkillCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllSpellSlugsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SpellSlugsOrderBy>>;\n  condition?: Maybe<SpellSlugCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllSpellsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SpellsOrderBy>>;\n  condition?: Maybe<SpellCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllSubclassFeaturesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SubclassFeaturesOrderBy>>;\n  condition?: Maybe<SubclassFeatureCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllSubclassesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SubclassesOrderBy>>;\n  condition?: Maybe<SubclassCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllSubraceFeaturesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SubraceFeaturesOrderBy>>;\n  condition?: Maybe<SubraceFeatureCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllSubracesArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SubracesOrderBy>>;\n  condition?: Maybe<SubraceCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAllWizardsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<WizardsOrderBy>>;\n  condition?: Maybe<WizardCondition>;\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryAttributeByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryBgFeatureByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryBgByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryClassFeatureByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryClassByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryConditionByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryDiseaseByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryEquipmentByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryFeatByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryKnexMigrationByIdArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryKnexMigrationsLockByIndexArgs = {\n  index: Scalars['Int'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryLanguageByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryMinionByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryMinionByUserNameArgs = {\n  userName: Scalars['String'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryRaceFeatureByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryRaceByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryRacialFeatureByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QuerySkillByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QuerySpellSlugByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QuerySpellByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QuerySubclassFeatureByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QuerySubclassByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QuerySubraceFeatureByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QuerySubraceByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryWizardByIdArgs = {\n  id: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryWizardByUserIdArgs = {\n  userId: Scalars['UUID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryClassFeatureArgs = {\n  nodeId: Scalars['ID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryClassArgs = {\n  nodeId: Scalars['ID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryConditionArgs = {\n  nodeId: Scalars['ID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryDiseaseArgs = {\n  nodeId: Scalars['ID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryKnexMigrationArgs = {\n  nodeId: Scalars['ID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryKnexMigrationsLockArgs = {\n  nodeId: Scalars['ID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryMinionArgs = {\n  nodeId: Scalars['ID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QuerySubclassFeatureArgs = {\n  nodeId: Scalars['ID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QuerySubclassArgs = {\n  nodeId: Scalars['ID'];\n};\n\n\n/** The root query type which gives access points into the data universe. */\nexport type QueryWizardArgs = {\n  nodeId: Scalars['ID'];\n};\n\nexport type Race = {\n  __typename?: 'Race';\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  summary?: Maybe<Scalars['String']>;\n  asis?: Maybe<Scalars['JSON']>;\n  movement?: Maybe<Scalars['Int']>;\n  size?: Maybe<Scalars['String']>;\n  languages?: Maybe<Array<Maybe<Scalars['String']>>>;\n  lifespan?: Maybe<Scalars['String']>;\n  alignment?: Maybe<Scalars['String']>;\n  /** Reads and enables pagination through a set of `Subrace`. */\n  subracesByRaceId: SubracesConnection;\n  /** Reads and enables pagination through a set of `RaceFeature`. */\n  raceFeaturesByRaceId: RaceFeaturesConnection;\n};\n\n\nexport type RaceSubracesByRaceIdArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SubracesOrderBy>>;\n  condition?: Maybe<SubraceCondition>;\n};\n\n\nexport type RaceRaceFeaturesByRaceIdArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<RaceFeaturesOrderBy>>;\n  condition?: Maybe<RaceFeatureCondition>;\n};\n\n/** A condition to be used against `Race` object types. All fields are tested for equality and combined with a logical ‘and.’ */\nexport type RaceCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `summary` field. */\n  summary?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `asis` field. */\n  asis?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `movement` field. */\n  movement?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `size` field. */\n  size?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `languages` field. */\n  languages?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** Checks for equality with the object’s `lifespan` field. */\n  lifespan?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `alignment` field. */\n  alignment?: Maybe<Scalars['String']>;\n};\n\nexport type RaceFeature = {\n  __typename?: 'RaceFeature';\n  id: Scalars['UUID'];\n  raceId?: Maybe<Scalars['UUID']>;\n  racialFeatureId?: Maybe<Scalars['UUID']>;\n  /** Reads a single `Race` that is related to this `RaceFeature`. */\n  raceByRaceId?: Maybe<Race>;\n  /** Reads a single `RacialFeature` that is related to this `RaceFeature`. */\n  racialFeatureByRacialFeatureId?: Maybe<RacialFeature>;\n};\n\n/**\n * A condition to be used against `RaceFeature` object types. All fields are tested\n * for equality and combined with a logical ‘and.’\n */\nexport type RaceFeatureCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `raceId` field. */\n  raceId?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `racialFeatureId` field. */\n  racialFeatureId?: Maybe<Scalars['UUID']>;\n};\n\n/** An input for mutations affecting `RaceFeature` */\nexport type RaceFeatureInput = {\n  id: Scalars['UUID'];\n  raceId?: Maybe<Scalars['UUID']>;\n  racialFeatureId?: Maybe<Scalars['UUID']>;\n};\n\n/** Represents an update to a `RaceFeature`. Fields that are set will be updated. */\nexport type RaceFeaturePatch = {\n  id?: Maybe<Scalars['UUID']>;\n  raceId?: Maybe<Scalars['UUID']>;\n  racialFeatureId?: Maybe<Scalars['UUID']>;\n};\n\n/** A connection to a list of `RaceFeature` values. */\nexport type RaceFeaturesConnection = {\n  __typename?: 'RaceFeaturesConnection';\n  /** A list of `RaceFeature` objects. */\n  nodes: Array<Maybe<RaceFeature>>;\n  /** A list of edges which contains the `RaceFeature` and cursor to aid in pagination. */\n  edges: Array<RaceFeaturesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `RaceFeature` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `RaceFeature` edge in the connection. */\nexport type RaceFeaturesEdge = {\n  __typename?: 'RaceFeaturesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `RaceFeature` at the end of the edge. */\n  node?: Maybe<RaceFeature>;\n};\n\n/** Methods to use when ordering `RaceFeature`. */\nexport enum RaceFeaturesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  RaceIdAsc = 'RACE_ID_ASC',\n  RaceIdDesc = 'RACE_ID_DESC',\n  RacialFeatureIdAsc = 'RACIAL_FEATURE_ID_ASC',\n  RacialFeatureIdDesc = 'RACIAL_FEATURE_ID_DESC'\n}\n\n/** An input for mutations affecting `Race` */\nexport type RaceInput = {\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  summary?: Maybe<Scalars['String']>;\n  asis?: Maybe<Scalars['JSON']>;\n  movement?: Maybe<Scalars['Int']>;\n  size?: Maybe<Scalars['String']>;\n  languages?: Maybe<Array<Maybe<Scalars['String']>>>;\n  lifespan?: Maybe<Scalars['String']>;\n  alignment?: Maybe<Scalars['String']>;\n};\n\n/** Represents an update to a `Race`. Fields that are set will be updated. */\nexport type RacePatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  summary?: Maybe<Scalars['String']>;\n  asis?: Maybe<Scalars['JSON']>;\n  movement?: Maybe<Scalars['Int']>;\n  size?: Maybe<Scalars['String']>;\n  languages?: Maybe<Array<Maybe<Scalars['String']>>>;\n  lifespan?: Maybe<Scalars['String']>;\n  alignment?: Maybe<Scalars['String']>;\n};\n\n/** A connection to a list of `Race` values. */\nexport type RacesConnection = {\n  __typename?: 'RacesConnection';\n  /** A list of `Race` objects. */\n  nodes: Array<Maybe<Race>>;\n  /** A list of edges which contains the `Race` and cursor to aid in pagination. */\n  edges: Array<RacesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Race` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Race` edge in the connection. */\nexport type RacesEdge = {\n  __typename?: 'RacesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Race` at the end of the edge. */\n  node?: Maybe<Race>;\n};\n\n/** Methods to use when ordering `Race`. */\nexport enum RacesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  SummaryAsc = 'SUMMARY_ASC',\n  SummaryDesc = 'SUMMARY_DESC',\n  AsisAsc = 'ASIS_ASC',\n  AsisDesc = 'ASIS_DESC',\n  MovementAsc = 'MOVEMENT_ASC',\n  MovementDesc = 'MOVEMENT_DESC',\n  SizeAsc = 'SIZE_ASC',\n  SizeDesc = 'SIZE_DESC',\n  LanguagesAsc = 'LANGUAGES_ASC',\n  LanguagesDesc = 'LANGUAGES_DESC',\n  LifespanAsc = 'LIFESPAN_ASC',\n  LifespanDesc = 'LIFESPAN_DESC',\n  AlignmentAsc = 'ALIGNMENT_ASC',\n  AlignmentDesc = 'ALIGNMENT_DESC'\n}\n\nexport type RacialFeature = {\n  __typename?: 'RacialFeature';\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n  /** Reads and enables pagination through a set of `SubraceFeature`. */\n  subraceFeaturesByRacialFeatureId: SubraceFeaturesConnection;\n  /** Reads and enables pagination through a set of `RaceFeature`. */\n  raceFeaturesByRacialFeatureId: RaceFeaturesConnection;\n};\n\n\nexport type RacialFeatureSubraceFeaturesByRacialFeatureIdArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SubraceFeaturesOrderBy>>;\n  condition?: Maybe<SubraceFeatureCondition>;\n};\n\n\nexport type RacialFeatureRaceFeaturesByRacialFeatureIdArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<RaceFeaturesOrderBy>>;\n  condition?: Maybe<RaceFeatureCondition>;\n};\n\n/**\n * A condition to be used against `RacialFeature` object types. All fields are\n * tested for equality and combined with a logical ‘and.’\n */\nexport type RacialFeatureCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `description` field. */\n  description?: Maybe<Scalars['String']>;\n};\n\n/** An input for mutations affecting `RacialFeature` */\nexport type RacialFeatureInput = {\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n};\n\n/** Represents an update to a `RacialFeature`. Fields that are set will be updated. */\nexport type RacialFeaturePatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\n/** A connection to a list of `RacialFeature` values. */\nexport type RacialFeaturesConnection = {\n  __typename?: 'RacialFeaturesConnection';\n  /** A list of `RacialFeature` objects. */\n  nodes: Array<Maybe<RacialFeature>>;\n  /** A list of edges which contains the `RacialFeature` and cursor to aid in pagination. */\n  edges: Array<RacialFeaturesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `RacialFeature` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `RacialFeature` edge in the connection. */\nexport type RacialFeaturesEdge = {\n  __typename?: 'RacialFeaturesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `RacialFeature` at the end of the edge. */\n  node?: Maybe<RacialFeature>;\n};\n\n/** Methods to use when ordering `RacialFeature`. */\nexport enum RacialFeaturesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  DescriptionAsc = 'DESCRIPTION_ASC',\n  DescriptionDesc = 'DESCRIPTION_DESC'\n}\n\n/** All input for the `signin` mutation. */\nexport type SigninInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\n/** The output of our `signin` mutation. */\nexport type SigninPayload = {\n  __typename?: 'SigninPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  jwtToken?: Maybe<Scalars['JwtToken']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n};\n\n/** All input for the `signup` mutation. */\nexport type SignupInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\n/** The output of our `signup` mutation. */\nexport type SignupPayload = {\n  __typename?: 'SignupPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  boolean?: Maybe<Scalars['Boolean']>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n};\n\nexport type Skill = {\n  __typename?: 'Skill';\n  id?: Maybe<Scalars['UUID']>;\n  skill: Scalars['String'];\n  attrId: Scalars['UUID'];\n  /** Reads a single `Attribute` that is related to this `Skill`. */\n  attributeByAttrId?: Maybe<Attribute>;\n};\n\n/** A condition to be used against `Skill` object types. All fields are tested for equality and combined with a logical ‘and.’ */\nexport type SkillCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `skill` field. */\n  skill?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `attrId` field. */\n  attrId?: Maybe<Scalars['UUID']>;\n};\n\n/** An input for mutations affecting `Skill` */\nexport type SkillInput = {\n  id?: Maybe<Scalars['UUID']>;\n  skill: Scalars['String'];\n  attrId: Scalars['UUID'];\n};\n\n/** Represents an update to a `Skill`. Fields that are set will be updated. */\nexport type SkillPatch = {\n  id?: Maybe<Scalars['UUID']>;\n  skill?: Maybe<Scalars['String']>;\n  attrId?: Maybe<Scalars['UUID']>;\n};\n\n/** A connection to a list of `Skill` values. */\nexport type SkillsConnection = {\n  __typename?: 'SkillsConnection';\n  /** A list of `Skill` objects. */\n  nodes: Array<Maybe<Skill>>;\n  /** A list of edges which contains the `Skill` and cursor to aid in pagination. */\n  edges: Array<SkillsEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Skill` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Skill` edge in the connection. */\nexport type SkillsEdge = {\n  __typename?: 'SkillsEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Skill` at the end of the edge. */\n  node?: Maybe<Skill>;\n};\n\n/** Methods to use when ordering `Skill`. */\nexport enum SkillsOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  SkillAsc = 'SKILL_ASC',\n  SkillDesc = 'SKILL_DESC',\n  AttrIdAsc = 'ATTR_ID_ASC',\n  AttrIdDesc = 'ATTR_ID_DESC'\n}\n\nexport type Spell = {\n  __typename?: 'Spell';\n  id?: Maybe<Scalars['UUID']>;\n  slug: Scalars['String'];\n  name: Scalars['String'];\n  desc: Array<Maybe<Scalars['String']>>;\n  page?: Maybe<Scalars['String']>;\n  range: Scalars['JSON'];\n  components: Scalars['String'];\n  material: Scalars['String'];\n  ritual: Scalars['String'];\n  duration: Scalars['String'];\n  concentration: Scalars['Boolean'];\n  castingTime: Scalars['String'];\n  level: Scalars['String'];\n  levelInt: Scalars['Int'];\n  school?: Maybe<Scalars['String']>;\n  higherLevel?: Maybe<Scalars['String']>;\n  dndClass?: Maybe<Scalars['String']>;\n  archetype?: Maybe<Scalars['String']>;\n  circles?: Maybe<Scalars['String']>;\n};\n\n/** A condition to be used against `Spell` object types. All fields are tested for equality and combined with a logical ‘and.’ */\nexport type SpellCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `slug` field. */\n  slug?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `desc` field. */\n  desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** Checks for equality with the object’s `page` field. */\n  page?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `range` field. */\n  range?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `components` field. */\n  components?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `material` field. */\n  material?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `ritual` field. */\n  ritual?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `duration` field. */\n  duration?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `concentration` field. */\n  concentration?: Maybe<Scalars['Boolean']>;\n  /** Checks for equality with the object’s `castingTime` field. */\n  castingTime?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `level` field. */\n  level?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `levelInt` field. */\n  levelInt?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `school` field. */\n  school?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `higherLevel` field. */\n  higherLevel?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `dndClass` field. */\n  dndClass?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `archetype` field. */\n  archetype?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `circles` field. */\n  circles?: Maybe<Scalars['String']>;\n};\n\n/** An input for mutations affecting `Spell` */\nexport type SpellInput = {\n  id?: Maybe<Scalars['UUID']>;\n  slug: Scalars['String'];\n  name: Scalars['String'];\n  desc: Array<Maybe<Scalars['String']>>;\n  page?: Maybe<Scalars['String']>;\n  range: Scalars['JSON'];\n  components: Scalars['String'];\n  material: Scalars['String'];\n  ritual: Scalars['String'];\n  duration: Scalars['String'];\n  concentration: Scalars['Boolean'];\n  castingTime: Scalars['String'];\n  level: Scalars['String'];\n  levelInt: Scalars['Int'];\n  school?: Maybe<Scalars['String']>;\n  higherLevel?: Maybe<Scalars['String']>;\n  dndClass?: Maybe<Scalars['String']>;\n  archetype?: Maybe<Scalars['String']>;\n  circles?: Maybe<Scalars['String']>;\n};\n\n/** Represents an update to a `Spell`. Fields that are set will be updated. */\nexport type SpellPatch = {\n  id?: Maybe<Scalars['UUID']>;\n  slug?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n  page?: Maybe<Scalars['String']>;\n  range?: Maybe<Scalars['JSON']>;\n  components?: Maybe<Scalars['String']>;\n  material?: Maybe<Scalars['String']>;\n  ritual?: Maybe<Scalars['String']>;\n  duration?: Maybe<Scalars['String']>;\n  concentration?: Maybe<Scalars['Boolean']>;\n  castingTime?: Maybe<Scalars['String']>;\n  level?: Maybe<Scalars['String']>;\n  levelInt?: Maybe<Scalars['Int']>;\n  school?: Maybe<Scalars['String']>;\n  higherLevel?: Maybe<Scalars['String']>;\n  dndClass?: Maybe<Scalars['String']>;\n  archetype?: Maybe<Scalars['String']>;\n  circles?: Maybe<Scalars['String']>;\n};\n\nexport type SpellSlug = {\n  __typename?: 'SpellSlug';\n  id?: Maybe<Scalars['UUID']>;\n  slug: Scalars['String'];\n  name: Scalars['String'];\n  components: Scalars['String'];\n  level: Scalars['String'];\n  levelInt: Scalars['Int'];\n  school?: Maybe<Scalars['String']>;\n  dndClass: Scalars['String'];\n};\n\n/**\n * A condition to be used against `SpellSlug` object types. All fields are tested\n * for equality and combined with a logical ‘and.’\n */\nexport type SpellSlugCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `slug` field. */\n  slug?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `components` field. */\n  components?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `level` field. */\n  level?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `levelInt` field. */\n  levelInt?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `school` field. */\n  school?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `dndClass` field. */\n  dndClass?: Maybe<Scalars['String']>;\n};\n\n/** An input for mutations affecting `SpellSlug` */\nexport type SpellSlugInput = {\n  id?: Maybe<Scalars['UUID']>;\n  slug: Scalars['String'];\n  name: Scalars['String'];\n  components: Scalars['String'];\n  level: Scalars['String'];\n  levelInt: Scalars['Int'];\n  school?: Maybe<Scalars['String']>;\n  dndClass: Scalars['String'];\n};\n\n/** Represents an update to a `SpellSlug`. Fields that are set will be updated. */\nexport type SpellSlugPatch = {\n  id?: Maybe<Scalars['UUID']>;\n  slug?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  components?: Maybe<Scalars['String']>;\n  level?: Maybe<Scalars['String']>;\n  levelInt?: Maybe<Scalars['Int']>;\n  school?: Maybe<Scalars['String']>;\n  dndClass?: Maybe<Scalars['String']>;\n};\n\n/** A connection to a list of `SpellSlug` values. */\nexport type SpellSlugsConnection = {\n  __typename?: 'SpellSlugsConnection';\n  /** A list of `SpellSlug` objects. */\n  nodes: Array<Maybe<SpellSlug>>;\n  /** A list of edges which contains the `SpellSlug` and cursor to aid in pagination. */\n  edges: Array<SpellSlugsEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `SpellSlug` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `SpellSlug` edge in the connection. */\nexport type SpellSlugsEdge = {\n  __typename?: 'SpellSlugsEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `SpellSlug` at the end of the edge. */\n  node?: Maybe<SpellSlug>;\n};\n\n/** Methods to use when ordering `SpellSlug`. */\nexport enum SpellSlugsOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  SlugAsc = 'SLUG_ASC',\n  SlugDesc = 'SLUG_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  ComponentsAsc = 'COMPONENTS_ASC',\n  ComponentsDesc = 'COMPONENTS_DESC',\n  LevelAsc = 'LEVEL_ASC',\n  LevelDesc = 'LEVEL_DESC',\n  LevelIntAsc = 'LEVEL_INT_ASC',\n  LevelIntDesc = 'LEVEL_INT_DESC',\n  SchoolAsc = 'SCHOOL_ASC',\n  SchoolDesc = 'SCHOOL_DESC',\n  DndClassAsc = 'DND_CLASS_ASC',\n  DndClassDesc = 'DND_CLASS_DESC'\n}\n\n/** A connection to a list of `Spell` values. */\nexport type SpellsConnection = {\n  __typename?: 'SpellsConnection';\n  /** A list of `Spell` objects. */\n  nodes: Array<Maybe<Spell>>;\n  /** A list of edges which contains the `Spell` and cursor to aid in pagination. */\n  edges: Array<SpellsEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Spell` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Spell` edge in the connection. */\nexport type SpellsEdge = {\n  __typename?: 'SpellsEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Spell` at the end of the edge. */\n  node?: Maybe<Spell>;\n};\n\n/** Methods to use when ordering `Spell`. */\nexport enum SpellsOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  SlugAsc = 'SLUG_ASC',\n  SlugDesc = 'SLUG_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  DescAsc = 'DESC_ASC',\n  DescDesc = 'DESC_DESC',\n  PageAsc = 'PAGE_ASC',\n  PageDesc = 'PAGE_DESC',\n  RangeAsc = 'RANGE_ASC',\n  RangeDesc = 'RANGE_DESC',\n  ComponentsAsc = 'COMPONENTS_ASC',\n  ComponentsDesc = 'COMPONENTS_DESC',\n  MaterialAsc = 'MATERIAL_ASC',\n  MaterialDesc = 'MATERIAL_DESC',\n  RitualAsc = 'RITUAL_ASC',\n  RitualDesc = 'RITUAL_DESC',\n  DurationAsc = 'DURATION_ASC',\n  DurationDesc = 'DURATION_DESC',\n  ConcentrationAsc = 'CONCENTRATION_ASC',\n  ConcentrationDesc = 'CONCENTRATION_DESC',\n  CastingTimeAsc = 'CASTING_TIME_ASC',\n  CastingTimeDesc = 'CASTING_TIME_DESC',\n  LevelAsc = 'LEVEL_ASC',\n  LevelDesc = 'LEVEL_DESC',\n  LevelIntAsc = 'LEVEL_INT_ASC',\n  LevelIntDesc = 'LEVEL_INT_DESC',\n  SchoolAsc = 'SCHOOL_ASC',\n  SchoolDesc = 'SCHOOL_DESC',\n  HigherLevelAsc = 'HIGHER_LEVEL_ASC',\n  HigherLevelDesc = 'HIGHER_LEVEL_DESC',\n  DndClassAsc = 'DND_CLASS_ASC',\n  DndClassDesc = 'DND_CLASS_DESC',\n  ArchetypeAsc = 'ARCHETYPE_ASC',\n  ArchetypeDesc = 'ARCHETYPE_DESC',\n  CirclesAsc = 'CIRCLES_ASC',\n  CirclesDesc = 'CIRCLES_DESC'\n}\n\nexport type Subclass = Node & {\n  __typename?: 'Subclass';\n  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */\n  nodeId: Scalars['ID'];\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  shortName: Scalars['String'];\n  subclassFeatures?: Maybe<Array<Maybe<Scalars['String']>>>;\n  classId?: Maybe<Scalars['UUID']>;\n  subclassTableGroups?: Maybe<Array<Maybe<Scalars['JSON']>>>;\n  additionalSpells?: Maybe<Array<Maybe<Scalars['JSON']>>>;\n  spellcastingAbility?: Maybe<Scalars['String']>;\n  casterProgression?: Maybe<Scalars['String']>;\n  cantripProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  spellsKnownProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  source?: Maybe<Scalars['String']>;\n  page?: Maybe<Scalars['Int']>;\n  preparedSpells?: Maybe<Scalars['String']>;\n  /** Reads a single `Class` that is related to this `Subclass`. */\n  classByClassId?: Maybe<Class>;\n};\n\n/**\n * A condition to be used against `Subclass` object types. All fields are tested\n * for equality and combined with a logical ‘and.’\n */\nexport type SubclassCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `shortName` field. */\n  shortName?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `subclassFeatures` field. */\n  subclassFeatures?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** Checks for equality with the object’s `classId` field. */\n  classId?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `subclassTableGroups` field. */\n  subclassTableGroups?: Maybe<Array<Maybe<Scalars['JSON']>>>;\n  /** Checks for equality with the object’s `additionalSpells` field. */\n  additionalSpells?: Maybe<Array<Maybe<Scalars['JSON']>>>;\n  /** Checks for equality with the object’s `spellcastingAbility` field. */\n  spellcastingAbility?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `casterProgression` field. */\n  casterProgression?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `cantripProgression` field. */\n  cantripProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  /** Checks for equality with the object’s `spellsKnownProgression` field. */\n  spellsKnownProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  /** Checks for equality with the object’s `source` field. */\n  source?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `page` field. */\n  page?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `preparedSpells` field. */\n  preparedSpells?: Maybe<Scalars['String']>;\n};\n\nexport type SubclassFeature = Node & {\n  __typename?: 'SubclassFeature';\n  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */\n  nodeId: Scalars['ID'];\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  level?: Maybe<Scalars['Int']>;\n  classId?: Maybe<Scalars['UUID']>;\n  subclassShortName?: Maybe<Scalars['String']>;\n  subclassSource?: Maybe<Scalars['String']>;\n  isClassFeatureVariant?: Maybe<Scalars['Boolean']>;\n  page?: Maybe<Scalars['Int']>;\n  entries?: Maybe<Scalars['JSON']>;\n  /** Reads a single `Class` that is related to this `SubclassFeature`. */\n  classByClassId?: Maybe<Class>;\n};\n\n/**\n * A condition to be used against `SubclassFeature` object types. All fields are\n * tested for equality and combined with a logical ‘and.’\n */\nexport type SubclassFeatureCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `source` field. */\n  source?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `level` field. */\n  level?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `classId` field. */\n  classId?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `subclassShortName` field. */\n  subclassShortName?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `subclassSource` field. */\n  subclassSource?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `isClassFeatureVariant` field. */\n  isClassFeatureVariant?: Maybe<Scalars['Boolean']>;\n  /** Checks for equality with the object’s `page` field. */\n  page?: Maybe<Scalars['Int']>;\n  /** Checks for equality with the object’s `entries` field. */\n  entries?: Maybe<Scalars['JSON']>;\n};\n\n/** An input for mutations affecting `SubclassFeature` */\nexport type SubclassFeatureInput = {\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  source?: Maybe<Scalars['String']>;\n  level?: Maybe<Scalars['Int']>;\n  classId?: Maybe<Scalars['UUID']>;\n  subclassShortName?: Maybe<Scalars['String']>;\n  subclassSource?: Maybe<Scalars['String']>;\n  isClassFeatureVariant?: Maybe<Scalars['Boolean']>;\n  page?: Maybe<Scalars['Int']>;\n  entries?: Maybe<Scalars['JSON']>;\n};\n\n/** Represents an update to a `SubclassFeature`. Fields that are set will be updated. */\nexport type SubclassFeaturePatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  source?: Maybe<Scalars['String']>;\n  level?: Maybe<Scalars['Int']>;\n  classId?: Maybe<Scalars['UUID']>;\n  subclassShortName?: Maybe<Scalars['String']>;\n  subclassSource?: Maybe<Scalars['String']>;\n  isClassFeatureVariant?: Maybe<Scalars['Boolean']>;\n  page?: Maybe<Scalars['Int']>;\n  entries?: Maybe<Scalars['JSON']>;\n};\n\n/** A connection to a list of `SubclassFeature` values. */\nexport type SubclassFeaturesConnection = {\n  __typename?: 'SubclassFeaturesConnection';\n  /** A list of `SubclassFeature` objects. */\n  nodes: Array<Maybe<SubclassFeature>>;\n  /** A list of edges which contains the `SubclassFeature` and cursor to aid in pagination. */\n  edges: Array<SubclassFeaturesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `SubclassFeature` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `SubclassFeature` edge in the connection. */\nexport type SubclassFeaturesEdge = {\n  __typename?: 'SubclassFeaturesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `SubclassFeature` at the end of the edge. */\n  node?: Maybe<SubclassFeature>;\n};\n\n/** Methods to use when ordering `SubclassFeature`. */\nexport enum SubclassFeaturesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  SourceAsc = 'SOURCE_ASC',\n  SourceDesc = 'SOURCE_DESC',\n  LevelAsc = 'LEVEL_ASC',\n  LevelDesc = 'LEVEL_DESC',\n  ClassIdAsc = 'CLASS_ID_ASC',\n  ClassIdDesc = 'CLASS_ID_DESC',\n  SubclassShortNameAsc = 'SUBCLASS_SHORT_NAME_ASC',\n  SubclassShortNameDesc = 'SUBCLASS_SHORT_NAME_DESC',\n  SubclassSourceAsc = 'SUBCLASS_SOURCE_ASC',\n  SubclassSourceDesc = 'SUBCLASS_SOURCE_DESC',\n  IsClassFeatureVariantAsc = 'IS_CLASS_FEATURE_VARIANT_ASC',\n  IsClassFeatureVariantDesc = 'IS_CLASS_FEATURE_VARIANT_DESC',\n  PageAsc = 'PAGE_ASC',\n  PageDesc = 'PAGE_DESC',\n  EntriesAsc = 'ENTRIES_ASC',\n  EntriesDesc = 'ENTRIES_DESC',\n  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',\n  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'\n}\n\n/** An input for mutations affecting `Subclass` */\nexport type SubclassInput = {\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  shortName: Scalars['String'];\n  subclassFeatures?: Maybe<Array<Maybe<Scalars['String']>>>;\n  classId?: Maybe<Scalars['UUID']>;\n  subclassTableGroups?: Maybe<Array<Maybe<Scalars['JSON']>>>;\n  additionalSpells?: Maybe<Array<Maybe<Scalars['JSON']>>>;\n  spellcastingAbility?: Maybe<Scalars['String']>;\n  casterProgression?: Maybe<Scalars['String']>;\n  cantripProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  spellsKnownProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  source?: Maybe<Scalars['String']>;\n  page?: Maybe<Scalars['Int']>;\n  preparedSpells?: Maybe<Scalars['String']>;\n};\n\n/** Represents an update to a `Subclass`. Fields that are set will be updated. */\nexport type SubclassPatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  shortName?: Maybe<Scalars['String']>;\n  subclassFeatures?: Maybe<Array<Maybe<Scalars['String']>>>;\n  classId?: Maybe<Scalars['UUID']>;\n  subclassTableGroups?: Maybe<Array<Maybe<Scalars['JSON']>>>;\n  additionalSpells?: Maybe<Array<Maybe<Scalars['JSON']>>>;\n  spellcastingAbility?: Maybe<Scalars['String']>;\n  casterProgression?: Maybe<Scalars['String']>;\n  cantripProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  spellsKnownProgression?: Maybe<Array<Maybe<Scalars['Int']>>>;\n  source?: Maybe<Scalars['String']>;\n  page?: Maybe<Scalars['Int']>;\n  preparedSpells?: Maybe<Scalars['String']>;\n};\n\n/** A connection to a list of `Subclass` values. */\nexport type SubclassesConnection = {\n  __typename?: 'SubclassesConnection';\n  /** A list of `Subclass` objects. */\n  nodes: Array<Maybe<Subclass>>;\n  /** A list of edges which contains the `Subclass` and cursor to aid in pagination. */\n  edges: Array<SubclassesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Subclass` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Subclass` edge in the connection. */\nexport type SubclassesEdge = {\n  __typename?: 'SubclassesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Subclass` at the end of the edge. */\n  node?: Maybe<Subclass>;\n};\n\n/** Methods to use when ordering `Subclass`. */\nexport enum SubclassesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  ShortNameAsc = 'SHORT_NAME_ASC',\n  ShortNameDesc = 'SHORT_NAME_DESC',\n  SubclassFeaturesAsc = 'SUBCLASS_FEATURES_ASC',\n  SubclassFeaturesDesc = 'SUBCLASS_FEATURES_DESC',\n  ClassIdAsc = 'CLASS_ID_ASC',\n  ClassIdDesc = 'CLASS_ID_DESC',\n  SubclassTableGroupsAsc = 'SUBCLASS_TABLE_GROUPS_ASC',\n  SubclassTableGroupsDesc = 'SUBCLASS_TABLE_GROUPS_DESC',\n  AdditionalSpellsAsc = 'ADDITIONAL_SPELLS_ASC',\n  AdditionalSpellsDesc = 'ADDITIONAL_SPELLS_DESC',\n  SpellcastingAbilityAsc = 'SPELLCASTING_ABILITY_ASC',\n  SpellcastingAbilityDesc = 'SPELLCASTING_ABILITY_DESC',\n  CasterProgressionAsc = 'CASTER_PROGRESSION_ASC',\n  CasterProgressionDesc = 'CASTER_PROGRESSION_DESC',\n  CantripProgressionAsc = 'CANTRIP_PROGRESSION_ASC',\n  CantripProgressionDesc = 'CANTRIP_PROGRESSION_DESC',\n  SpellsKnownProgressionAsc = 'SPELLS_KNOWN_PROGRESSION_ASC',\n  SpellsKnownProgressionDesc = 'SPELLS_KNOWN_PROGRESSION_DESC',\n  SourceAsc = 'SOURCE_ASC',\n  SourceDesc = 'SOURCE_DESC',\n  PageAsc = 'PAGE_ASC',\n  PageDesc = 'PAGE_DESC',\n  PreparedSpellsAsc = 'PREPARED_SPELLS_ASC',\n  PreparedSpellsDesc = 'PREPARED_SPELLS_DESC',\n  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',\n  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'\n}\n\nexport type Subrace = {\n  __typename?: 'Subrace';\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  summary?: Maybe<Scalars['String']>;\n  asis?: Maybe<Scalars['JSON']>;\n  raceId?: Maybe<Scalars['UUID']>;\n  /** Reads a single `Race` that is related to this `Subrace`. */\n  raceByRaceId?: Maybe<Race>;\n  /** Reads and enables pagination through a set of `SubraceFeature`. */\n  subraceFeaturesBySubraceId: SubraceFeaturesConnection;\n};\n\n\nexport type SubraceSubraceFeaturesBySubraceIdArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  before?: Maybe<Scalars['Cursor']>;\n  after?: Maybe<Scalars['Cursor']>;\n  orderBy?: Maybe<Array<SubraceFeaturesOrderBy>>;\n  condition?: Maybe<SubraceFeatureCondition>;\n};\n\n/** A condition to be used against `Subrace` object types. All fields are tested for equality and combined with a logical ‘and.’ */\nexport type SubraceCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `name` field. */\n  name?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `summary` field. */\n  summary?: Maybe<Scalars['String']>;\n  /** Checks for equality with the object’s `asis` field. */\n  asis?: Maybe<Scalars['JSON']>;\n  /** Checks for equality with the object’s `raceId` field. */\n  raceId?: Maybe<Scalars['UUID']>;\n};\n\nexport type SubraceFeature = {\n  __typename?: 'SubraceFeature';\n  id: Scalars['UUID'];\n  subraceId?: Maybe<Scalars['UUID']>;\n  racialFeatureId?: Maybe<Scalars['UUID']>;\n  /** Reads a single `Subrace` that is related to this `SubraceFeature`. */\n  subraceBySubraceId?: Maybe<Subrace>;\n  /** Reads a single `RacialFeature` that is related to this `SubraceFeature`. */\n  racialFeatureByRacialFeatureId?: Maybe<RacialFeature>;\n};\n\n/**\n * A condition to be used against `SubraceFeature` object types. All fields are\n * tested for equality and combined with a logical ‘and.’\n */\nexport type SubraceFeatureCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `subraceId` field. */\n  subraceId?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `racialFeatureId` field. */\n  racialFeatureId?: Maybe<Scalars['UUID']>;\n};\n\n/** An input for mutations affecting `SubraceFeature` */\nexport type SubraceFeatureInput = {\n  id: Scalars['UUID'];\n  subraceId?: Maybe<Scalars['UUID']>;\n  racialFeatureId?: Maybe<Scalars['UUID']>;\n};\n\n/** Represents an update to a `SubraceFeature`. Fields that are set will be updated. */\nexport type SubraceFeaturePatch = {\n  id?: Maybe<Scalars['UUID']>;\n  subraceId?: Maybe<Scalars['UUID']>;\n  racialFeatureId?: Maybe<Scalars['UUID']>;\n};\n\n/** A connection to a list of `SubraceFeature` values. */\nexport type SubraceFeaturesConnection = {\n  __typename?: 'SubraceFeaturesConnection';\n  /** A list of `SubraceFeature` objects. */\n  nodes: Array<Maybe<SubraceFeature>>;\n  /** A list of edges which contains the `SubraceFeature` and cursor to aid in pagination. */\n  edges: Array<SubraceFeaturesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `SubraceFeature` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `SubraceFeature` edge in the connection. */\nexport type SubraceFeaturesEdge = {\n  __typename?: 'SubraceFeaturesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `SubraceFeature` at the end of the edge. */\n  node?: Maybe<SubraceFeature>;\n};\n\n/** Methods to use when ordering `SubraceFeature`. */\nexport enum SubraceFeaturesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  SubraceIdAsc = 'SUBRACE_ID_ASC',\n  SubraceIdDesc = 'SUBRACE_ID_DESC',\n  RacialFeatureIdAsc = 'RACIAL_FEATURE_ID_ASC',\n  RacialFeatureIdDesc = 'RACIAL_FEATURE_ID_DESC'\n}\n\n/** An input for mutations affecting `Subrace` */\nexport type SubraceInput = {\n  id: Scalars['UUID'];\n  name: Scalars['String'];\n  summary?: Maybe<Scalars['String']>;\n  asis?: Maybe<Scalars['JSON']>;\n  raceId?: Maybe<Scalars['UUID']>;\n};\n\n/** Represents an update to a `Subrace`. Fields that are set will be updated. */\nexport type SubracePatch = {\n  id?: Maybe<Scalars['UUID']>;\n  name?: Maybe<Scalars['String']>;\n  summary?: Maybe<Scalars['String']>;\n  asis?: Maybe<Scalars['JSON']>;\n  raceId?: Maybe<Scalars['UUID']>;\n};\n\n/** A connection to a list of `Subrace` values. */\nexport type SubracesConnection = {\n  __typename?: 'SubracesConnection';\n  /** A list of `Subrace` objects. */\n  nodes: Array<Maybe<Subrace>>;\n  /** A list of edges which contains the `Subrace` and cursor to aid in pagination. */\n  edges: Array<SubracesEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Subrace` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Subrace` edge in the connection. */\nexport type SubracesEdge = {\n  __typename?: 'SubracesEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Subrace` at the end of the edge. */\n  node?: Maybe<Subrace>;\n};\n\n/** Methods to use when ordering `Subrace`. */\nexport enum SubracesOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  NameAsc = 'NAME_ASC',\n  NameDesc = 'NAME_DESC',\n  SummaryAsc = 'SUMMARY_ASC',\n  SummaryDesc = 'SUMMARY_DESC',\n  AsisAsc = 'ASIS_ASC',\n  AsisDesc = 'ASIS_DESC',\n  RaceIdAsc = 'RACE_ID_ASC',\n  RaceIdDesc = 'RACE_ID_DESC'\n}\n\n\n/** All input for the `updateAttributeById` mutation. */\nexport type UpdateAttributeByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Attribute` being updated. */\n  attributePatch: AttributePatch;\n  id: Scalars['UUID'];\n};\n\n/** The output of our update `Attribute` mutation. */\nexport type UpdateAttributePayload = {\n  __typename?: 'UpdateAttributePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Attribute` that was updated by this mutation. */\n  attribute?: Maybe<Attribute>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Attribute`. May be used by Relay 1. */\n  attributeEdge?: Maybe<AttributesEdge>;\n};\n\n\n/** The output of our update `Attribute` mutation. */\nexport type UpdateAttributePayloadAttributeEdgeArgs = {\n  orderBy?: Maybe<Array<AttributesOrderBy>>;\n};\n\n/** All input for the `updateBgById` mutation. */\nexport type UpdateBgByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Bg` being updated. */\n  bgPatch: BgPatch;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `updateBgFeatureById` mutation. */\nexport type UpdateBgFeatureByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `BgFeature` being updated. */\n  bgFeaturePatch: BgFeaturePatch;\n  id: Scalars['UUID'];\n};\n\n/** The output of our update `BgFeature` mutation. */\nexport type UpdateBgFeaturePayload = {\n  __typename?: 'UpdateBgFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `BgFeature` that was updated by this mutation. */\n  bgFeature?: Maybe<BgFeature>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `BgFeature`. May be used by Relay 1. */\n  bgFeatureEdge?: Maybe<BgFeaturesEdge>;\n};\n\n\n/** The output of our update `BgFeature` mutation. */\nexport type UpdateBgFeaturePayloadBgFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<BgFeaturesOrderBy>>;\n};\n\n/** The output of our update `Bg` mutation. */\nexport type UpdateBgPayload = {\n  __typename?: 'UpdateBgPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Bg` that was updated by this mutation. */\n  bg?: Maybe<Bg>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `BgFeature` that is related to this `Bg`. */\n  bgFeatureByBackgroundFeature?: Maybe<BgFeature>;\n  /** Reads a single `BgFeature` that is related to this `Bg`. */\n  bgFeatureByAlternateBackgroundFeature?: Maybe<BgFeature>;\n  /** An edge for our `Bg`. May be used by Relay 1. */\n  bgEdge?: Maybe<BgsEdge>;\n};\n\n\n/** The output of our update `Bg` mutation. */\nexport type UpdateBgPayloadBgEdgeArgs = {\n  orderBy?: Maybe<Array<BgsOrderBy>>;\n};\n\n/** All input for the `updateClassById` mutation. */\nexport type UpdateClassByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Class` being updated. */\n  classPatch: ClassPatch;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `updateClassFeatureById` mutation. */\nexport type UpdateClassFeatureByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `ClassFeature` being updated. */\n  classFeaturePatch: ClassFeaturePatch;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `updateClassFeature` mutation. */\nexport type UpdateClassFeatureInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `ClassFeature` to be updated. */\n  nodeId: Scalars['ID'];\n  /** An object where the defined keys will be set on the `ClassFeature` being updated. */\n  classFeaturePatch: ClassFeaturePatch;\n};\n\n/** The output of our update `ClassFeature` mutation. */\nexport type UpdateClassFeaturePayload = {\n  __typename?: 'UpdateClassFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `ClassFeature` that was updated by this mutation. */\n  classFeature?: Maybe<ClassFeature>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Class` that is related to this `ClassFeature`. */\n  classByClassId?: Maybe<Class>;\n  /** An edge for our `ClassFeature`. May be used by Relay 1. */\n  classFeatureEdge?: Maybe<ClassFeaturesEdge>;\n};\n\n\n/** The output of our update `ClassFeature` mutation. */\nexport type UpdateClassFeaturePayloadClassFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<ClassFeaturesOrderBy>>;\n};\n\n/** All input for the `updateClass` mutation. */\nexport type UpdateClassInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `Class` to be updated. */\n  nodeId: Scalars['ID'];\n  /** An object where the defined keys will be set on the `Class` being updated. */\n  classPatch: ClassPatch;\n};\n\n/** The output of our update `Class` mutation. */\nexport type UpdateClassPayload = {\n  __typename?: 'UpdateClassPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Class` that was updated by this mutation. */\n  class?: Maybe<Class>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Class`. May be used by Relay 1. */\n  classEdge?: Maybe<ClassesEdge>;\n};\n\n\n/** The output of our update `Class` mutation. */\nexport type UpdateClassPayloadClassEdgeArgs = {\n  orderBy?: Maybe<Array<ClassesOrderBy>>;\n};\n\n/** All input for the `updateConditionById` mutation. */\nexport type UpdateConditionByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Condition` being updated. */\n  conditionPatch: ConditionPatch;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `updateCondition` mutation. */\nexport type UpdateConditionInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `Condition` to be updated. */\n  nodeId: Scalars['ID'];\n  /** An object where the defined keys will be set on the `Condition` being updated. */\n  conditionPatch: ConditionPatch;\n};\n\n/** The output of our update `Condition` mutation. */\nexport type UpdateConditionPayload = {\n  __typename?: 'UpdateConditionPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Condition` that was updated by this mutation. */\n  condition?: Maybe<Condition>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Condition`. May be used by Relay 1. */\n  conditionEdge?: Maybe<ConditionsEdge>;\n};\n\n\n/** The output of our update `Condition` mutation. */\nexport type UpdateConditionPayloadConditionEdgeArgs = {\n  orderBy?: Maybe<Array<ConditionsOrderBy>>;\n};\n\n/** All input for the `updateDiseaseById` mutation. */\nexport type UpdateDiseaseByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Disease` being updated. */\n  diseasePatch: DiseasePatch;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `updateDisease` mutation. */\nexport type UpdateDiseaseInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `Disease` to be updated. */\n  nodeId: Scalars['ID'];\n  /** An object where the defined keys will be set on the `Disease` being updated. */\n  diseasePatch: DiseasePatch;\n};\n\n/** The output of our update `Disease` mutation. */\nexport type UpdateDiseasePayload = {\n  __typename?: 'UpdateDiseasePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Disease` that was updated by this mutation. */\n  disease?: Maybe<Disease>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Disease`. May be used by Relay 1. */\n  diseaseEdge?: Maybe<DiseasesEdge>;\n};\n\n\n/** The output of our update `Disease` mutation. */\nexport type UpdateDiseasePayloadDiseaseEdgeArgs = {\n  orderBy?: Maybe<Array<DiseasesOrderBy>>;\n};\n\n/** All input for the `updateEquipmentById` mutation. */\nexport type UpdateEquipmentByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Equipment` being updated. */\n  equipmentPatch: EquipmentPatch;\n  id: Scalars['UUID'];\n};\n\n/** The output of our update `Equipment` mutation. */\nexport type UpdateEquipmentPayload = {\n  __typename?: 'UpdateEquipmentPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Equipment` that was updated by this mutation. */\n  equipment?: Maybe<Equipment>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Equipment`. May be used by Relay 1. */\n  equipmentEdge?: Maybe<EquipmentEdge>;\n};\n\n\n/** The output of our update `Equipment` mutation. */\nexport type UpdateEquipmentPayloadEquipmentEdgeArgs = {\n  orderBy?: Maybe<Array<EquipmentOrderBy>>;\n};\n\n/** All input for the `updateFeatById` mutation. */\nexport type UpdateFeatByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Feat` being updated. */\n  featPatch: FeatPatch;\n  id: Scalars['UUID'];\n};\n\n/** The output of our update `Feat` mutation. */\nexport type UpdateFeatPayload = {\n  __typename?: 'UpdateFeatPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Feat` that was updated by this mutation. */\n  feat?: Maybe<Feat>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Feat`. May be used by Relay 1. */\n  featEdge?: Maybe<FeatsEdge>;\n};\n\n\n/** The output of our update `Feat` mutation. */\nexport type UpdateFeatPayloadFeatEdgeArgs = {\n  orderBy?: Maybe<Array<FeatsOrderBy>>;\n};\n\n/** All input for the `updateKnexMigrationById` mutation. */\nexport type UpdateKnexMigrationByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `KnexMigration` being updated. */\n  knexMigrationPatch: KnexMigrationPatch;\n  id: Scalars['Int'];\n};\n\n/** All input for the `updateKnexMigration` mutation. */\nexport type UpdateKnexMigrationInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `KnexMigration` to be updated. */\n  nodeId: Scalars['ID'];\n  /** An object where the defined keys will be set on the `KnexMigration` being updated. */\n  knexMigrationPatch: KnexMigrationPatch;\n};\n\n/** The output of our update `KnexMigration` mutation. */\nexport type UpdateKnexMigrationPayload = {\n  __typename?: 'UpdateKnexMigrationPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `KnexMigration` that was updated by this mutation. */\n  knexMigration?: Maybe<KnexMigration>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `KnexMigration`. May be used by Relay 1. */\n  knexMigrationEdge?: Maybe<KnexMigrationsEdge>;\n};\n\n\n/** The output of our update `KnexMigration` mutation. */\nexport type UpdateKnexMigrationPayloadKnexMigrationEdgeArgs = {\n  orderBy?: Maybe<Array<KnexMigrationsOrderBy>>;\n};\n\n/** All input for the `updateKnexMigrationsLockByIndex` mutation. */\nexport type UpdateKnexMigrationsLockByIndexInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `KnexMigrationsLock` being updated. */\n  knexMigrationsLockPatch: KnexMigrationsLockPatch;\n  index: Scalars['Int'];\n};\n\n/** All input for the `updateKnexMigrationsLock` mutation. */\nexport type UpdateKnexMigrationsLockInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `KnexMigrationsLock` to be updated. */\n  nodeId: Scalars['ID'];\n  /** An object where the defined keys will be set on the `KnexMigrationsLock` being updated. */\n  knexMigrationsLockPatch: KnexMigrationsLockPatch;\n};\n\n/** The output of our update `KnexMigrationsLock` mutation. */\nexport type UpdateKnexMigrationsLockPayload = {\n  __typename?: 'UpdateKnexMigrationsLockPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `KnexMigrationsLock` that was updated by this mutation. */\n  knexMigrationsLock?: Maybe<KnexMigrationsLock>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `KnexMigrationsLock`. May be used by Relay 1. */\n  knexMigrationsLockEdge?: Maybe<KnexMigrationsLocksEdge>;\n};\n\n\n/** The output of our update `KnexMigrationsLock` mutation. */\nexport type UpdateKnexMigrationsLockPayloadKnexMigrationsLockEdgeArgs = {\n  orderBy?: Maybe<Array<KnexMigrationsLocksOrderBy>>;\n};\n\n/** All input for the `updateLanguageById` mutation. */\nexport type UpdateLanguageByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Language` being updated. */\n  languagePatch: LanguagePatch;\n  id: Scalars['UUID'];\n};\n\n/** The output of our update `Language` mutation. */\nexport type UpdateLanguagePayload = {\n  __typename?: 'UpdateLanguagePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Language` that was updated by this mutation. */\n  language?: Maybe<Language>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Language`. May be used by Relay 1. */\n  languageEdge?: Maybe<LanguagesEdge>;\n};\n\n\n/** The output of our update `Language` mutation. */\nexport type UpdateLanguagePayloadLanguageEdgeArgs = {\n  orderBy?: Maybe<Array<LanguagesOrderBy>>;\n};\n\n/** All input for the `updateMinionById` mutation. */\nexport type UpdateMinionByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Minion` being updated. */\n  minionPatch: MinionPatch;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `updateMinionByUserName` mutation. */\nexport type UpdateMinionByUserNameInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Minion` being updated. */\n  minionPatch: MinionPatch;\n  userName: Scalars['String'];\n};\n\n/** All input for the `updateMinion` mutation. */\nexport type UpdateMinionInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `Minion` to be updated. */\n  nodeId: Scalars['ID'];\n  /** An object where the defined keys will be set on the `Minion` being updated. */\n  minionPatch: MinionPatch;\n};\n\n/** The output of our update `Minion` mutation. */\nexport type UpdateMinionPayload = {\n  __typename?: 'UpdateMinionPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Minion` that was updated by this mutation. */\n  minion?: Maybe<Minion>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Minion`. May be used by Relay 1. */\n  minionEdge?: Maybe<MinionsEdge>;\n};\n\n\n/** The output of our update `Minion` mutation. */\nexport type UpdateMinionPayloadMinionEdgeArgs = {\n  orderBy?: Maybe<Array<MinionsOrderBy>>;\n};\n\n/** All input for the `updateRaceById` mutation. */\nexport type UpdateRaceByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Race` being updated. */\n  racePatch: RacePatch;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `updateRaceFeatureById` mutation. */\nexport type UpdateRaceFeatureByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `RaceFeature` being updated. */\n  raceFeaturePatch: RaceFeaturePatch;\n  id: Scalars['UUID'];\n};\n\n/** The output of our update `RaceFeature` mutation. */\nexport type UpdateRaceFeaturePayload = {\n  __typename?: 'UpdateRaceFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `RaceFeature` that was updated by this mutation. */\n  raceFeature?: Maybe<RaceFeature>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Race` that is related to this `RaceFeature`. */\n  raceByRaceId?: Maybe<Race>;\n  /** Reads a single `RacialFeature` that is related to this `RaceFeature`. */\n  racialFeatureByRacialFeatureId?: Maybe<RacialFeature>;\n  /** An edge for our `RaceFeature`. May be used by Relay 1. */\n  raceFeatureEdge?: Maybe<RaceFeaturesEdge>;\n};\n\n\n/** The output of our update `RaceFeature` mutation. */\nexport type UpdateRaceFeaturePayloadRaceFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<RaceFeaturesOrderBy>>;\n};\n\n/** The output of our update `Race` mutation. */\nexport type UpdateRacePayload = {\n  __typename?: 'UpdateRacePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Race` that was updated by this mutation. */\n  race?: Maybe<Race>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Race`. May be used by Relay 1. */\n  raceEdge?: Maybe<RacesEdge>;\n};\n\n\n/** The output of our update `Race` mutation. */\nexport type UpdateRacePayloadRaceEdgeArgs = {\n  orderBy?: Maybe<Array<RacesOrderBy>>;\n};\n\n/** All input for the `updateRacialFeatureById` mutation. */\nexport type UpdateRacialFeatureByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `RacialFeature` being updated. */\n  racialFeaturePatch: RacialFeaturePatch;\n  id: Scalars['UUID'];\n};\n\n/** The output of our update `RacialFeature` mutation. */\nexport type UpdateRacialFeaturePayload = {\n  __typename?: 'UpdateRacialFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `RacialFeature` that was updated by this mutation. */\n  racialFeature?: Maybe<RacialFeature>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `RacialFeature`. May be used by Relay 1. */\n  racialFeatureEdge?: Maybe<RacialFeaturesEdge>;\n};\n\n\n/** The output of our update `RacialFeature` mutation. */\nexport type UpdateRacialFeaturePayloadRacialFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<RacialFeaturesOrderBy>>;\n};\n\n/** All input for the `updateSkillById` mutation. */\nexport type UpdateSkillByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Skill` being updated. */\n  skillPatch: SkillPatch;\n  id: Scalars['UUID'];\n};\n\n/** The output of our update `Skill` mutation. */\nexport type UpdateSkillPayload = {\n  __typename?: 'UpdateSkillPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Skill` that was updated by this mutation. */\n  skill?: Maybe<Skill>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Attribute` that is related to this `Skill`. */\n  attributeByAttrId?: Maybe<Attribute>;\n  /** An edge for our `Skill`. May be used by Relay 1. */\n  skillEdge?: Maybe<SkillsEdge>;\n};\n\n\n/** The output of our update `Skill` mutation. */\nexport type UpdateSkillPayloadSkillEdgeArgs = {\n  orderBy?: Maybe<Array<SkillsOrderBy>>;\n};\n\n/** All input for the `updateSpellById` mutation. */\nexport type UpdateSpellByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Spell` being updated. */\n  spellPatch: SpellPatch;\n  id: Scalars['UUID'];\n};\n\n/** The output of our update `Spell` mutation. */\nexport type UpdateSpellPayload = {\n  __typename?: 'UpdateSpellPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Spell` that was updated by this mutation. */\n  spell?: Maybe<Spell>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `Spell`. May be used by Relay 1. */\n  spellEdge?: Maybe<SpellsEdge>;\n};\n\n\n/** The output of our update `Spell` mutation. */\nexport type UpdateSpellPayloadSpellEdgeArgs = {\n  orderBy?: Maybe<Array<SpellsOrderBy>>;\n};\n\n/** All input for the `updateSpellSlugById` mutation. */\nexport type UpdateSpellSlugByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `SpellSlug` being updated. */\n  spellSlugPatch: SpellSlugPatch;\n  id: Scalars['UUID'];\n};\n\n/** The output of our update `SpellSlug` mutation. */\nexport type UpdateSpellSlugPayload = {\n  __typename?: 'UpdateSpellSlugPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `SpellSlug` that was updated by this mutation. */\n  spellSlug?: Maybe<SpellSlug>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** An edge for our `SpellSlug`. May be used by Relay 1. */\n  spellSlugEdge?: Maybe<SpellSlugsEdge>;\n};\n\n\n/** The output of our update `SpellSlug` mutation. */\nexport type UpdateSpellSlugPayloadSpellSlugEdgeArgs = {\n  orderBy?: Maybe<Array<SpellSlugsOrderBy>>;\n};\n\n/** All input for the `updateSubclassById` mutation. */\nexport type UpdateSubclassByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Subclass` being updated. */\n  subclassPatch: SubclassPatch;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `updateSubclassFeatureById` mutation. */\nexport type UpdateSubclassFeatureByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `SubclassFeature` being updated. */\n  subclassFeaturePatch: SubclassFeaturePatch;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `updateSubclassFeature` mutation. */\nexport type UpdateSubclassFeatureInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `SubclassFeature` to be updated. */\n  nodeId: Scalars['ID'];\n  /** An object where the defined keys will be set on the `SubclassFeature` being updated. */\n  subclassFeaturePatch: SubclassFeaturePatch;\n};\n\n/** The output of our update `SubclassFeature` mutation. */\nexport type UpdateSubclassFeaturePayload = {\n  __typename?: 'UpdateSubclassFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `SubclassFeature` that was updated by this mutation. */\n  subclassFeature?: Maybe<SubclassFeature>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Class` that is related to this `SubclassFeature`. */\n  classByClassId?: Maybe<Class>;\n  /** An edge for our `SubclassFeature`. May be used by Relay 1. */\n  subclassFeatureEdge?: Maybe<SubclassFeaturesEdge>;\n};\n\n\n/** The output of our update `SubclassFeature` mutation. */\nexport type UpdateSubclassFeaturePayloadSubclassFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<SubclassFeaturesOrderBy>>;\n};\n\n/** All input for the `updateSubclass` mutation. */\nexport type UpdateSubclassInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `Subclass` to be updated. */\n  nodeId: Scalars['ID'];\n  /** An object where the defined keys will be set on the `Subclass` being updated. */\n  subclassPatch: SubclassPatch;\n};\n\n/** The output of our update `Subclass` mutation. */\nexport type UpdateSubclassPayload = {\n  __typename?: 'UpdateSubclassPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Subclass` that was updated by this mutation. */\n  subclass?: Maybe<Subclass>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Class` that is related to this `Subclass`. */\n  classByClassId?: Maybe<Class>;\n  /** An edge for our `Subclass`. May be used by Relay 1. */\n  subclassEdge?: Maybe<SubclassesEdge>;\n};\n\n\n/** The output of our update `Subclass` mutation. */\nexport type UpdateSubclassPayloadSubclassEdgeArgs = {\n  orderBy?: Maybe<Array<SubclassesOrderBy>>;\n};\n\n/** All input for the `updateSubraceById` mutation. */\nexport type UpdateSubraceByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Subrace` being updated. */\n  subracePatch: SubracePatch;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `updateSubraceFeatureById` mutation. */\nexport type UpdateSubraceFeatureByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `SubraceFeature` being updated. */\n  subraceFeaturePatch: SubraceFeaturePatch;\n  id: Scalars['UUID'];\n};\n\n/** The output of our update `SubraceFeature` mutation. */\nexport type UpdateSubraceFeaturePayload = {\n  __typename?: 'UpdateSubraceFeaturePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `SubraceFeature` that was updated by this mutation. */\n  subraceFeature?: Maybe<SubraceFeature>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Subrace` that is related to this `SubraceFeature`. */\n  subraceBySubraceId?: Maybe<Subrace>;\n  /** Reads a single `RacialFeature` that is related to this `SubraceFeature`. */\n  racialFeatureByRacialFeatureId?: Maybe<RacialFeature>;\n  /** An edge for our `SubraceFeature`. May be used by Relay 1. */\n  subraceFeatureEdge?: Maybe<SubraceFeaturesEdge>;\n};\n\n\n/** The output of our update `SubraceFeature` mutation. */\nexport type UpdateSubraceFeaturePayloadSubraceFeatureEdgeArgs = {\n  orderBy?: Maybe<Array<SubraceFeaturesOrderBy>>;\n};\n\n/** The output of our update `Subrace` mutation. */\nexport type UpdateSubracePayload = {\n  __typename?: 'UpdateSubracePayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Subrace` that was updated by this mutation. */\n  subrace?: Maybe<Subrace>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Race` that is related to this `Subrace`. */\n  raceByRaceId?: Maybe<Race>;\n  /** An edge for our `Subrace`. May be used by Relay 1. */\n  subraceEdge?: Maybe<SubracesEdge>;\n};\n\n\n/** The output of our update `Subrace` mutation. */\nexport type UpdateSubracePayloadSubraceEdgeArgs = {\n  orderBy?: Maybe<Array<SubracesOrderBy>>;\n};\n\n/** All input for the `updateWizardById` mutation. */\nexport type UpdateWizardByIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Wizard` being updated. */\n  wizardPatch: WizardPatch;\n  id: Scalars['UUID'];\n};\n\n/** All input for the `updateWizardByUserId` mutation. */\nexport type UpdateWizardByUserIdInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** An object where the defined keys will be set on the `Wizard` being updated. */\n  wizardPatch: WizardPatch;\n  userId: Scalars['UUID'];\n};\n\n/** All input for the `updateWizard` mutation. */\nexport type UpdateWizardInput = {\n  /**\n   * An arbitrary string value with no semantic meaning. Will be included in the\n   * payload verbatim. May be used to track mutations by the client.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The globally unique `ID` which will identify a single `Wizard` to be updated. */\n  nodeId: Scalars['ID'];\n  /** An object where the defined keys will be set on the `Wizard` being updated. */\n  wizardPatch: WizardPatch;\n};\n\n/** The output of our update `Wizard` mutation. */\nexport type UpdateWizardPayload = {\n  __typename?: 'UpdateWizardPayload';\n  /**\n   * The exact same `clientMutationId` that was provided in the mutation input,\n   * unchanged and unused. May be used by a client to track mutations.\n   */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The `Wizard` that was updated by this mutation. */\n  wizard?: Maybe<Wizard>;\n  /** Our root query field type. Allows us to run any query from our mutation payload. */\n  query?: Maybe<Query>;\n  /** Reads a single `Minion` that is related to this `Wizard`. */\n  minionByUserId?: Maybe<Minion>;\n  /** An edge for our `Wizard`. May be used by Relay 1. */\n  wizardEdge?: Maybe<WizardsEdge>;\n};\n\n\n/** The output of our update `Wizard` mutation. */\nexport type UpdateWizardPayloadWizardEdgeArgs = {\n  orderBy?: Maybe<Array<WizardsOrderBy>>;\n};\n\nexport enum UserRole {\n  Wizard = 'WIZARD',\n  Minion = 'MINION'\n}\n\nexport type Wizard = Node & {\n  __typename?: 'Wizard';\n  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */\n  nodeId: Scalars['ID'];\n  id: Scalars['UUID'];\n  userId?: Maybe<Scalars['UUID']>;\n  /** Reads a single `Minion` that is related to this `Wizard`. */\n  minionByUserId?: Maybe<Minion>;\n};\n\n/** A condition to be used against `Wizard` object types. All fields are tested for equality and combined with a logical ‘and.’ */\nexport type WizardCondition = {\n  /** Checks for equality with the object’s `id` field. */\n  id?: Maybe<Scalars['UUID']>;\n  /** Checks for equality with the object’s `userId` field. */\n  userId?: Maybe<Scalars['UUID']>;\n};\n\n/** An input for mutations affecting `Wizard` */\nexport type WizardInput = {\n  id?: Maybe<Scalars['UUID']>;\n  userId?: Maybe<Scalars['UUID']>;\n};\n\n/** Represents an update to a `Wizard`. Fields that are set will be updated. */\nexport type WizardPatch = {\n  id?: Maybe<Scalars['UUID']>;\n  userId?: Maybe<Scalars['UUID']>;\n};\n\n/** A connection to a list of `Wizard` values. */\nexport type WizardsConnection = {\n  __typename?: 'WizardsConnection';\n  /** A list of `Wizard` objects. */\n  nodes: Array<Maybe<Wizard>>;\n  /** A list of edges which contains the `Wizard` and cursor to aid in pagination. */\n  edges: Array<WizardsEdge>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The count of *all* `Wizard` you could get from the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A `Wizard` edge in the connection. */\nexport type WizardsEdge = {\n  __typename?: 'WizardsEdge';\n  /** A cursor for use in pagination. */\n  cursor?: Maybe<Scalars['Cursor']>;\n  /** The `Wizard` at the end of the edge. */\n  node?: Maybe<Wizard>;\n};\n\n/** Methods to use when ordering `Wizard`. */\nexport enum WizardsOrderBy {\n  Natural = 'NATURAL',\n  IdAsc = 'ID_ASC',\n  IdDesc = 'ID_DESC',\n  UserIdAsc = 'USER_ID_ASC',\n  UserIdDesc = 'USER_ID_DESC',\n  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',\n  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'\n}\n\nexport type SigninMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type SigninMutation = (\n  { __typename?: 'Mutation' }\n  & { signin?: Maybe<(\n    { __typename?: 'SigninPayload' }\n    & Pick<SigninPayload, 'jwtToken'>\n  )> }\n);\n\nexport type SignUpMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type SignUpMutation = (\n  { __typename?: 'Mutation' }\n  & { signup?: Maybe<(\n    { __typename?: 'SignupPayload' }\n    & Pick<SignupPayload, 'boolean'>\n  )> }\n);\n\nexport type AllAttributesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllAttributesQuery = (\n  { __typename?: 'Query' }\n  & { allAttributes?: Maybe<(\n    { __typename?: 'AttributesConnection' }\n    & { attributes: Array<Maybe<(\n      { __typename?: 'Attribute' }\n      & Pick<Attribute, 'attribute'>\n      & { skillsByAttrId: (\n        { __typename?: 'SkillsConnection' }\n        & { nodes: Array<Maybe<(\n          { __typename?: 'Skill' }\n          & Pick<Skill, 'skill'>\n        )>> }\n      ) }\n    )>> }\n  )> }\n);\n\nexport type AllBgFeaturesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllBgFeaturesQuery = (\n  { __typename?: 'Query' }\n  & { allBgFeatures?: Maybe<(\n    { __typename?: 'BgFeaturesConnection' }\n    & { bgFeatures: Array<Maybe<(\n      { __typename?: 'BgFeature' }\n      & Pick<BgFeature, 'conferringBg' | 'description' | 'name'>\n    )>> }\n  )> }\n);\n\nexport type AllBgsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllBgsQuery = (\n  { __typename?: 'Query' }\n  & { allBgs?: Maybe<(\n    { __typename?: 'BgsConnection' }\n    & { nodes: Array<Maybe<(\n      { __typename?: 'Bg' }\n      & Pick<Bg, 'name' | 'description' | 'numberOfExtraLanguages' | 'languageOptions' | 'numberOfSkillsGranted' | 'skillOptions' | 'numberOfToolsGranted' | 'toolOptions'>\n      & { bgFeatureByAlternateBackgroundFeature?: Maybe<(\n        { __typename?: 'BgFeature' }\n        & Pick<BgFeature, 'name' | 'description'>\n      )>, bgFeatureByBackgroundFeature?: Maybe<(\n        { __typename?: 'BgFeature' }\n        & Pick<BgFeature, 'name' | 'description'>\n      )> }\n    )>> }\n  )> }\n);\n\nexport type AllClassNamesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllClassNamesQuery = (\n  { __typename?: 'Query' }\n  & { allClasses?: Maybe<(\n    { __typename?: 'ClassesConnection' }\n    & { nodes: Array<Maybe<(\n      { __typename?: 'Class' }\n      & Pick<Class, 'name' | 'id'>\n    )>> }\n  )> }\n);\n\nexport type AllClassesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllClassesQuery = (\n  { __typename?: 'Query' }\n  & { allClasses?: Maybe<(\n    { __typename?: 'ClassesConnection' }\n    & { nodes: Array<Maybe<(\n      { __typename?: 'Class' }\n      & Pick<Class, 'name' | 'id' | 'cantripProgression' | 'casterProgression' | 'classFeatures' | 'hdFaces' | 'hdNumber' | 'meta' | 'multiclassing' | 'optionalFeatureProgression' | 'page' | 'preparedSpells' | 'proficiency' | 'source' | 'spellcastingAbility' | 'spellsKnownProgression' | 'spellsKnownProgressionFixed' | 'spellsKnownProgressionFixedAllowLowerLevel' | 'spellsKnownProgressionFixedByLevel' | 'srd' | 'startingEquipment' | 'startingProficiencies' | 'subclassTitle'>\n      & { subclassesByClassId: (\n        { __typename?: 'SubclassesConnection' }\n        & { nodes: Array<Maybe<(\n          { __typename?: 'Subclass' }\n          & Pick<Subclass, 'additionalSpells' | 'cantripProgression' | 'casterProgression' | 'name' | 'page' | 'shortName' | 'source' | 'spellcastingAbility' | 'spellsKnownProgression' | 'subclassFeatures' | 'subclassTableGroups' | 'id' | 'preparedSpells'>\n        )>> }\n      ), subclassFeaturesByClassId: (\n        { __typename?: 'SubclassFeaturesConnection' }\n        & { nodes: Array<Maybe<(\n          { __typename?: 'SubclassFeature' }\n          & Pick<SubclassFeature, 'entries' | 'id' | 'level' | 'isClassFeatureVariant' | 'nodeId' | 'name' | 'page' | 'subclassShortName' | 'subclassSource' | 'source'>\n        )>> }\n      ), classFeaturesByClassId: (\n        { __typename?: 'ClassFeaturesConnection' }\n        & { nodes: Array<Maybe<(\n          { __typename?: 'ClassFeature' }\n          & Pick<ClassFeature, 'id' | 'entries' | 'classSource' | 'isClassFeatureVariant' | 'level' | 'name' | 'page' | 'source'>\n        )>> }\n      ) }\n    )>> }\n  )> }\n);\n\nexport type AllEquipmentQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllEquipmentQuery = (\n  { __typename?: 'Query' }\n  & { allEquipment?: Maybe<(\n    { __typename?: 'EquipmentConnection' }\n    & { items: Array<Maybe<(\n      { __typename?: 'Equipment' }\n      & Pick<Equipment, 'name' | 'type'>\n    )>> }\n  )> }\n);\n\nexport type AllFeatsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllFeatsQuery = (\n  { __typename?: 'Query' }\n  & { allFeats?: Maybe<(\n    { __typename?: 'FeatsConnection' }\n    & { feats: Array<Maybe<(\n      { __typename?: 'Feat' }\n      & Pick<Feat, 'id' | 'name' | 'desc' | 'points' | 'prereq' | 'scores'>\n    )>> }\n  )> }\n);\n\nexport type GetAllLanguagesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllLanguagesQuery = (\n  { __typename?: 'Query' }\n  & { allLanguages?: Maybe<(\n    { __typename?: 'LanguagesConnection' }\n    & { languages: Array<Maybe<(\n      { __typename?: 'Language' }\n      & Pick<Language, 'name' | 'script' | 'type' | 'typicalSpeakers'>\n    )>> }\n  )> }\n);\n\nexport type GetAllRacesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllRacesQuery = (\n  { __typename?: 'Query' }\n  & { allRaces?: Maybe<(\n    { __typename?: 'RacesConnection' }\n    & { nodes: Array<Maybe<(\n      { __typename?: 'Race' }\n      & Pick<Race, 'id' | 'name' | 'movement' | 'lifespan' | 'languages' | 'asis' | 'alignment' | 'size' | 'summary'>\n      & { raceFeaturesByRaceId: (\n        { __typename?: 'RaceFeaturesConnection' }\n        & { nodes: Array<Maybe<(\n          { __typename?: 'RaceFeature' }\n          & { racialFeatureByRacialFeatureId?: Maybe<(\n            { __typename?: 'RacialFeature' }\n            & Pick<RacialFeature, 'name' | 'description'>\n          )> }\n        )>> }\n      ), subracesByRaceId: (\n        { __typename?: 'SubracesConnection' }\n        & { nodes: Array<Maybe<(\n          { __typename?: 'Subrace' }\n          & Pick<Subrace, 'id' | 'name' | 'summary' | 'asis'>\n          & { subraceFeaturesBySubraceId: (\n            { __typename?: 'SubraceFeaturesConnection' }\n            & { nodes: Array<Maybe<(\n              { __typename?: 'SubraceFeature' }\n              & { racialFeatureByRacialFeatureId?: Maybe<(\n                { __typename?: 'RacialFeature' }\n                & Pick<RacialFeature, 'name' | 'description'>\n              )> }\n            )>> }\n          ) }\n        )>> }\n      ) }\n    )>> }\n  )> }\n);\n\nexport type AllSkillsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllSkillsQuery = (\n  { __typename?: 'Query' }\n  & { allSkills?: Maybe<(\n    { __typename?: 'SkillsConnection' }\n    & { skills: Array<Maybe<(\n      { __typename?: 'Skill' }\n      & Pick<Skill, 'skill'>\n      & { attributeByAttrId?: Maybe<(\n        { __typename?: 'Attribute' }\n        & Pick<Attribute, 'attribute'>\n      )> }\n    )>> }\n  )> }\n);\n\nexport type GetAllSpellsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllSpellsQuery = (\n  { __typename?: 'Query' }\n  & { allSpells?: Maybe<(\n    { __typename?: 'SpellsConnection' }\n    & { spells: Array<Maybe<(\n      { __typename?: 'Spell' }\n      & Pick<Spell, 'archetype' | 'castingTime' | 'circles' | 'components' | 'concentration' | 'desc' | 'dndClass' | 'duration' | 'higherLevel' | 'levelInt' | 'level' | 'material' | 'name' | 'page' | 'range' | 'ritual' | 'school' | 'slug'>\n    )>> }\n  )> }\n);\n\nexport type ClassByIdQueryVariables = Exact<{\n  id: Scalars['UUID'];\n}>;\n\n\nexport type ClassByIdQuery = (\n  { __typename?: 'Query' }\n  & { classById?: Maybe<(\n    { __typename?: 'Class' }\n    & Pick<Class, 'name' | 'id' | 'cantripProgression' | 'casterProgression' | 'classFeatures' | 'hdFaces' | 'hdNumber' | 'meta' | 'multiclassing' | 'optionalFeatureProgression' | 'page' | 'preparedSpells' | 'proficiency' | 'source' | 'spellcastingAbility' | 'spellsKnownProgression' | 'spellsKnownProgressionFixed' | 'spellsKnownProgressionFixedAllowLowerLevel' | 'spellsKnownProgressionFixedByLevel' | 'srd' | 'startingEquipment' | 'startingProficiencies' | 'subclassTitle'>\n    & { subclassesByClassId: (\n      { __typename?: 'SubclassesConnection' }\n      & { nodes: Array<Maybe<(\n        { __typename?: 'Subclass' }\n        & Pick<Subclass, 'additionalSpells' | 'cantripProgression' | 'casterProgression' | 'name' | 'page' | 'shortName' | 'source' | 'spellcastingAbility' | 'spellsKnownProgression' | 'subclassFeatures' | 'subclassTableGroups' | 'id' | 'preparedSpells'>\n      )>> }\n    ), subclassFeaturesByClassId: (\n      { __typename?: 'SubclassFeaturesConnection' }\n      & { nodes: Array<Maybe<(\n        { __typename?: 'SubclassFeature' }\n        & Pick<SubclassFeature, 'entries' | 'id' | 'level' | 'isClassFeatureVariant' | 'nodeId' | 'name' | 'page' | 'subclassShortName' | 'subclassSource' | 'source'>\n      )>> }\n    ), classFeaturesByClassId: (\n      { __typename?: 'ClassFeaturesConnection' }\n      & { nodes: Array<Maybe<(\n        { __typename?: 'ClassFeature' }\n        & Pick<ClassFeature, 'id' | 'entries' | 'classSource' | 'isClassFeatureVariant' | 'level' | 'name' | 'page' | 'source' | 'hasOptions'>\n      )>> }\n    ) }\n  )> }\n);\n\n\nexport const SigninDocument = gql`\n    mutation Signin($username: String!, $password: String!) {\n  signin(input: {username: $username, password: $password}) {\n    jwtToken\n  }\n}\n    `;\nexport type SigninMutationFn = Apollo.MutationFunction<SigninMutation, SigninMutationVariables>;\n\n/**\n * __useSigninMutation__\n *\n * To run a mutation, you first call `useSigninMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSigninMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signinMutation, { data, loading, error }] = useSigninMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useSigninMutation(baseOptions?: Apollo.MutationHookOptions<SigninMutation, SigninMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<SigninMutation, SigninMutationVariables>(SigninDocument, options);\n      }\nexport type SigninMutationHookResult = ReturnType<typeof useSigninMutation>;\nexport type SigninMutationResult = Apollo.MutationResult<SigninMutation>;\nexport type SigninMutationOptions = Apollo.BaseMutationOptions<SigninMutation, SigninMutationVariables>;\nexport const SignUpDocument = gql`\n    mutation SignUp($username: String!, $password: String!) {\n  signup(input: {username: $username, password: $password}) {\n    boolean\n  }\n}\n    `;\nexport type SignUpMutationFn = Apollo.MutationFunction<SignUpMutation, SignUpMutationVariables>;\n\n/**\n * __useSignUpMutation__\n *\n * To run a mutation, you first call `useSignUpMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignUpMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signUpMutation, { data, loading, error }] = useSignUpMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useSignUpMutation(baseOptions?: Apollo.MutationHookOptions<SignUpMutation, SignUpMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<SignUpMutation, SignUpMutationVariables>(SignUpDocument, options);\n      }\nexport type SignUpMutationHookResult = ReturnType<typeof useSignUpMutation>;\nexport type SignUpMutationResult = Apollo.MutationResult<SignUpMutation>;\nexport type SignUpMutationOptions = Apollo.BaseMutationOptions<SignUpMutation, SignUpMutationVariables>;\nexport const AllAttributesDocument = gql`\n    query AllAttributes {\n  allAttributes {\n    attributes: nodes {\n      attribute\n      skillsByAttrId {\n        nodes {\n          skill\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useAllAttributesQuery__\n *\n * To run a query within a React component, call `useAllAttributesQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllAttributesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllAttributesQuery(baseOptions?: Apollo.QueryHookOptions<AllAttributesQuery, AllAttributesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllAttributesQuery, AllAttributesQueryVariables>(AllAttributesDocument, options);\n      }\nexport function useAllAttributesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllAttributesQuery, AllAttributesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllAttributesQuery, AllAttributesQueryVariables>(AllAttributesDocument, options);\n        }\nexport type AllAttributesQueryHookResult = ReturnType<typeof useAllAttributesQuery>;\nexport type AllAttributesLazyQueryHookResult = ReturnType<typeof useAllAttributesLazyQuery>;\nexport type AllAttributesQueryResult = Apollo.QueryResult<AllAttributesQuery, AllAttributesQueryVariables>;\nexport const AllBgFeaturesDocument = gql`\n    query AllBgFeatures {\n  allBgFeatures {\n    bgFeatures: nodes {\n      conferringBg\n      description\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useAllBgFeaturesQuery__\n *\n * To run a query within a React component, call `useAllBgFeaturesQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllBgFeaturesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllBgFeaturesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllBgFeaturesQuery(baseOptions?: Apollo.QueryHookOptions<AllBgFeaturesQuery, AllBgFeaturesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllBgFeaturesQuery, AllBgFeaturesQueryVariables>(AllBgFeaturesDocument, options);\n      }\nexport function useAllBgFeaturesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllBgFeaturesQuery, AllBgFeaturesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllBgFeaturesQuery, AllBgFeaturesQueryVariables>(AllBgFeaturesDocument, options);\n        }\nexport type AllBgFeaturesQueryHookResult = ReturnType<typeof useAllBgFeaturesQuery>;\nexport type AllBgFeaturesLazyQueryHookResult = ReturnType<typeof useAllBgFeaturesLazyQuery>;\nexport type AllBgFeaturesQueryResult = Apollo.QueryResult<AllBgFeaturesQuery, AllBgFeaturesQueryVariables>;\nexport const AllBgsDocument = gql`\n    query AllBgs {\n  allBgs {\n    nodes {\n      name\n      description\n      numberOfExtraLanguages\n      languageOptions\n      numberOfSkillsGranted\n      skillOptions\n      numberOfToolsGranted\n      toolOptions\n      bgFeatureByAlternateBackgroundFeature {\n        name\n        description\n      }\n      bgFeatureByBackgroundFeature {\n        name\n        description\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useAllBgsQuery__\n *\n * To run a query within a React component, call `useAllBgsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllBgsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllBgsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllBgsQuery(baseOptions?: Apollo.QueryHookOptions<AllBgsQuery, AllBgsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllBgsQuery, AllBgsQueryVariables>(AllBgsDocument, options);\n      }\nexport function useAllBgsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllBgsQuery, AllBgsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllBgsQuery, AllBgsQueryVariables>(AllBgsDocument, options);\n        }\nexport type AllBgsQueryHookResult = ReturnType<typeof useAllBgsQuery>;\nexport type AllBgsLazyQueryHookResult = ReturnType<typeof useAllBgsLazyQuery>;\nexport type AllBgsQueryResult = Apollo.QueryResult<AllBgsQuery, AllBgsQueryVariables>;\nexport const AllClassNamesDocument = gql`\n    query AllClassNames {\n  allClasses(orderBy: NAME_ASC) {\n    nodes {\n      name\n      id\n    }\n  }\n}\n    `;\n\n/**\n * __useAllClassNamesQuery__\n *\n * To run a query within a React component, call `useAllClassNamesQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllClassNamesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllClassNamesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllClassNamesQuery(baseOptions?: Apollo.QueryHookOptions<AllClassNamesQuery, AllClassNamesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllClassNamesQuery, AllClassNamesQueryVariables>(AllClassNamesDocument, options);\n      }\nexport function useAllClassNamesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllClassNamesQuery, AllClassNamesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllClassNamesQuery, AllClassNamesQueryVariables>(AllClassNamesDocument, options);\n        }\nexport type AllClassNamesQueryHookResult = ReturnType<typeof useAllClassNamesQuery>;\nexport type AllClassNamesLazyQueryHookResult = ReturnType<typeof useAllClassNamesLazyQuery>;\nexport type AllClassNamesQueryResult = Apollo.QueryResult<AllClassNamesQuery, AllClassNamesQueryVariables>;\nexport const AllClassesDocument = gql`\n    query AllClasses {\n  allClasses(orderBy: NAME_ASC) {\n    nodes {\n      name\n      id\n      cantripProgression\n      casterProgression\n      classFeatures\n      hdFaces\n      hdNumber\n      meta\n      multiclassing\n      optionalFeatureProgression\n      page\n      preparedSpells\n      proficiency\n      source\n      spellcastingAbility\n      spellsKnownProgression\n      spellsKnownProgressionFixed\n      spellsKnownProgressionFixedAllowLowerLevel\n      spellsKnownProgressionFixedByLevel\n      srd\n      startingEquipment\n      startingProficiencies\n      subclassTitle\n      subclassesByClassId {\n        nodes {\n          additionalSpells\n          cantripProgression\n          casterProgression\n          name\n          page\n          shortName\n          source\n          spellcastingAbility\n          spellsKnownProgression\n          subclassFeatures\n          subclassTableGroups\n          id\n          preparedSpells\n        }\n      }\n      subclassFeaturesByClassId(orderBy: NAME_ASC) {\n        nodes {\n          entries\n          id\n          level\n          isClassFeatureVariant\n          nodeId\n          name\n          page\n          subclassShortName\n          subclassSource\n          source\n        }\n      }\n      classFeaturesByClassId(condition: {}) {\n        nodes {\n          id\n          entries\n          classSource\n          isClassFeatureVariant\n          level\n          name\n          page\n          source\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useAllClassesQuery__\n *\n * To run a query within a React component, call `useAllClassesQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllClassesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllClassesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllClassesQuery(baseOptions?: Apollo.QueryHookOptions<AllClassesQuery, AllClassesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllClassesQuery, AllClassesQueryVariables>(AllClassesDocument, options);\n      }\nexport function useAllClassesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllClassesQuery, AllClassesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllClassesQuery, AllClassesQueryVariables>(AllClassesDocument, options);\n        }\nexport type AllClassesQueryHookResult = ReturnType<typeof useAllClassesQuery>;\nexport type AllClassesLazyQueryHookResult = ReturnType<typeof useAllClassesLazyQuery>;\nexport type AllClassesQueryResult = Apollo.QueryResult<AllClassesQuery, AllClassesQueryVariables>;\nexport const AllEquipmentDocument = gql`\n    query AllEquipment {\n  allEquipment {\n    items: nodes {\n      name\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useAllEquipmentQuery__\n *\n * To run a query within a React component, call `useAllEquipmentQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllEquipmentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllEquipmentQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllEquipmentQuery(baseOptions?: Apollo.QueryHookOptions<AllEquipmentQuery, AllEquipmentQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllEquipmentQuery, AllEquipmentQueryVariables>(AllEquipmentDocument, options);\n      }\nexport function useAllEquipmentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllEquipmentQuery, AllEquipmentQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllEquipmentQuery, AllEquipmentQueryVariables>(AllEquipmentDocument, options);\n        }\nexport type AllEquipmentQueryHookResult = ReturnType<typeof useAllEquipmentQuery>;\nexport type AllEquipmentLazyQueryHookResult = ReturnType<typeof useAllEquipmentLazyQuery>;\nexport type AllEquipmentQueryResult = Apollo.QueryResult<AllEquipmentQuery, AllEquipmentQueryVariables>;\nexport const AllFeatsDocument = gql`\n    query AllFeats {\n  allFeats {\n    feats: nodes {\n      id\n      name\n      desc\n      points\n      prereq\n      scores\n    }\n  }\n}\n    `;\n\n/**\n * __useAllFeatsQuery__\n *\n * To run a query within a React component, call `useAllFeatsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllFeatsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllFeatsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllFeatsQuery(baseOptions?: Apollo.QueryHookOptions<AllFeatsQuery, AllFeatsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllFeatsQuery, AllFeatsQueryVariables>(AllFeatsDocument, options);\n      }\nexport function useAllFeatsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllFeatsQuery, AllFeatsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllFeatsQuery, AllFeatsQueryVariables>(AllFeatsDocument, options);\n        }\nexport type AllFeatsQueryHookResult = ReturnType<typeof useAllFeatsQuery>;\nexport type AllFeatsLazyQueryHookResult = ReturnType<typeof useAllFeatsLazyQuery>;\nexport type AllFeatsQueryResult = Apollo.QueryResult<AllFeatsQuery, AllFeatsQueryVariables>;\nexport const GetAllLanguagesDocument = gql`\n    query GetAllLanguages {\n  allLanguages {\n    languages: nodes {\n      name\n      script\n      type\n      typicalSpeakers\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllLanguagesQuery__\n *\n * To run a query within a React component, call `useGetAllLanguagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllLanguagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllLanguagesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllLanguagesQuery(baseOptions?: Apollo.QueryHookOptions<GetAllLanguagesQuery, GetAllLanguagesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetAllLanguagesQuery, GetAllLanguagesQueryVariables>(GetAllLanguagesDocument, options);\n      }\nexport function useGetAllLanguagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllLanguagesQuery, GetAllLanguagesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetAllLanguagesQuery, GetAllLanguagesQueryVariables>(GetAllLanguagesDocument, options);\n        }\nexport type GetAllLanguagesQueryHookResult = ReturnType<typeof useGetAllLanguagesQuery>;\nexport type GetAllLanguagesLazyQueryHookResult = ReturnType<typeof useGetAllLanguagesLazyQuery>;\nexport type GetAllLanguagesQueryResult = Apollo.QueryResult<GetAllLanguagesQuery, GetAllLanguagesQueryVariables>;\nexport const GetAllRacesDocument = gql`\n    query GetAllRaces {\n  allRaces {\n    nodes {\n      id\n      name\n      movement\n      lifespan\n      languages\n      asis\n      alignment\n      size\n      summary\n      raceFeaturesByRaceId {\n        nodes {\n          racialFeatureByRacialFeatureId {\n            name\n            description\n          }\n        }\n      }\n      subracesByRaceId {\n        nodes {\n          id\n          name\n          summary\n          asis\n          subraceFeaturesBySubraceId {\n            nodes {\n              racialFeatureByRacialFeatureId {\n                name\n                description\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllRacesQuery__\n *\n * To run a query within a React component, call `useGetAllRacesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllRacesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllRacesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllRacesQuery(baseOptions?: Apollo.QueryHookOptions<GetAllRacesQuery, GetAllRacesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetAllRacesQuery, GetAllRacesQueryVariables>(GetAllRacesDocument, options);\n      }\nexport function useGetAllRacesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllRacesQuery, GetAllRacesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetAllRacesQuery, GetAllRacesQueryVariables>(GetAllRacesDocument, options);\n        }\nexport type GetAllRacesQueryHookResult = ReturnType<typeof useGetAllRacesQuery>;\nexport type GetAllRacesLazyQueryHookResult = ReturnType<typeof useGetAllRacesLazyQuery>;\nexport type GetAllRacesQueryResult = Apollo.QueryResult<GetAllRacesQuery, GetAllRacesQueryVariables>;\nexport const AllSkillsDocument = gql`\n    query AllSkills {\n  allSkills {\n    skills: nodes {\n      skill\n      attributeByAttrId {\n        attribute\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useAllSkillsQuery__\n *\n * To run a query within a React component, call `useAllSkillsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllSkillsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllSkillsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllSkillsQuery(baseOptions?: Apollo.QueryHookOptions<AllSkillsQuery, AllSkillsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllSkillsQuery, AllSkillsQueryVariables>(AllSkillsDocument, options);\n      }\nexport function useAllSkillsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllSkillsQuery, AllSkillsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllSkillsQuery, AllSkillsQueryVariables>(AllSkillsDocument, options);\n        }\nexport type AllSkillsQueryHookResult = ReturnType<typeof useAllSkillsQuery>;\nexport type AllSkillsLazyQueryHookResult = ReturnType<typeof useAllSkillsLazyQuery>;\nexport type AllSkillsQueryResult = Apollo.QueryResult<AllSkillsQuery, AllSkillsQueryVariables>;\nexport const GetAllSpellsDocument = gql`\n    query GetAllSpells {\n  allSpells {\n    spells: nodes {\n      archetype\n      castingTime\n      circles\n      components\n      concentration\n      desc\n      dndClass\n      duration\n      higherLevel\n      levelInt\n      level\n      material\n      name\n      page\n      range\n      ritual\n      school\n      slug\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllSpellsQuery__\n *\n * To run a query within a React component, call `useGetAllSpellsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllSpellsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllSpellsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllSpellsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllSpellsQuery, GetAllSpellsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetAllSpellsQuery, GetAllSpellsQueryVariables>(GetAllSpellsDocument, options);\n      }\nexport function useGetAllSpellsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllSpellsQuery, GetAllSpellsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetAllSpellsQuery, GetAllSpellsQueryVariables>(GetAllSpellsDocument, options);\n        }\nexport type GetAllSpellsQueryHookResult = ReturnType<typeof useGetAllSpellsQuery>;\nexport type GetAllSpellsLazyQueryHookResult = ReturnType<typeof useGetAllSpellsLazyQuery>;\nexport type GetAllSpellsQueryResult = Apollo.QueryResult<GetAllSpellsQuery, GetAllSpellsQueryVariables>;\nexport const ClassByIdDocument = gql`\n    query ClassById($id: UUID!) {\n  classById(id: $id) {\n    name\n    id\n    cantripProgression\n    casterProgression\n    classFeatures\n    hdFaces\n    hdNumber\n    meta\n    multiclassing\n    optionalFeatureProgression\n    page\n    preparedSpells\n    proficiency\n    source\n    spellcastingAbility\n    spellsKnownProgression\n    spellsKnownProgressionFixed\n    spellsKnownProgressionFixedAllowLowerLevel\n    spellsKnownProgressionFixedByLevel\n    srd\n    startingEquipment\n    startingProficiencies\n    subclassTitle\n    subclassesByClassId {\n      nodes {\n        additionalSpells\n        cantripProgression\n        casterProgression\n        name\n        page\n        shortName\n        source\n        spellcastingAbility\n        spellsKnownProgression\n        subclassFeatures\n        subclassTableGroups\n        id\n        preparedSpells\n      }\n    }\n    subclassFeaturesByClassId(orderBy: NAME_ASC) {\n      nodes {\n        entries\n        id\n        level\n        isClassFeatureVariant\n        nodeId\n        name\n        page\n        subclassShortName\n        subclassSource\n        source\n      }\n    }\n    classFeaturesByClassId(orderBy: LEVEL_ASC) {\n      nodes {\n        id\n        entries\n        classSource\n        isClassFeatureVariant\n        level\n        name\n        page\n        source\n        hasOptions\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useClassByIdQuery__\n *\n * To run a query within a React component, call `useClassByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useClassByIdQuery(baseOptions: Apollo.QueryHookOptions<ClassByIdQuery, ClassByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ClassByIdQuery, ClassByIdQueryVariables>(ClassByIdDocument, options);\n      }\nexport function useClassByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ClassByIdQuery, ClassByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ClassByIdQuery, ClassByIdQueryVariables>(ClassByIdDocument, options);\n        }\nexport type ClassByIdQueryHookResult = ReturnType<typeof useClassByIdQuery>;\nexport type ClassByIdLazyQueryHookResult = ReturnType<typeof useClassByIdLazyQuery>;\nexport type ClassByIdQueryResult = Apollo.QueryResult<ClassByIdQuery, ClassByIdQueryVariables>;","export const AUTH_TOKEN = 'auth-token'","import React from 'react'\nimport { LinkType } from './../lib/types'\nimport { useLocation } from 'react-router-dom'\n\ninterface Props {\n  links: LinkType[]\n  isPublic?: boolean\n  signout?: LinkType\n}\n\nconst NavBar: React.FC<Props> = ({ links, isPublic, signout }) => {\n  const location = useLocation()\n  const subpath = location.pathname.split(new RegExp('/(?<name>[^>]+)/'))[1]\n\n  return (\n    <div className='h-38 w-full fixed top-0 bg-stone z-30'>\n      {!isPublic && (\n        <div className='bg-black w-full px-6 py-3'>\n          <div className='flex justify-between items-center'>\n            <a className='hover:no-underline' href={'/'}>\n              <img\n                className='w-20'\n                src='/DD-Logo-1024x487.png'\n                alt='broken logo'\n              />\n            </a>\n            {signout && (\n              <a\n                className='text-off-white font-roboto uppercase hover:text-hover-white hover:no-underline'\n                href={signout.link}\n              >\n                {signout.text}\n              </a>\n            )}\n          </div>\n        </div>\n      )}\n      {subpath && location.pathname !== '/create/sheet' && (\n        <div className='relative px-5 py-6'>\n          <div className='flex w-full justify-between items-center text-sm'>\n            {links\n              .filter((x) => x.link.indexOf(subpath) > -1)\n              .map((x) => (\n                <div key={x.text}>\n                  <a\n                    className='text-off-white font-roboto uppercase hover:text-hover-white hover:no-underline'\n                    href={x.link}\n                  >\n                    {x.text}\n                  </a>\n                </div>\n              ))}\n          </div>\n          {isPublic && (\n            <div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2'>\n              <img\n                className='w-24'\n                src='DD-Logo-1024x487.png'\n                alt='broken logo'\n              />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default NavBar\n","import { Hash } from './types';\n\nexport const tryParseInt = (str: any, defaultValue: boolean) => {\n    let returnValue: number | boolean = defaultValue;\n\n    if(str !== null) {\n        if(str.length > 0) {\n            if (!isNaN(str)) {\n                returnValue = parseInt(str);\n            }\n        }\n    }\n    return returnValue;\n}\n\nexport const getProficiencyRules = (level: number) => {\n    if (level < 5) return 2\n    if (level < 9) return 3\n    if (level < 13) return 4\n    if (level < 17) return 5\n    return 6\n}\n\nexport const getLongFormAbilityScore = (asiAbbrev: string): string => {\n    const hash: Hash = {\n        'str': 'Strength',\n        'dex': 'Dexterity',\n        'con': 'Constitution',\n        'int': 'Intelligence',\n        'wis': 'Wisdom',\n        'cha': 'Charisma'\n    }\n\n    return hash[asiAbbrev]\n}\n\nconst sortFeatureList = (list: any[]) => (\n  list.sort((a: any, b: any) => {\n    if (typeof a == 'string' && typeof b === 'string') {\n      return Number(a.split('||')[1]) - Number(b.split('||')[1])\n    }\n    if (a.classFeature && b.classFeature) {\n      return (\n        Number(a.classFeature.split('||')[1]) -\n        Number(b.classFeature.split('||')[1])\n      )\n    }\n    if (b.classFeature) {\n      return Number(a.split('||')[1]) - Number(b.classFeature.split('||')[1])\n    }\n    // a.classFeature only\n    return Number(a.classFeature.split('||')[1]) - Number(b.split('||')[1])\n  })\n)\n\nconst parseFeatureList = (list: any[], hasSubclassFeats: boolean) => (\n  list.map((x: any) => {\n    if (typeof x === 'string' && x.toLowerCase().indexOf('subclass') === -1) {\n      return {\n        name: x.split('||')[0],\n        level: x.split('||')[1]\n      }\n    } \n    \n    if (hasSubclassFeats) {\n      const y = {\n        level: x\n      }\n      y.level = x.toLowerCase().split('||subclass')[0]\n      y.level = y.level.split('||')[1]\n      return y\n    }\n    \n    const remainder = x.split('||subclass')[0]\n    const name = remainder.split('||')[0]\n    const level = name.split('||')[1] \n    return {\n      name: name,\n      level: level\n    }\n  })\n)\n\n\nexport const getFeatures = (list: any, classFeats: any, subclassFeats?: any) => {\n  const sortedList: any = sortFeatureList([...list])\n  const parsedList: any = parseFeatureList(sortedList, subclassFeats !== undefined)\n  \n  const featsFormatted = []\n\n  for (const key of parsedList) {\n    //regular class feature\n    if (key.name) {\n      for (const feat of classFeats) {\n        // filtering by name AND level ensures proper choice with dupe feat names (eg. ASI)\n        if (feat.name === key.name && feat.level === Number(key.level)) {\n          featsFormatted.push(feat)\n          break;\n        }\n      }\n      continue;\n    }\n    \n    //subclass feature\n    for (const feat of subclassFeats) {\n      if (Number(key.level) === feat.level) {\n        featsFormatted.push(feat)  \n      }\n    }\n  }\n\n  return featsFormatted\n}\n\n\nexport const parsedFeatures = (classFeatures: any) => {\n  const hashFeatures: any = {}\n\n  classFeatures.forEach((f: any) => {\n    if (typeof f === 'string') {\n      const feature = f.split('||')[0]\n      const level = f.split('||')[1]\n      hashFeatures[level]\n        ? hashFeatures[level].push(feature)\n        : (hashFeatures[level] = [feature])\n    } else {\n      const feature = f.classFeature.split('||')[0]\n      const level = f.classFeature.split('||')[1]\n      hashFeatures[level]\n        ? hashFeatures[level].push(feature)\n        : (hashFeatures[level] = [feature])\n    }\n  })\n\n  return hashFeatures\n}\n\nexport const numberToSpeakable = (num: number) => {\n  if (num === 1) {\n    return '1st'\n  } \n  if (num === 2) {\n    return '2nd'\n  }\n  if (num === 3) {\n    return '3rd'\n  }\n\n  return `${num}th`\n}","import React from 'react'\nimport { ClassClassType } from './../../../lib/types'\nimport { getLongFormAbilityScore } from './../../../lib/utils'\n\ninterface Props {\n  gen: ClassClassType\n}\nconst ClassSummary: React.FC<Props> = ({gen}) => {\n\n  const gen2: ClassClassType = Object.assign({}, gen)\n\n  //@ts-ignore \n  gen2.multiclassing = JSON.parse(gen2.multiclassing)\n  //@ts-ignore \n  gen2.startingEquipment = JSON.parse(gen2.startingEquipment)\n  //@ts-ignore \n  gen2.startingProficiencies = JSON.parse(gen2.startingProficiencies)\n\n  const mcProf = gen2.multiclassing?.proficienciesGained\n  const mcReq = gen2.multiclassing.requirements\n  const mcReqs: string[] = []\n\n  if (mcReq.or) {\n    Object.keys(mcReq.or).forEach((r) => {\n      let str = getLongFormAbilityScore(r)\n      str += ' ' + mcReq.or[r]\n      mcReqs.push(str)\n    })\n  }\n\n  return (\n    <div className='border rounded bg-white text-sm shadow-sm space-y-3 max-w-sm mr-4 p-3'>\n      <div>\n        <div className='text-base mb-1'>Hit Points</div>\n        <div>\n          <span className='font-semibold mr-1 inline'>Hit Dice:</span>\n          <span>\n            {gen2.hdNumber}d{gen2.hdFaces}\n          </span>\n        </div>\n        <div>\n          <span className='font-semibold mr-1 inline'>\n            Hit Points at 1st Level:\n          </span>\n          <span>{gen2.hdFaces} + your Constitution modifier</span>\n        </div>\n        <div>\n          <span className='font-semibold mr-1 inline'>\n            Hit Points at Higher Levels:\n          </span>\n          <span>\n            {gen2.hdNumber}d{gen2.hdFaces} (or{' '}\n            {Math.floor(gen2.hdFaces / 2) + 1}) + your Constitution modifier per{' '}\n            {gen2.name} level after 1st\n          </span>\n        </div>\n      </div>\n      <div>\n        <div className='text-base mb-1'>Proficiencies</div>\n        <div>\n          <span className='font-semibold mr-1 inline'>Armor:</span>\n          <span>\n            {gen2.startingProficiencies.armor.length ? gen2.startingProficiencies.armor.join(', ') : 'none'}\n          </span>\n        </div>\n        <div>\n          <span className='font-semibold mr-1 inline'>Weapons:</span>\n          <span>\n            {gen2.startingProficiencies.weapons.length ? gen2.startingProficiencies.weapons.join(', ') : 'none'}\n          </span>\n        </div>\n        <div>\n          <span className='font-semibold mr-1 inline'>Tools:</span>\n          <span>\n            {gen2.startingProficiencies.tools.length ? gen2.startingProficiencies.tools.join(', ') : 'none'}\n          </span>\n        </div>\n        <div>\n          <span className='font-semibold mr-1 inline'>Saving Throws:</span>\n          <span>\n            {gen2.proficiency\n              .map((prof: any) => getLongFormAbilityScore(prof))\n              .join(', ')}\n          </span>\n        </div>\n        <div>\n          <span className='font-semibold mr-1 inline'>Skills:</span>\n          <span>\n            Choose {gen2.startingProficiencies.skills.choose.count} from{' '}\n            <span className='capitalize'>\n              {gen2.startingProficiencies.skills.choose.from.join(', ')}\n            </span>\n          </span>\n        </div>\n      </div>\n      <div>\n        <div className='text-base mb-1'>Starting Equipment</div>\n        <div>\n          You start with the following items, plus anything provided by your\n          background.\n        </div>\n        <ul className='list-disc list-inside mt-2 mb-2'>\n          {gen2.startingEquipment.default.map((eq: string, i: number) => (\n            <li key={i}>{eq}</li>\n          ))}\n        </ul>\n        <div>\n          Alternatively, you may start with{' '}\n          {gen2.startingEquipment?.goldAlternative?.split('Starting Gold')[0]} gp\n          to buy your own equipment.\n        </div>\n      </div>\n      <div>\n        <div className='text-base mb-1'>Multiclassing</div>\n        <div>\n          <span className='font-semibold mr-1 inline'>\n            Ability Score Minimum:\n          </span>\n          {mcReq.or ? (\n            <span>{mcReqs.join(' or ')}</span>\n          ) : (\n            <span>\n              {getLongFormAbilityScore(Object.keys(mcReq)[0])}{' '}\n              {mcReq[Object.keys(mcReq)[0]]}\n            </span>\n          )}\n        </div>\n        {mcProf.armor.length > 0 && <div>\n          <span className='font-semibold mr-1 inline'>Armor:</span>\n          <span>{mcProf.armor.join(', ')}</span>\n        </div>}\n        {mcProf.weapons.length > 0 && <div>\n          <span className='font-semibold mr-1 inline'>Weapons:</span>\n          <span>\n            {mcProf.weapons.join(' weapons, ')}{' '}\n            {mcProf.weapons.length && ' weapons'}\n          </span>\n        </div>}\n      </div>\n    </div>\n  )\n}\n\nexport default ClassSummary\n","import React from 'react'\nimport { cloneDeep } from 'lodash'\ninterface IStringType {\n  entry: string\n}\nconst StringType: React.FC<IStringType> = ({ entry }) => <div>{entry}</div>\n\ninterface IListType {\n  entry: {\n    items:\n      | string[]\n      | {\n          type: string\n          name: string\n          entry: string\n        }[]\n  }\n}\nconst ListType: React.FC<IListType> = ({ entry }) => (\n  <ul className='list-disc list-inside mt-2 mb-2'>\n    {entry.items.map((x, i) => {\n      if (typeof x === 'string') {\n        return <li key={x}>{x}</li>\n      }\n\n      return (\n        <div key={i}>\n          <div className='italic'>{x.name}</div>\n          <div>{x.entry}</div>\n        </div>\n      )\n    })}\n  </ul>\n)\n\ninterface IEntryType {\n  entry: any // worst data model ever\n}\n\nconst EntryType: React.FC<IEntryType> = ({ entry }) => {\n  if (typeof entry === 'string') {\n    return <div>{entry}</div>\n  } else if (entry.entries) {\n    return (\n      <div className='space-y-1'>\n        <div className='font-bold'>{entry.name}.</div>\n        {entry.entries.map((e: any, i: number) => {\n          if (typeof e == 'string') {\n            return <div key={e}>{e}</div>\n          }\n\n          const predicate =\n            e.type.toLowerCase() === 'abilitydc' ? 'save DC' : 'attack modifier'\n\n          return (\n            <div key={i} className='font-bold text-center'>\n              <strong>\n                {e.name} {predicate} = 8 + your proficiency bonus + your{' '}\n                <span className='capitalize'>{e.attributes[0]}</span> modifier\n              </strong>\n            </div>\n          )\n        })}\n      </div>\n    )\n  } else {\n    const predicate =\n      entry.type.toLowerCase() === 'abilitydc' ? 'save DC' : 'attack modifier'\n\n    return (\n      <div className='font-bold text-center'>\n        <strong>\n          {entry.name} {predicate} = 8 + your proficiency bonus + your{' '}\n          <span className='capitalize'>{entry.attributes[0]}</span> modifier\n        </strong>\n      </div>\n    )\n  }\n}\n\ninterface ITableType {\n  entry: {\n    caption: string\n    colLabels: string[]\n    rows: [string[]]\n  }\n}\n\nconst TableType: React.FC<ITableType> = ({ entry }) => (\n  <>\n    <div className='italic'>{entry.caption}</div>\n    <div className='table'>\n      <div className='table-header-group font-semibold'>\n        {entry.colLabels.map((cl, i) => (\n          <div className='table-cell pl-2' key={i}>\n            {cl}\n          </div>\n        ))}\n      </div>\n      {entry.rows.map((row) => (\n        <div className='table-row'>\n          {row.map((col) => (\n            <div className='table-cell pl-2' key={col}>\n              {col}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  </>\n)\n\ninterface IFeatureProps {\n  features: any[]\n}\nconst Features: React.FC<IFeatureProps> = ({ features }) => {\n  const copied = cloneDeep(features)\n  const features2 = copied.map((feat) => {\n    try {\n      feat.entries = JSON.parse(feat.entries).e\n    } catch {}\n\n    return feat\n  })\n\n  return (\n    <div className='space-y-2'>\n      {features2.map((x) => (\n        <div className='border p-2 text-sm shadow-sm rounded bg-white' key={x.id}>\n          <div\n            className={\n              x.subclassShortName\n                ? 'text-blue-600 font-semibold'\n                : 'font-semibold'\n            }\n          >\n            {x.name}\n          </div>\n          <div className='text-xs italic'>Level {x.level}</div>\n          <div>\n            {x.entries.map((x: any, i: number) => {\n              if (typeof x === 'string') {\n                return (\n                  <div key={i}>\n                    <StringType entry={x} />\n                  </div>\n                )\n              } else if (x.type === 'list') {\n                return (\n                  <div key={i}>\n                    <ListType entry={x} />\n                  </div>\n                )\n              } else if (x.type === 'entry') {\n                return (\n                  <div key={i}>\n                    <EntryType entry={x} />\n                  </div>\n                )\n              } else if (x.type === 'entries') {\n                return (\n                  <div key={i}>\n                    {x.entries.map((entry: any) => {\n                      return <EntryType entry={entry} />\n                    })}\n                  </div>\n                )\n              } else if (x.type === 'table') {\n                return (\n                  <div key={i} className='mt-2'>\n                    <TableType entry={x} />\n                  </div>\n                )\n              }\n              return null\n            })}\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Features\n","import React from 'react'\nimport { getProficiencyRules } from '../../../lib/utils'\n\ninterface ISubtableProps {\n  features: {\n    [key: string]: string[]\n  }\n  tableGroups?: any\n  subclassTableGroups?: any\n}\n\nconst Subtable: React.FC<ISubtableProps> = ({ features, tableGroups, subclassTableGroups }) => {\n  \n  const levels = [\n    {\n      level: 1,\n      label: '1st',\n    },\n    {\n      level: 2,\n      label: '2nd',\n    },\n    {\n      level: 3,\n      label: '3rd',\n    },\n    {\n      level: 4,\n      label: '4th',\n    },\n    {\n      level: 5,\n      label: '5th',\n    },\n    {\n      level: 6,\n      label: '6th',\n    },\n    {\n      level: 7,\n      label: '7th',\n    },\n    {\n      level: 8,\n      label: '8th',\n    },\n    {\n      level: 9,\n      label: '9th',\n    },\n    {\n      level: 10,\n      label: '10th',\n    },\n    {\n      level: 11,\n      label: '11th',\n    },\n    {\n      level: 12,\n      label: '12th',\n    },\n    {\n      level: 13,\n      label: '13th',\n    },\n    {\n      level: 14,\n      label: '14th',\n    },\n    {\n      level: 15,\n      label: '15th',\n    },\n    {\n      level: 16,\n      label: '16th',\n    },\n    {\n      level: 17,\n      label: '17th',\n    },\n    {\n      level: 18,\n      label: '18th',\n    },\n    {\n      level: 19,\n      label: '19th',\n    },\n    {\n      level: 20,\n      label: '20th',\n    },\n  ]\n  const showSpellSlotsHeader = (tableGroups && tableGroups?.classTableGroups?.find((x: any)=> x.title)) || (subclassTableGroups && subclassTableGroups.find((x: any)=> x.title))\n  return (\n    <div className='text-sm bg-white border rounded'>\n      {showSpellSlotsHeader &&\n        <div className='pt-2 pr-2 font-semibold w-full text-right'>\n          Spell Slots Per Spell Level\n        </div>\n      }\n      <div className='table text-center max-w-screen-md shadow-sm'>\n        <div className='table-header-group font-semibold'>\n          <div className='table-cell p-2'>Level</div>\n          <div className='table-cell'>Proficiency Bonus</div>\n          <div className='table-cell text-left pl-2'>Features</div>\n          {tableGroups?.classTableGroups?.map((sctg: any) => {\n            return sctg.colLabels.map((col: string) => (\n              <div className='table-cell p-2' key={col}>{col}</div>\n            ))\n          })}\n          {subclassTableGroups?.map((sctg: any) => {\n            return sctg.colLabels.map((col: string) => (\n              <div className='table-cell p-2' key={col}>{col}</div>\n            ))\n          })}\n        </div>\n        {levels.map((l, i) => (\n          <div className={i % 2 === 0 ? 'table-row bg-gray-100' : 'table-row'} key={l.level}>\n            <div className='table-cell'>{l.label}</div>\n            <div className='table-cell'>+{getProficiencyRules(l.level)}</div>\n            <div className='table-cell text-left pl-2'>\n              {features[l.level.toString()]\n                ? features[l.level.toString()].join(', ')\n                : '---'}\n            </div>\n            {tableGroups?.classTableGroups?.map((sctg: any) =>\n              sctg.rows[l.level - 1].map((col: any, i: number) => {\n                if (typeof col == 'string' || typeof col == 'number') {\n                  return <div className='table-cell' key={`$${i}`}>{col}</div>\n                } else if (col.type === 'dice') {\n                  return <div className='table-cell' key={`$${i}`}>{col.toRoll[0].number}d{col.toRoll[0].faces}</div>\n                }\n                else {\n                  return <div className='table-cell' key={`${i}`}>+{col.value}</div>\n                }\n              })\n            )}\n            {subclassTableGroups?.map((sctg: any) =>\n              sctg.rows[l.level - 1].map((col: any, i: number) => {\n                if (typeof col == 'string' || typeof col == 'number') {\n                  return <div className='table-cell' key={`${i}`}>{col}</div>\n                } else {\n                  return <div className='table-cell' key={`${i}`}>+{col.value}</div>\n                }\n              })\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Subtable\n","import React from 'react'\nimport ClassSummary from './../shared/class-summary'\nimport Features from '../shared/features'\nimport Subtable from '../shared/subtable'\nimport { getFeatures, parsedFeatures } from '../../../lib/utils'\n\ninterface IProps {\n  classData: any\n  subclassFeatures: any\n}\n\nconst getSubclassTableGroups = (subclasses: any, subclassName: string) => {\n  const subclassTableGroups: any[] = []\n\n  for (const sc of subclasses) {\n    if (subclassName === sc.shortName) {\n      if (sc.subclassTableGroups?.length) {\n        sc.subclassTableGroups.forEach((sctg: string) => {\n          subclassTableGroups.push(JSON.parse(sctg))\n        })\n      }\n    }\n  }\n  return subclassTableGroups\n}\n\nconst PcClass: React.FC<IProps> = ({ classData, subclassFeatures }) => {\n  const subclassName = subclassFeatures\n    ? subclassFeatures[0].subclassShortName\n    : null\n  const subclassTableGroups = getSubclassTableGroups(\n    classData.subclassesByClassId.nodes,\n    subclassName\n  )\n  \n  const features = subclassFeatures\n    ? getFeatures(\n        classData.classFeatures,\n        classData.classFeaturesByClassId.nodes,\n        subclassFeatures\n      )\n    : getFeatures(\n        classData.classFeatures,\n        classData.classFeaturesByClassId.nodes\n      )\n    \n  return (\n    <div>\n      <div className='text-lg font-bold mb-4'>{classData.name}</div>\n      <div className='flex justify-between w-full'>\n        <ClassSummary gen={classData} />\n        <Subtable\n          features={parsedFeatures(classData.classFeatures)}\n          tableGroups={JSON.parse(classData.meta)}\n          subclassTableGroups={subclassTableGroups}\n        />\n      </div>\n      <div className='mt-4'> \n        <Features features={features} />\n      </div>\n    </div>\n  )\n}\n\nexport default PcClass\n","import React, { useState } from 'react'\nimport PcClass from './shared/pc-class'\nimport Select from 'react-select'\nimport { useAllClassesQuery } from '../../generated/graphql'\n\ntype SelectChangeEventType = { label: string; value: number } | null\n\nconst Classes: React.FC = () => {\n  const { data, loading } = useAllClassesQuery()\n\n  const [classOptions, setClassOptions] = useState<any[]>([])\n  const [subclassOptions, setSubclassOptions] = useState<any[]>([])\n  const [selectedClass, setSelectedClass] = useState<any>(null)\n  const [selectedSubclass, setSelectedSubclass] = useState<any>(null)\n  const [subclassFeatures, setSubclassFeatures] = useState<any>(null)\n\n  if (!data || loading) {\n    return <div>Loading...</div>\n  }\n\n  if (data && !classOptions.length) {\n    const options: any[] = []\n    if (data?.allClasses?.nodes) {\n      data.allClasses.nodes.forEach((x) => {\n        const opt = {\n          value: x?.id,\n          label: x?.name,\n        }\n        options.push(opt)\n      })\n    }\n\n    setClassOptions(options)\n  }\n\n  const handleClassChange = (e: any) => {\n    const choice = data.allClasses?.nodes.find((x: any) => x.id === e?.value)\n    setSelectedClass(choice)\n    setSubclassFeatures(null)\n    setSelectedSubclass(null)\n    setSubclassOptions(\n      choice?.subclassesByClassId.nodes.map((x: any) => ({\n        value: x.shortName,\n        label: x.name,\n      })) || []\n    )\n  }\n\n  const handleSubclassChange = (e: SelectChangeEventType) => {\n    setSelectedSubclass(e)\n    \n    const subclassShortName = e?.value\n    \n    const subclassFeatures = selectedClass.subclassFeaturesByClassId.nodes.filter((x: any) => {\n      return x.subclassShortName === subclassShortName ? true : false\n    })\n    \n    setSubclassFeatures(subclassFeatures)\n  }\n\n  return (\n    <>\n      <div className='mb-6'>\n        <Select\n          options={classOptions}\n          placeholder={'Make a selection'}\n          onChange={(e) => handleClassChange(e)}\n        />\n      </div>\n\n      {selectedClass && (\n        <div className='mb-6'>\n          <Select\n            placeholder={'Make a selection'}\n            onChange={handleSubclassChange}\n            value={selectedSubclass}\n            options={subclassOptions}\n          />\n        </div>\n      )}\n\n      {selectedClass && (\n        <PcClass\n          classData={selectedClass}\n          subclassFeatures={subclassFeatures}\n        />\n      )}\n    </>\n  )\n}\n\nexport default Classes\n","import React from \"react\";\n\ninterface Props {\n  races: any\n}\nconst Races: React.FC<Props> = ({races}) => {\n\n  return (\n    <>\n      <label className='text-white font-bold font-roboto text-lg'>Choose a Race</label>\n      <select className=\"w-full border rounded text-lg p-2\">\n        <option value=\"\" key=\"0000000\" selected disabled>\n          Make a selection\n        </option>\n        {races.map((x: any) => (\n          <option value={x.id} key={x.id}>\n            {x.name}\n          </option>\n        ))}\n      </select>\n    </>\n  );\n};\n\nexport default Races;\n","import React from 'react'\nimport { SubraceType } from '../../lib/types'\ninterface Props {\n  subraces: SubraceType[]\n}\n\nconst Subraces: React.FC<Props> = ({ subraces = [] }) => (\n  <>\n    {subraces.length ? (\n      <div>\n        <label>Choose a Subrace</label>\n        <select className='w-full border rounded-b text-xl p-2'>\n          <option value='' key='100000000' selected disabled>\n            Make a selection\n          </option>\n          {subraces.map((x) => (\n            <option value={x.id} key={x.id}>\n              {x.name}\n            </option>\n          ))}\n        </select>\n      </div>\n    ) : null}\n  </>\n)\n\nexport default Subraces\n","import React, { useState } from 'react'\nimport { useGetAllRacesQuery } from '../../generated/graphql'\n\nimport Races from './races'\nimport Subraces from './subraces'\n\nconst getItemFromArrayWithId = (someId: string, someArray: any) => {\n  for (const oneItem of someArray) {\n    if (someId === oneItem.id) {\n      return oneItem\n    }\n  }\n}\n\nconst buildRacialFeatureHtmlBlocks = (features: any) => {\n  const racialFeatureHtmlArray = features.map((feat: any) => (\n    <div className='bg-white rounded px-2 py-3 text-sm border border-2'>\n      <div className='font-bold'>{feat.racialFeatureByRacialFeatureId.name}</div>\n      <div>{feat.racialFeatureByRacialFeatureId.description}</div>\n    </div>\n  ))\n\n  return racialFeatureHtmlArray\n}\n\nconst buildLanguagesString = (languages: string[]) => {\n  let languagesStr = 'You can speak, read, and write'\n\n  const lastIndex = languages.length - 1\n\n  for (let i = 0; i < languages.length; i++) {\n    const language = languages[i]\n\n    // add commas because more than 2 options =>  x, y, and z\n    if (i != lastIndex && lastIndex > 1) {\n      languagesStr = `${languagesStr} ${language}, `\n    }\n    // no commas needed because there are only 2 options => x and y\n    if (i != lastIndex) {\n      languagesStr = `${languagesStr} ${language} `\n    }\n    // if last, then check the rules again\n    if (i === lastIndex) {\n      // if a number, then it's free languages of the player's choice\n      if (typeof language == 'number') {\n        languagesStr = `${languagesStr} and ${language} extra language${\n          language > 1 ? 's' : ''\n        } of your choice.`\n      }\n      // if it's text, it's just another fixed language option to be displayed\n      if (typeof language == 'string') {\n        languagesStr = `${languagesStr} and ${language}.`\n      }\n    }\n  }\n\n  return languagesStr\n}\n\nconst buildRacialTraitsString = (race: any) => {\n  let racialTraitsArr = []\n  if (race.asis) {\n    const asiString = buildAsiString(race.asis)\n    racialTraitsArr.push(asiString)\n  }\n\n  if (race.raceFeaturesByRaceId.nodes.length) {\n    for (const feat of race.raceFeaturesByRaceId.nodes) {\n      const featName = feat.racialFeatureByRacialFeatureId.name\n      racialTraitsArr.push(featName)\n    }\n  }\n\n  return racialTraitsArr.join(', ')\n}\n\nconst buildAsiString = (asis: any) => {\n  asis = JSON.parse(asis).options\n\n  const asiArr: any = []\n\n  asis.forEach((asi: any) => {\n    const key = Object.keys(asi)[0]\n    const numVal = Number(asi[key])\n    const plusOrMinusSymbol = Math.sign(asi[key]) === 1 ? '+' : ''\n    const stringChunk = `${plusOrMinusSymbol}${numVal} ${key}`\n    asiArr.push(stringChunk)\n  })\n\n  return asiArr.join(', ')\n}\n\nconst RaceSelectionForm: React.FC = () => {\n  const [selectedRaceId, setSelectedRaceId] = useState<string | null>(null)\n  const [selectedSubraceId, setSelectedSubraceId] = useState<string | null>(\n    null\n  )\n  const { data, loading } = useGetAllRacesQuery()\n\n  const handleRaceSelection = (event: React.ChangeEvent<any>) => {\n    setSelectedRaceId(event.target.value)\n    setSelectedSubraceId(null)\n  }\n\n  const handleSubRaceSelection = (event: React.ChangeEvent<any>) => {\n    setSelectedSubraceId(event.target.value)\n  }\n\n  if (!data || loading) {\n    return <div>Loading...</div>\n  }\n\n  const activeRace = selectedRaceId\n    ? getItemFromArrayWithId(selectedRaceId, data?.allRaces?.nodes)\n    : false\n  const activeSubrace = selectedSubraceId\n    ? getItemFromArrayWithId(\n        selectedSubraceId,\n        activeRace.subracesByRaceId.nodes\n      )\n    : false\n\n  let raceDetailHtml\n  let subraceDetailHtml\n\n  // TODO:\n  // make an active race html block for active race only scenarios\n  // make a more clear combined html for active race + active subrace scenarios\n\n  if (activeRace) {\n    const racialFeatureHtmlBlocks = activeRace.raceFeaturesByRaceId.nodes.length\n      ? buildRacialFeatureHtmlBlocks(activeRace.raceFeaturesByRaceId.nodes)\n      : ''\n    const languagesString = buildLanguagesString(activeRace.languages)\n    const racialTraitsStr = buildRacialTraitsString(activeRace)\n\n    raceDetailHtml = (\n      <div className='space-y-4'>\n        <div className='bg-white rounded px-2 py-3 text-sm border border-2'>\n          <div className='font-bold'>Race:</div>\n          <div>{activeRace.name}</div>\n        </div>\n        <div className='bg-white rounded px-2 py-3 text-sm border border-2 text-sm'>\n          <div className='font-bold'>Racial Traits:</div>\n          <div>{racialTraitsStr}</div>\n        </div>\n        <div className='bg-white rounded px-2 py-3 text-sm border border-2'>\n          <div className='font-bold'>Summary:</div>\n          <div>{activeRace.summary}</div>\n        </div>\n        <div className='bg-white rounded px-2 py-3 text-sm border border-2'>\n          <div className='font-bold'>Movement:</div>\n          <div>{activeRace.movement} feet</div>\n        </div>\n        <div className='bg-white rounded px-2 py-3 text-sm border border-2'>\n          <div className='font-bold'>Languages:</div>\n          <div>{languagesString}</div>\n        </div>\n        <div className='bg-white rounded px-2 py-3 text-sm border border-2'>\n          <div className='font-bold'>Lifespan:</div>\n          <div>{activeRace.lifespan}</div>\n        </div>\n        <div className='bg-white rounded px-2 py-3 text-sm border border-2'>\n          <div className='font-bold'>Alignment:</div>\n          <div>{activeRace.alignment}</div>\n        </div>\n\n        {racialFeatureHtmlBlocks}\n      </div>\n    )\n  }\n\n  if (activeSubrace) {\n    const subracialFeatureHtmlBlock = activeSubrace.subraceFeaturesBySubraceId\n      .nodes.length\n      ? buildRacialFeatureHtmlBlocks(\n          activeSubrace.subraceFeaturesBySubraceId.nodes\n        )\n      : ''\n    const asiString = buildAsiString(activeSubrace.asis)\n\n    subraceDetailHtml = (\n      <div>\n        <div className='bg-white rounded px-2 py-3 text-sm border border-2'>\n          <div className='font-bold'>Subrace Name:</div>\n          <div>{activeSubrace.name}</div>\n        </div>\n        <div className='bg-white rounded px-2 py-3 text-sm border border-2'>\n          <div className='font-bold'>Ability Score Increase:</div>\n          <div>{asiString}</div>\n        </div>\n\n        {subracialFeatureHtmlBlock}\n      </div>\n    )\n  }\n\n  return (\n    <div className='max-w-screen-sm m-auto m-0'>\n      <div>\n        <form onChange={handleRaceSelection} key='raceForm'>\n          <Races races={data.allRaces?.nodes}></Races>\n        </form>\n        <form onChange={handleSubRaceSelection} key='subraceForm'>\n          <Subraces subraces={activeRace?.subracesByRaceId?.nodes}></Subraces>\n        </form>\n      </div>\n      <div>\n        {raceDetailHtml}\n        {subraceDetailHtml}\n      </div>\n    </div>\n  )\n}\n\nexport default RaceSelectionForm\n","import React, { useState } from 'react'\nimport { AttributeInterface } from '../../../lib/types'\n\ninterface Props {\n  attribute: AttributeInterface\n  availablePoints: number\n  pointCosts: any\n}\n\n// getting the index of the currently selected option\nconst getIndexOfOptions = (\n  eventTargetVal: string,\n  optionsInState: JSX.Element[]\n) => {\n  for (let i = 0; i < optionsInState.length; i++) {\n    const opt = optionsInState[i]\n\n    if (eventTargetVal === opt.props.value) {\n      return i\n    }\n  }\n\n  return 0\n}\n\n// creating and modifying the options array\nconst buildAvailableOptions = (props: Props) => {\n  let availablePoints = props.availablePoints\n  const pointCosts = props.pointCosts\n  const pointDisplayVals = Object.keys(pointCosts)\n\n  let lastPointKey = 8\n\n  const optionsArr: JSX.Element[] = []\n\n  for (const opt of pointDisplayVals) {\n    let optionHmtl\n\n    if (Math.sign(availablePoints - pointCosts[lastPointKey]) != -1) {\n      optionHmtl = (\n        <option\n          value={lastPointKey + '-' + props.attribute.id}\n          key={lastPointKey}\n        >\n          {lastPointKey}\n        </option>\n      )\n      optionsArr.push(optionHmtl)\n    }\n\n    lastPointKey++\n  }\n\n  return optionsArr\n}\n\nconst addOrRemoveAvailableOptionsAtIndex = (state: any, props: Props) => {\n  const options = state.allOptions\n  //selected index\n  const currentlySelectedIndex = state.indexOfOptionSelected\n  //starting index\n  const startingIndex = currentlySelectedIndex + 1\n  //avaiable points\n  const availablePoints = props.availablePoints\n  //cost of scores\n  const pointCosts = props.pointCosts\n  //all available point options\n  const pointDisplayVals = Object.keys(pointCosts)\n  //find the value of points already invested\n  const priceAlreadyPaid = parseInt(\n    //@ts-ignore\n    pointCosts[options[currentlySelectedIndex].key]\n  )\n\n  //here we are finding the least expensive option that is NOT in the current options list\n  //and checking if we can afford to add it back in\n\n  const firstUnavailableOption = parseInt(pointDisplayVals[options.length])\n\n  const priceOfFirstUnavailableOption = pointCosts[firstUnavailableOption]\n  const realCostToIncreaseBeyondAvailOpt = firstUnavailableOption\n    ? priceOfFirstUnavailableOption - priceAlreadyPaid\n    : false\n\n  // need to add options\n  if (availablePoints >= realCostToIncreaseBeyondAvailOpt) {\n    let currentPointKey = firstUnavailableOption\n\n    for (let i = options.length; i < pointDisplayVals.length; i++) {\n      let optionHmtl\n\n      if (\n        Math.sign(\n          availablePoints - (pointCosts[currentPointKey] - priceAlreadyPaid)\n        ) != -1\n      ) {\n        optionHmtl = (\n          <option\n            value={currentPointKey + '-' + props.attribute.id}\n            key={currentPointKey}\n          >\n            {currentPointKey}\n          </option>\n        )\n        options.push(optionHmtl)\n      }\n\n      currentPointKey++\n    }\n  }\n\n  const lastOptionIsNotSelectedOption =\n    options.length - 1 != currentlySelectedIndex ? true : false\n  // here we look to see if the last currently available option costs more than we can afford\n  if (lastOptionIsNotSelectedOption) {\n    //@ts-ignore\n    const lastAvailableOption = parseInt(options[options.length - 1].key)\n\n    const priceOfLastAvailableOption = pointCosts[lastAvailableOption]\n    const realCostOfLastAvailableOption =\n      priceOfLastAvailableOption - priceAlreadyPaid\n\n    // need to remove options\n    if (availablePoints < realCostOfLastAvailableOption) {\n      for (let i = startingIndex; i < options.length; i++) {\n        let attributeScoreOfCurrentOption = options[i].key\n        //@ts-ignore\n        if (\n          availablePoints <\n          pointCosts[attributeScoreOfCurrentOption] - priceAlreadyPaid\n        ) {\n          options.length = i\n          break\n        }\n      }\n    }\n  }\n\n  return options\n}\n\nconst AttributeInputBlock: React.FC<Props> = (props) => {\n  const [indexOfOptionSelected, setIndexOfOptionSelected] = useState<number>(0)\n  const [allOptions] = useState<JSX.Element[]>(buildAvailableOptions(props))\n\n  const [options] = useState<JSX.Element[]>(\n    addOrRemoveAvailableOptionsAtIndex(\n      {\n        allOptions: allOptions,\n        indexOfOptionSelected: indexOfOptionSelected,\n      },\n      props\n    )\n  )\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    // const name = this.state.attributeName;\n    const newAssignedScore = parseInt(event.target.value.split('-')[0])\n\n    // we'll need to set this so we can strip more expensive options if user runs out of points elsewhere\n    let indexOfOptionSelected = getIndexOfOptions(event.target.value, options)\n\n    setIndexOfOptionSelected(indexOfOptionSelected)\n\n    //TODO:\n    //this is gross ... pass in an onChangeCallback to update this...\n    props.attribute.currentAssignedScore = newAssignedScore\n  }\n\n  return (\n    <div>\n      <select className='w-full border rounded-b text-xl p-2' onChange={handleChange}>\n        {options}\n      </select>\n    </div>\n  )\n}\n\nexport default AttributeInputBlock\n","import React, { Dispatch, SetStateAction, useState } from 'react'\nimport { AttributeInterface } from '../../../lib/types'\nimport AttributeInputBlock from './attribute-input'\n\n\ninterface Props {\n  attributesImmutable: AttributeInterface[]\n  callbackToSetAttributes: Dispatch<SetStateAction<AttributeInterface[]>>\n}\n\nconst PointBuy: React.FC<Props> = ({\n  attributesImmutable,\n  callbackToSetAttributes,\n}) => {\n  const [attributes, setAttributes] =\n    useState<AttributeInterface[]>(attributesImmutable)\n  const [pointsRemaining, setPointsRemaining] = useState<number>(27)\n  const [standardPointsPool] = useState<number>(27)\n  const [standardPointCost] = useState<any>({\n    // 18: 19,\n    // 17: 15,\n    // 16: 12,\n    15: 9,\n    14: 7,\n    13: 5,\n    12: 4,\n    11: 3,\n    10: 2,\n    9: 1,\n    8: 0,\n    // 7: -1,\n    // 6: -2,\n    // 5: -4,\n    // 4: -6,\n    // 3: -9,\n  })\n\n  const doBeforeReturningInChangeHandler = (\n    attr: AttributeInterface,\n    newAttributeScore: number\n  ) => {\n    const updatedAttributes = attributes.map((a) => {\n      if (attr.id === a.id) {\n        a.previousAssignedScore = newAttributeScore\n      }\n      return a\n    })\n    setAttributes(updatedAttributes)\n    callbackToSetAttributes(updatedAttributes) // callback handler;\n  }\n\n  // this.props.attributes = this.props.attributes;\n\n  const handleChanges = (event: React.ChangeEvent<HTMLFormElement>) => {\n    //value format is [ASI_SCORE-ATTR_ID]\n    //after splitting this var will be ['ASI_SCORE', 'ATTRIBUTE_ID']\n    const eventValArr = event.target.value.split('-')\n\n    const attributeId = parseInt(eventValArr[1])\n\n    for (let attr of attributes) {\n      if (attributeId === attr.id) {\n        const newAttributeScore = parseInt(eventValArr[0])\n        //@ts-ignore\n        const prevAttributeScore = parseInt(attr.previousAssignedScore)\n\n        // if the previous score was 8, then it can be treated as a brand new selection\n        const userMadeBrandNewSelection =\n          prevAttributeScore === 8 ? true : false\n        // therefore, we assign the new choice as the previousScore for next time\n        if (userMadeBrandNewSelection) {\n          // and simply decrease the remaining points\n\n          setPointsRemaining(\n            pointsRemaining - standardPointCost[newAttributeScore]\n          )\n\n          //update previous with current\n          doBeforeReturningInChangeHandler(attr, newAttributeScore)\n          return\n        }\n\n        // if there was a previous score, then we need to find out whether they increased or decreased\n        // and then add or subtract the difference\n        const userIncreasedScore =\n          Math.sign(newAttributeScore - prevAttributeScore) == 1 ? true : false\n\n        const pointCost = standardPointCost\n\n        if (userIncreasedScore) {\n          // new higher price - the previous lower price = real cost increase\n          const debit =\n            pointCost[newAttributeScore] - pointCost[prevAttributeScore]\n          // subtract the additional cost from the pointsRemaining\n\n          setPointsRemaining(pointsRemaining - debit)\n          //update previous with current\n          // attr.previousAssignedScore = newAttributeScore;\n          doBeforeReturningInChangeHandler(attr, newAttributeScore)\n          return\n        }\n\n        // previous higher price - new lower price = real cost decrease\n        const credit =\n          pointCost[prevAttributeScore] - pointCost[newAttributeScore]\n        // add the credit back to pointsRemaining\n        setPointsRemaining(pointsRemaining + credit)\n        //update previous with current\n        doBeforeReturningInChangeHandler(attr, newAttributeScore)\n        return\n      }\n    }\n  }\n\n  return (\n    <div className='space-y-4'>\n      <div className='text-center'>\n        <div className='text-sm font-roboto font-bold uppercase'>\n          Points Remaining\n        </div>\n        <div className='text-2xl font-roboto font-bold uppercase'>\n          {pointsRemaining} / {standardPointsPool}\n        </div>\n      </div>\n      <div>\n        <form onChange={handleChanges}>\n          <div className='grid grid-cols-6 gap-x-2'>\n            {attributes.map((attr) => {\n              return (\n                <div key={attr.id}>\n                  <div className='text-sm text-center uppercase font-roboto font-bold rounded-t bg-dark text-white p-1'>{attr.name}</div>\n                    <AttributeInputBlock\n                      attribute={attr}\n                      key={attr.id}\n                      availablePoints={pointsRemaining}\n                      pointCosts={standardPointCost}\n                    ></AttributeInputBlock>\n                </div>\n              )\n            })}\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport default PointBuy\n","import React, { Dispatch, SetStateAction, useState } from 'react'\nimport { AttributeInterface } from '../../../lib/types'\n\ninterface Props {\n  attributes: AttributeInterface[]\n  callbackToSetAttributes: Dispatch<SetStateAction<AttributeInterface[]>>\n}\n\n// interface State<T> {\n//   hashTable: {\n//     [key: string]: T\n//   }\n// }\n\nconst StandardArray: React.FC<Props> = ({\n  attributes,\n  callbackToSetAttributes,\n}) => {\n  const [hashTable, setHashTable] = useState<any>(_buildHashMap(attributes))\n\n  const handleSelection = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const optionValuesSplit = event.target.value.split('_')\n    let newSelectedScore = optionValuesSplit[0]\n    const updatedAttrId = parseInt(optionValuesSplit[1])\n    let localHashTable = hashTable\n    let localAttributes = [...attributes]\n    const attrIds = Object.keys(hashTable)\n\n    // more simple attempt.\n    // put the toy back in the toybox\n    for (const attrId of attrIds) {\n      // when you get to the item that was updated.\n      if (parseInt(attrId) == updatedAttrId) {\n        //if there was a previous selection,\n        if (localHashTable[attrId].selectedVal != '--') {\n          // find the value that has to be put back into the pool\n          const valToPutBack = localHashTable[attrId].selectedVal\n\n          // looping them again\n          for (const attrId of attrIds) {\n            //skip the attr that was updated\n            //@ts-ignore\n            if (attrId == updatedAttrId) {\n              continue\n            }\n\n            //make sure it doesn't have the val somehow\n            const indexOfValToPutBack =\n              localHashTable[attrId].availOptions.indexOf(valToPutBack)\n            // as long as it doesn't already have it\n            if (indexOfValToPutBack == -1) {\n              const whereToPutItBack = _getIndexOfCorrectOptForThisPool(\n                valToPutBack,\n                localHashTable[attrId].availOptions\n              )\n              //put that selection back in the pool for all the other items\n              localHashTable[attrId].availOptions.splice(\n                whereToPutItBack,\n                0,\n                valToPutBack\n              )\n            }\n          }\n        }\n\n        //update the previous selection val to keep the state clean\n        localHashTable[updatedAttrId].selectedVal = newSelectedScore\n        break\n      }\n    }\n\n    // pull the new toy out of the toybox\n    if (newSelectedScore != '--') {\n      for (const attrId of attrIds) {\n        // ignore the updated item\n        if (parseInt(attrId) === updatedAttrId) {\n          continue\n        }\n\n        // for all others\n\n        // get an easier reference\n        const thisAttrOptsPool = hashTable[attrId].availOptions\n        // IMPORTANT NOTE: index will almost certainly vary between attributes, SO\n        // we must figure out the right index in THIS pool\n        const indexOfItemInThisAttrOptsPool =\n          thisAttrOptsPool.indexOf(newSelectedScore)\n        // double check to make sure the item is in the pool\n        if (indexOfItemInThisAttrOptsPool != -1) {\n          // splice the item that was added at the correct index for THIS options pool.\n          thisAttrOptsPool.splice(indexOfItemInThisAttrOptsPool, 1)\n        }\n      }\n    }\n\n    // set the damned state\n    setHashTable(localHashTable)\n\n    // update the attribute prop for export\n    for (const attr of localAttributes) {\n      if (attr.id == updatedAttrId) {\n        if (newSelectedScore == '--') {\n          attr.previousAssignedScore = attr.currentAssignedScore\n          attr.currentAssignedScore = 8 // setting this 8 so it behaves consistently with the parent component\n          callbackToSetAttributes(localAttributes) // callback handler;\n          return\n        }\n\n        attr.previousAssignedScore = attr.currentAssignedScore\n        attr.currentAssignedScore = parseInt(newSelectedScore)\n        callbackToSetAttributes(localAttributes) // callback handler;\n        return\n      }\n    }\n  }\n\n  return (\n    <div className='space-y-4'>\n      <div>\n        <form>\n          <div className='grid grid-cols-6 gap-x-2'>\n            {attributes.map((attr) => {\n              return (\n                <div key={attr.name}>\n                  <div className='text-sm text-center uppercase font-roboto font-bold rounded-t bg-dark text-white p-1'>\n                    {attr.name}\n                  </div>\n                  <select\n                    className='w-full border rounded-b text-xl p-2'\n                    onChange={handleSelection}\n                  >\n                    {hashTable[attr.id].availOptions.map((opt: string) => {\n                      return (\n                        <option\n                          value={opt + '_' + attr.id}\n                          key={opt + '_' + attr.id}\n                        >\n                          {opt}\n                        </option>\n                      )\n                    })}\n                  </select>\n                </div>\n              )\n            })}\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport default StandardArray\n\nfunction _buildHashMap(attributes: any) {\n  let hashMap: any = {}\n\n  for (const attr of attributes) {\n    hashMap[attr.id] = {\n      selectedVal: '--',\n      availOptions: _getStandardArrayValues(),\n    }\n  }\n\n  return hashMap\n}\n\nfunction _getStandardArrayValues() {\n  return ['--', '8', '10', '12', '13', '14', '15']\n}\n\nfunction _getIndexOfCorrectOptForThisPool(\n  comparisonVal: string,\n  someFlatArray: []\n) {\n  const compInt = parseInt(comparisonVal)\n  // first item is always '--', so skip\n  for (let i = 1; i < someFlatArray.length; i++) {\n    const num = parseInt(someFlatArray[i])\n    if (compInt < num) {\n      return i\n    }\n  }\n\n  return someFlatArray.length\n}\n","import React, { Dispatch, SetStateAction, useState } from 'react'\nimport { AttributeInterface } from '../../../lib/types'\nimport { tryParseInt } from '../../../lib/utils'\ninterface Props {\n  attributesImmutable: AttributeInterface[]\n  callbackToSetAttributes: Dispatch<SetStateAction<AttributeInterface[]>>\n}\n\nconst ManualOption: React.FC<Props> = ({\n  attributesImmutable,\n  callbackToSetAttributes,\n}) => {\n  const [attributes, setAttributes] =\n    useState<AttributeInterface[]>(attributesImmutable)\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    attrId: number\n  ) => {\n    const newAttributeScore = getValidScore(event.target.value)\n\n    if (!newAttributeScore) {\n      event.target.value = ''\n      console.error('Not a valid input')\n      return\n    }\n\n    const tempAttrs = attributes.map((a) => {\n      if (a.id === attrId) {\n        a.previousAssignedScore = a.currentAssignedScore || newAttributeScore\n        a.currentAssignedScore = newAttributeScore\n      }\n      return a\n    })\n    \n    callbackToSetAttributes(tempAttrs) // callback handler\n    setAttributes(tempAttrs)\n  }\n\n  return (\n    <form>\n      <div className='grid grid-cols-6 gap-x-2'>\n        {attributes.map((attr) => {\n          return (\n            <div key={attr.id}>\n              <div className='text-sm text-center uppercase font-roboto font-bold rounded-t bg-dark text-white p-1'>\n                {attr.name}\n              </div>\n              <input\n                className='w-full border rounded-b text-xl p-2'\n                onBlur={(event) => {\n                  handleChange(event, attr.id)\n                  event.target.value = getValidScore(\n                    event.target.value\n                  ).toString()\n                }}\n              />\n            </div>\n          )\n        })}\n      </div>\n    </form>\n  )\n}\n\nexport default ManualOption\n\nfunction getValidScore(value: string) {\n  // rules:\n  // 2 & 31 are out of bounds\n  // must be int\n\n  if (tryParseInt(value, false) === false) {\n    return ''\n  }\n\n  const intVal = parseInt(value)\n\n  // greater than 30 -> return 30\n  if (intVal > 30) return 30\n  // less than 3 -> return 3\n  if (intVal < 3) return 3\n  // return value\n  return intVal\n}\n","import React, { useState } from 'react'\nimport { AttributeInterface } from '../../../lib/types'\n\ninterface Props {\n  attributesImmutable: AttributeInterface[]\n}\n\ntype BonusesType = {\n  [key: string]: number\n}\n\nconst getBonusDisplayVal = (val: number) => {\n  return Math.sign(val) === 1 ? `+${val}` : val\n}\n\nconst bonuses: BonusesType = {\n  '3': -4,\n  '4': -3,\n  '5': -3,\n  '6': -2,\n  '7': -2,\n  '8': -1,\n  '9': -1,\n  '10': 0,\n  '11': 0,\n  '12': 1,\n  '13': 1,\n  '14': 2,\n  '15': 2,\n  '16': 3,\n  '17': 3,\n  '18': 4,\n  '19': 4,\n  '20': 5,\n  '21': 5,\n  '22': 6,\n  '23': 6,\n  '24': 7,\n  '25': 7,\n  '26': 8,\n  '27': 8,\n  '28': 9,\n  '29': 9,\n  '30': 10,\n}\n\nconst AttributeCardBlock = ({ attributesImmutable }: Props) => (\n  <div className='grid grid-cols-3 gap-x-6 gap-4'>\n    {attributesImmutable.map((attr) => {\n      return (\n        <div className='attr-block border rounded bg-white' key={attr.id}>\n          <div className='rounded-t bg-dark border-black p-2 text-white font-roboto text-sm text-center font-bold uppercase'>\n            {attr.name}\n          </div>\n          <div>\n            <div className='grid grid-cols-2 font-roboto'>\n              <div className='border-b p-4 text-left'>Base</div>\n              <div className='border-b p-4 border-l-4 bg-gray-100 text-xl text-center font-roboto font-bold'>\n                {attr.currentAssignedScore}\n              </div>\n              <div className='border-b p-4 text-left'>Modifer</div>\n              <div className='border-b p-4 border-l-4 bg-gray-100 text-xl text-center font-roboto font-bold'>\n                {getBonusDisplayVal(bonuses[attr.currentAssignedScore])}\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    })}\n  </div>\n)\n\nexport default AttributeCardBlock\n","import React, { useState } from 'react'\nimport { AttributeInterface } from '../../lib/types'\nimport PointBuy from './options/point-buy'\nimport StandardArray from './options/standard'\nimport ManualOption from './options/manual'\nimport AttributeCardBlock from './options/card-block'\nimport { cloneDeep } from 'lodash'\n\ntype ActiveMethodType = 'PointBuy' | 'StandardArray' | 'Manual'\n\nconst defaultAttributes = [\n  {\n    id: 1,\n    name: 'Strength',\n    currentAssignedScore: 8,\n    previousAssignedScore: 8,\n  },\n  {\n    id: 2,\n    name: 'Dexterity',\n    currentAssignedScore: 8,\n    previousAssignedScore: 8,\n  },\n  {\n    id: 3,\n    name: 'Constitution',\n    currentAssignedScore: 8,\n    previousAssignedScore: 8,\n  },\n  {\n    id: 4,\n    name: 'Intelligence',\n    currentAssignedScore: 8,\n    previousAssignedScore: 8,\n  },\n  {\n    id: 5,\n    name: 'Wisdom',\n    currentAssignedScore: 8,\n    previousAssignedScore: 8,\n  },\n  {\n    id: 6,\n    name: 'Charisma',\n    currentAssignedScore: 8,\n    previousAssignedScore: 8,\n  },\n]\n\nconst AsiGenerator: React.FC = () => {\n  const [activeMethod, setActiveMethod] = useState<ActiveMethodType>('PointBuy')\n  const [attributes, setAttributes] =\n    useState<AttributeInterface[]>(cloneDeep(defaultAttributes))\n\n  const methods = [\n    { id: 'PointBuy', name: 'Point Buy' },\n    { id: 'StandardArray', name: 'Standard Array' },\n    { id: 'Manual', name: 'Manual' },\n  ]\n\n  const handleMethodChange = (event: React.ChangeEvent<any>) => {\n    setActiveMethod(event.target.value)\n    setAttributes(cloneDeep(defaultAttributes))\n  }\n\n  return (\n    <div className='space-y-4'>\n      <div>\n        <div>\n          <select\n            className='w-full border rounded text-xl p-2'\n            onChange={handleMethodChange}\n          >\n            {methods.map((method) => {\n              return (\n                <option value={method.id} key={method.id}>\n                  {method.name}\n                </option>\n              )\n            })}\n          </select>\n        </div>\n      </div>\n\n      {activeMethod === 'PointBuy' && (\n        <PointBuy\n          callbackToSetAttributes={setAttributes}\n          attributesImmutable={attributes}\n        />\n      )}\n      {activeMethod === 'StandardArray' && (\n        <StandardArray\n          callbackToSetAttributes={setAttributes}\n          attributes={attributes}\n        />\n      )}\n      {activeMethod === 'Manual' && (\n        <ManualOption\n          callbackToSetAttributes={setAttributes}\n          attributesImmutable={attributes}\n        />\n      )}\n\n      <div className='pt-12'>\n        <AttributeCardBlock attributesImmutable={attributes} />\n      </div>\n    </div>\n  )\n}\n\nexport default AsiGenerator\n","import React, { useState } from 'react'\n\ninterface Props {\n  skillOptions: SkillType[]\n  numberOfSkillsGranted: number\n}\n\ninterface SkillType {\n  name: string\n  isAutoGranted: boolean\n}\n\nconst SkillProficienciesSelector: React.FC<Props> = ({\n  skillOptions,\n  numberOfSkillsGranted,\n}) => {\n  const [validSkillOptions] = useState(_getValidOptions(skillOptions))\n\n  const currentBgRequiresChoice = _areSkillOptionChoicesRequired(skillOptions)\n\n  if (!currentBgRequiresChoice) {\n    return <div></div>\n  }\n\n  const numOfSelectElemsToGenerate = _calcNumOfSelectElemsToGenerate(\n    numberOfSkillsGranted,\n    skillOptions\n  )\n  const dummy_array_to_help_generate_correct_num_of_select_elems =\n    _buildArrayWithThisManyItems(numOfSelectElemsToGenerate)\n\n  return (\n    <div className='space-y-4'>\n      {dummy_array_to_help_generate_correct_num_of_select_elems.map((x) => {\n        return (\n          <div key={x * 25}>\n            <select className='w-full border rounded-b text-xl p-2'>\n              <option value='' selected>\n                - Choose a Skill -\n              </option>\n              {validSkillOptions.map((skill) => {\n                return <option key={skill.name}>{skill.name}</option>\n              })}\n            </select>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default SkillProficienciesSelector\n\nfunction _getValidOptions(skills: SkillType[]) {\n  let validOptions = []\n\n  for (const skill of skills) {\n    if (skill.isAutoGranted === false) {\n      validOptions.push(skill)\n    }\n  }\n\n  return validOptions\n}\n\nfunction _areSkillOptionChoicesRequired(skillOptsArray: SkillType[]) {\n  for (const skill of skillOptsArray) {\n    if (!skill.isAutoGranted) {\n      return true\n    }\n  }\n\n  return false\n}\n\nfunction _calcNumOfSelectElemsToGenerate(\n  numOfSkillsGranted: number,\n  skillOptionsArray: SkillType[]\n) {\n  let numOfSkillsAutoGranted = 0\n\n  for (const skill of skillOptionsArray) {\n    if (skill.isAutoGranted) {\n      numOfSkillsAutoGranted++\n    }\n  }\n\n  return numOfSkillsGranted - numOfSkillsAutoGranted\n}\n\nfunction _buildArrayWithThisManyItems(elemsRequired: number) {\n  const someArray = []\n\n  for (let i = 0; i < elemsRequired; i++) {\n    someArray.push(i)\n  }\n\n  return someArray\n}\n","import React, { useState } from 'react'\nimport { EquipmentDataType } from './../../lib/types'\ninterface ToolType {\n  name: string\n  isAutoGranted: boolean\n}\n\ninterface Props {\n  equipment: EquipmentDataType[]\n  allToolOptions: ToolType[]\n  numberOfToolsGranted: number\n}\n\nconst getValidOptions = (\n  tools: ToolType[],\n  extraEquipment: EquipmentDataType[]\n) => {\n  let standardOptions = []\n  let instruments: string[] = []\n  let artisanTools: string[] = []\n  let gamingSet: string[] = []\n\n  for (const tool of tools) {\n    if (tool.name === 'Musical Instrument') {\n      if (!instruments.length) {\n        instruments = extraEquipment\n          .filter((x) => x.type === 'instrument')\n          .map((x) => x.name)\n      }\n      continue\n    }\n\n    if (tool.name === \"Artisan's Tools\") {\n      if (!artisanTools.length) {\n        artisanTools = extraEquipment\n          .filter((x) => x.type === 'artisan')\n          .map((x) => x.name)\n      }\n      continue\n    }\n\n    if (tool.name === 'Gaming Set') {\n      if (!gamingSet.length) {\n        gamingSet = extraEquipment\n          .filter((x) => x.type === 'gaming')\n          .map((x) => x.name)\n      }\n      continue\n    }\n\n    if (tool.isAutoGranted === false) {\n      standardOptions.push(tool.name)\n    }\n  }\n\n  const validOptions = standardOptions.concat(\n    instruments,\n    artisanTools,\n    gamingSet\n  )\n\n  return validOptions\n}\n\nconst areToolOptionChoicesRequired = (toolOptsArray: ToolType[]) => {\n  for (const tool of toolOptsArray) {\n    if (!tool.isAutoGranted) {\n      return true\n    }\n  }\n  return false\n}\n\nconst calcNumOfSelectElemsToGenerate = (\n  numOftoolsGranted: number,\n  toolOptionsArray: ToolType[]\n) => {\n  let numOftoolsAutoGranted = 0\n  for (const tool of toolOptionsArray) {\n    if (tool.isAutoGranted) {\n      numOftoolsAutoGranted++\n    }\n  }\n  return numOftoolsGranted - numOftoolsAutoGranted\n}\n\nconst buildArrayWithThisManyItems = (elemsRequired: number) => {\n  const someArray = []\n\n  for (let i = 0; i < elemsRequired; i++) {\n    someArray.push(i)\n  }\n\n  return someArray\n}\n\nconst ToolProficienciesSelector: React.FC<Props> = ({\n  equipment,\n  allToolOptions,\n  numberOfToolsGranted,\n}) => {\n  const currentBgRequiresChoice = areToolOptionChoicesRequired(allToolOptions)\n  const [validToolOptions] = useState(\n    getValidOptions(allToolOptions, equipment)\n  )\n\n  if (!currentBgRequiresChoice) {\n    return null\n  }\n\n  const numOfSelectElemsToGenerate = calcNumOfSelectElemsToGenerate(\n    numberOfToolsGranted,\n    allToolOptions\n  )\n\n  const emptyArrayOfCorrectLen = buildArrayWithThisManyItems(\n    numOfSelectElemsToGenerate\n  )\n\n  return (\n    <div className='space-y-4'>\n      {emptyArrayOfCorrectLen.map((x) => {\n        return (\n          <div key={x * 25}>\n            <select\n              className='w-full border rounded-b text-xl p-2'\n              defaultValue={''}\n            >\n              <option value=''>- Choose a tool -</option>\n              {validToolOptions.map((tool) => {\n                return <option key={tool}>{tool}</option>\n              })}\n            </select>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default ToolProficienciesSelector\n","import React from 'react'\nimport { LanguageType } from './../../lib/types'\n\ninterface LanguageOptionConstraints {\n  name: string\n  isAutoGranted: boolean\n}\n\ninterface Props {\n  numberOfLanguagesGranted: number\n  languageOptionConstraints: LanguageOptionConstraints[]\n  languages: LanguageType[]\n}\n\nconst getKeyReferenceForLanguage = (\n  languageOptionConstraints: LanguageOptionConstraints[]\n) => {\n  if (languageOptionConstraints[0].name == 'ANY') {\n    return 'ALL'\n  }\n  if (languageOptionConstraints[0].name == 'EXOTIC') {\n    return 'EXOTIC'\n  }\n  return 'STANDARD'\n}\n\nconst areLanguageOptionChoicesRequired = (\n  languageOptsArray: LanguageOptionConstraints[]\n) => {\n  for (const language of languageOptsArray) {\n    if (!language.isAutoGranted) {\n      return true\n    }\n  }\n  return false\n}\n\nconst LanguageSelector: React.FC<Props> = ({\n  numberOfLanguagesGranted,\n  languageOptionConstraints,\n  languages,\n}) => {\n  const getValidLanguageOptions = () => {\n    const correctKeyReference = getKeyReferenceForLanguage(\n      languageOptionConstraints\n    )\n\n    if (correctKeyReference == 'ALL') {\n      return languages\n    }\n    return languages.filter((l) => l.type === correctKeyReference.toLowerCase())\n  }\n\n  const calcNumOfSelectElemsToGenerate = () => {\n    let numOfLanguagesAutoGranted = 0\n\n    for (const language of languageOptionConstraints) {\n      if (language.isAutoGranted) {\n        numOfLanguagesAutoGranted++\n      }\n    }\n\n    return numberOfLanguagesGranted - numOfLanguagesAutoGranted\n  }\n\n  const buildDummyArrayOfCorrectLength = () => {\n    const elemsRequired = calcNumOfSelectElemsToGenerate()\n    const someArray = []\n\n    for (let i = 0; i < elemsRequired; i++) {\n      someArray.push(i)\n    }\n\n    return someArray\n  }\n\n  const currentBgRequiresChoice = areLanguageOptionChoicesRequired(\n    languageOptionConstraints\n  )\n\n  if (!currentBgRequiresChoice) {\n    return <div></div>\n  }\n\n  const validLanguageOptions = getValidLanguageOptions()\n  const dummy_array_to_generate_correct_num_of_select_elems =\n    buildDummyArrayOfCorrectLength()\n\n  return (\n    <div className='space-y-4'>\n      {dummy_array_to_generate_correct_num_of_select_elems.map((x) => {\n        return (\n          <div key={x * 25}>\n            <select className='w-full border rounded-b text-xl p-2'>\n              <option value='' selected>\n                - Choose a Language -\n              </option>\n              {validLanguageOptions.map((language) => {\n                return <option key={language.name}>{language.name}</option>\n              })}\n            </select>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default LanguageSelector\n","import React, { useState } from 'react'\n\nimport {\n  SkillDataType,\n  EquipmentDataType,\n  BackgroundFeatureDataType,\n  LanguageType,\n} from '../../lib/types'\n\ninterface Props {\n  skillsData: SkillDataType\n  languageData: any //LanguageDataType\n  equipment: EquipmentDataType\n  bgFeatures: BackgroundFeatureDataType[]\n}\n\n// TODO\n// for background features:\n//      sort them alphabetically, remove nonunique callers if going by feat name rather than conferring bg\n\nconst buildSkillsBlock = (\n  numOfSelectElems: number,\n  skillsData: SkillDataType[]\n) => {\n  const dummy_array = buildDummyArrayToMapOver(numOfSelectElems)\n\n  return (\n    <div className='space-y-4'>\n      <div>\n        <strong>Skill Proficiencies:</strong>\n      </div>\n      {dummy_array.map((x) => {\n        return (\n          <div key={'skills-dropdown-' + x}>\n            <select className='w-full border rounded-b text-xl p-2'>\n              <option value=''>- Choose a Skill -</option>\n              {skillsData.map((skill) => {\n                return (\n                  <option key={skill.skill} value={skill.skill}>\n                    {skill.skill}\n                  </option>\n                )\n              })}\n            </select>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nconst buildToolsBlock = (\n  numOfSelectElems: number,\n  equipment: EquipmentDataType[]\n) => {\n  const dummy_array = buildDummyArrayToMapOver(numOfSelectElems)\n  const sortedTools = [...equipment].sort()\n\n  return (\n    <div className='space-y-4'>\n      <div>\n        <strong>Tools Proficiencies:</strong>\n      </div>\n      {dummy_array.map((x) => {\n        return (\n          <div key={'tool-dropdown-' + x}>\n            <select className='w-full border rounded-b text-xl p-2'>\n              <option value=''>- Choose a Tool -</option>\n              {sortedTools.map((tool) => {\n                return (\n                  <option key={tool.name} value={tool.name}>\n                    {tool.name}\n                  </option>\n                )\n              })}\n            </select>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nconst buildLanguagesBlock = (\n  numOfSelectElems: number,\n  languages: LanguageType[]\n) => {\n  const dummy_array = buildDummyArrayToMapOver(numOfSelectElems)\n\n  return (\n    <div className='space-y-4'>\n      <div>\n        <strong>Languages:</strong>\n      </div>\n      {dummy_array.map((x) => {\n        return (\n          <div key={'language-dropdown-' + x}>\n            <select className='w-full border rounded-b text-xl p-2'>\n              <option value=''>- Choose a Language -</option>\n              {languages.map((language) => {\n                return (\n                  <option key={language.name} value={language.name}>\n                    {language.name}\n                  </option>\n                )\n              })}\n            </select>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nconst buildBgFeatureBlock = (\n  bgFeatures: BackgroundFeatureDataType[],\n  displayBgFeatureDetailClosure: any\n) => {\n  return (\n    <div>\n      <div>\n        <strong>Background Features:</strong>\n      </div>\n      <select className='w-full border rounded-b text-xl p-2' onChange={displayBgFeatureDetailClosure}>\n        <option value=''>- Choose a Background Feature -</option>\n        {bgFeatures.map((feat) => {\n          return <option value={feat.name}>{feat.name}</option>\n        })}\n      </select>\n    </div>\n  )\n}\n\nconst buildDummyArrayToMapOver = (elemsRequired: number) => {\n  let dummyArray = []\n\n  for (let i = 0; i < elemsRequired; i++) {\n    dummyArray.push(i)\n  }\n\n  return dummyArray\n}\n\nconst CustomBgSelector: React.FC<Props> = ({\n  skillsData,\n  languageData,\n  equipment,\n  bgFeatures,\n}) => {\n  const customOptionReferenceConstants = {\n    two_tools: 1,\n    two_languages: 2,\n    one_and_one: 3,\n  }\n\n  const customOptions = [\n    {\n      id: customOptionReferenceConstants['two_tools'],\n      display: '2 Skills and 2 Tools',\n    },\n    {\n      id: customOptionReferenceConstants['two_languages'],\n      display: '2 Skills and 2 Languages',\n    },\n    {\n      id: customOptionReferenceConstants['one_and_one'],\n      display: '2 Skills, 1 Tool, and 1 Language',\n    },\n  ]\n\n  const [data] = useState<any>({\n    skillsData: skillsData,\n    languageData: languageData.ALL,\n    equipment: equipment,\n    bgFeatures: bgFeatures,\n  })\n\n  const [customOptionIsSelected, setCustomOptionIsSelected] = useState(false)\n  const [selectedCustomRuleOption, setSelectedCustomRuleOption] = useState<any>(\n    {}\n  )\n  const [backgroundFeatureIsSelected, setBackgroundFeatureIsSelected] =\n    useState(false)\n  const [selectedBgFeature, setSelectedBgFeature] = useState<any>({})\n\n  const handleSelection = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setCustomOptionIsSelected(true)\n    setSelectedCustomRuleOption(event.target.value)\n  }\n\n  const displayBgFeatureDetail = (\n    event: React.ChangeEvent<HTMLSelectElement>\n  ) => {\n    const selectedBgName = event.target.value\n\n    let bgFeatToSave\n\n    for (const bgFeat of data.bgFeatures) {\n      if (selectedBgName == bgFeat.name) {\n        bgFeatToSave = bgFeat\n        break\n      }\n    }\n\n    setBackgroundFeatureIsSelected(true)\n    setSelectedBgFeature(bgFeatToSave ? bgFeatToSave : {})\n  }\n\n  const buildProficiencySelectorsBlock = () => {\n    if (!customOptionIsSelected) {\n      return null\n    }\n\n    let fullBlockToReturn\n\n    const { skillsData, languageData, equipment, bgFeatures } = data\n\n    const skills_block = buildSkillsBlock(2, skillsData)\n    const bg_feature_block = buildBgFeatureBlock(\n      bgFeatures,\n      displayBgFeatureDetail\n    )\n\n    if (\n      selectedCustomRuleOption == customOptionReferenceConstants['two_tools']\n    ) {\n      const toolsBlock = buildToolsBlock(2, equipment)\n\n      fullBlockToReturn = (\n        <div className='space-y-4'>\n          {skills_block}\n          {toolsBlock}\n          {bg_feature_block}\n        </div>\n      )\n    }\n\n    if (\n      selectedCustomRuleOption ==\n      customOptionReferenceConstants['two_languages']\n    ) {\n      const languagesBlock = buildLanguagesBlock(2, languageData)\n\n      fullBlockToReturn = (\n        <div className='space-y-4'>\n          {skills_block}\n          {languagesBlock}\n          {bg_feature_block}\n        </div>\n      )\n    }\n\n    if (\n      selectedCustomRuleOption == customOptionReferenceConstants['one_and_one']\n    ) {\n      const toolsBlock = buildToolsBlock(1, equipment)\n      const languagesBlock = buildLanguagesBlock(1, languageData)\n\n      fullBlockToReturn = (\n        <div className='space-y-4'>\n          {skills_block}\n          {toolsBlock}\n          {languagesBlock}\n          {bg_feature_block}\n        </div>\n      )\n    }\n\n    return fullBlockToReturn\n  }\n\n  const buildBackgroundFeatureInfoBlock = () => {\n    if (backgroundFeatureIsSelected == false) {\n      return <div></div>\n    }\n\n    return (\n      <div>\n        <div>\n          <div>{selectedBgFeature.name}</div>\n          <div>\n            <span className='text-muted'>Background Feature | </span>\n            <span className='text-muted'>{selectedBgFeature.conferringBg}</span>\n          </div>\n        </div>\n        <div>\n          <div>{selectedBgFeature.description}</div>\n        </div>\n      </div>\n    )\n  }\n\n  const customProficiencySelectorsBlock = buildProficiencySelectorsBlock()\n  const backgroundFeatureInfoBlock = buildBackgroundFeatureInfoBlock()\n\n  return (\n    <div className='space-y-4'>\n      <div>\n        <select className='w-full border rounded-b text-xl p-2' onChange={handleSelection}>\n          <option value=''>Choose an Option</option>\n          {customOptions.map((opt) => {\n            return (\n              <option key={opt.id} value={opt.id}>\n                {opt.display}\n              </option>\n            )\n          })}\n        </select>\n      </div>\n\n      {customProficiencySelectorsBlock}\n      {backgroundFeatureInfoBlock}\n    </div>\n  )\n}\n\nexport default CustomBgSelector\n","import React, { useState } from 'react'\n\nimport {\n  useGetAllLanguagesQuery,\n  useAllEquipmentQuery,\n  useAllBgFeaturesQuery,\n  useAllSkillsQuery,\n  useAllBgsQuery,\n} from '../../generated/graphql'\n\nimport SkillProficienciesSelector from './skill'\nimport ToolProficienciesSelector from './tool'\nimport LanguageSelector from './language'\nimport CustomBgSelector from './custom-bg'\n\nimport { BgOptionGenericType } from './../../lib/types'\n\nconst PhysicalCharacteristicsChunk = () => {\n  return (\n    <div className='space-y-4'>\n      <div>\n        <strong className='text-gray-700'>Physical Characteristics:</strong>\n      </div>\n      <div>\n        <div>\n          <strong className='text-gray-700'>Hair</strong>\n        </div>\n        <div>\n          <input className='w-full border rounded text-xl p-2'></input>\n        </div>\n      </div>\n      <div>\n        <div>\n          <strong className='text-gray-700'>Skin</strong>\n        </div>\n        <div>\n          <input className='w-full border rounded text-xl p-2'></input>\n        </div>\n      </div>\n      <div>\n        <div>\n          <strong className='text-gray-700'>Eyes</strong>\n        </div>\n        <div>\n          <input className='w-full border rounded text-xl p-2'></input>\n        </div>\n      </div>\n      <div>\n        <div>\n          <strong className='text-gray-700'>Height</strong>\n        </div>\n        <div>\n          <input className='w-full border rounded text-xl p-2'></input>\n        </div>\n      </div>\n      <div>\n        <div>\n          <strong className='text-gray-700'>Weight</strong>\n        </div>\n        <div>\n          <input className='w-full border rounded text-xl p-2'></input>\n        </div>\n      </div>\n      <div>\n        <div>\n          <strong className='text-gray-700'>Age</strong>\n        </div>\n        <div>\n          <input className='w-full border rounded text-xl p-2'></input>\n        </div>\n      </div>\n      <div>\n        <div>\n          <strong className='text-gray-700'>Gender</strong>\n        </div>\n        <div>\n          <input className='w-full border rounded text-xl p-2'></input>\n        </div>\n      </div>\n    </div>\n  )\n}\n\ninterface ISelectedBackgroundProps {\n  selectedBg: any\n  equipment: any\n  languages: any\n  bgFeatures: any\n  skills: any\n  children?: React.ReactNode\n}\n\nconst SelectedBgChunks: React.FC<ISelectedBackgroundProps> = (\n  props: ISelectedBackgroundProps\n) => {\n  if (!props.selectedBg) return null\n\n  const { selectedBg, equipment, languages, skills, bgFeatures } = props\n  // make sure to return early in this condition state since the bg will no longer\n  // be null, but rather the full object\n  if (selectedBg.name == 'Custom Background') {\n    return (\n      <CustomBgSelector\n        skillsData={skills.allSkills.skills}\n        languageData={languages.allLanguages.languages}\n        equipment={equipment.allEquipment.items}\n        bgFeatures={bgFeatures.allBgFeatures.bgFeatures}\n      ></CustomBgSelector>\n    )\n  }\n\n  const skillsChunk = () => {\n    return (\n      <div className='space-y-4'>\n        <div>\n          <div>{selectedBg.description}</div>\n        </div>\n        <div>\n          <strong className='text-gray-700'>Skill Proficiencies: </strong>\n          {\n            //@ts-ignore\n            JSON.parse(selectedBg.skillOptions).options.map((skill, index) => {\n              const isLast =\n                index == selectedBg.skillOptions.length - 1 ? true : false\n\n              if (skill.isAutoGranted) {\n                const strChunk = isLast ? `${skill.name}` : `${skill.name}, `\n                return strChunk\n              }\n            })\n          }\n        </div>\n        <div>\n          <SkillProficienciesSelector\n            skillOptions={JSON.parse(selectedBg.skillOptions).options}\n            numberOfSkillsGranted={selectedBg.numberOfSkillsGranted}\n          ></SkillProficienciesSelector>\n        </div>\n      </div>\n    )\n  }\n\n  const languagesChunk = () => (\n    <div className='space-y-4'>\n      <div>\n        <strong className='text-gray-700'>Languages: </strong>\n        {JSON.parse(selectedBg.languageOptions).options.map(\n          (language: BgOptionGenericType, index: number) => {\n            const isLast =\n              index == selectedBg.languageOptions.length - 1 ? true : false\n            if (language.isAutoGranted) {\n              const strChunk = isLast\n                ? `${language.name}`\n                : `${language.name}, `\n              return strChunk\n            }\n          }\n        )}\n      </div>\n      <div>\n        <LanguageSelector\n          numberOfLanguagesGranted={selectedBg.numberOfExtraLanguages}\n          languageOptionConstraints={\n            JSON.parse(selectedBg.languageOptions).options\n          }\n          languages={languages.allLanguages.languages}\n        />\n      </div>\n    </div>\n  )\n\n  const toolsChunk = () => (\n    <div className='space-y-4'>\n      <div>\n        {JSON.parse(selectedBg.toolOptions).options.length ? (\n          <strong className='text-gray-700'>Tool Proficiencies: </strong>\n        ) : null}\n        {JSON.parse(selectedBg.toolOptions).options.map(\n          (tool: BgOptionGenericType, index: number) => {\n            const isLast =\n              index == selectedBg.toolOptions.length - 1 ? true : false\n\n            if (tool.isAutoGranted) {\n              const strChunk = isLast ? `${tool.name}` : `${tool.name}, `\n              return strChunk\n            }\n          }\n        )}\n      </div>\n      <div>\n        <ToolProficienciesSelector\n          allToolOptions={JSON.parse(selectedBg.toolOptions).options}\n          numberOfToolsGranted={selectedBg.numberOfToolsGranted}\n          equipment={equipment.allEquipment.items}\n        ></ToolProficienciesSelector>\n      </div>\n    </div>\n  )\n\n  const bgFeatureChunk = () => (\n    <div className='space-y-4'>\n      <div>\n        <strong className='text-gray-700'>Background Feature:</strong>\n      </div>\n      <div>{selectedBg.bgFeatureByBackgroundFeature.name}</div>\n      <div>{selectedBg.bgFeatureByBackgroundFeature.description}</div>\n    </div>\n  )\n\n  const alternateBgFeatureChunk = () => (\n    <div className='space-y-4'>\n      <div>\n        <strong className='text-gray-700'>Alternate Background Feature:</strong>\n      </div>\n      <div>\n        <div>{selectedBg.bgFeatureByAlternateBackgroundFeature?.name}</div>\n        <div>\n          {selectedBg.bgFeatureByAlternateBackgroundFeature?.description}\n        </div>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className='space-y-4'>\n      {skillsChunk()}\n      {toolsChunk()}\n      {selectedBg.languageOptions.length ? languagesChunk() : null}\n      {bgFeatureChunk()}\n      {selectedBg.bgFeatureByAlternateBackgroundFeature\n        ? alternateBgFeatureChunk()\n        : null}\n    </div>\n  )\n}\n\nconst CharDescript: React.FC = () => {\n  const [selectedBg, setSelectedBg] = useState<any>(null)\n  const { data: backgrounds, loading: bgsLoading } = useAllBgsQuery()\n  const { data: languages, loading: langLoading } = useGetAllLanguagesQuery()\n  const { data: equipment, loading: equipLoading } = useAllEquipmentQuery()\n  const { data: bgFeatures, loading: bgFeatLoading } = useAllBgFeaturesQuery()\n  const { data: skills, loading: skillLoading } = useAllSkillsQuery()\n\n  const handleBgSelection = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const chosenBgName = event.target.value\n\n    if (!chosenBgName) {\n      setSelectedBg(null)\n    }\n    if (!backgrounds?.allBgs) {\n      return\n    }\n    for (const bg of backgrounds.allBgs?.nodes) {\n      if (chosenBgName == bg?.name) {\n        setSelectedBg(bg)\n        return\n      }\n    }\n  }\n\n  return (\n    <div className='space-y-4 max-w-screen-sm m-auto m-0'>\n      <div>\n        <div>\n          <div>\n            <strong className='text-gray-700'>Character Name:</strong>\n          </div>\n          <input className='w-full border rounded text-xl p-2'></input>\n        </div>\n      </div>\n      <div>\n        <div>\n          <strong className='text-gray-700'>Background:</strong>\n        </div>\n        <div>\n          <select className='w-full border rounded text-xl p-2' onChange={handleBgSelection}>\n            <option value='' selected>\n              -- Choose a Background ---\n            </option>\n            {backgrounds?.allBgs?.nodes.map((bg) => {\n              return bg && <option key={bg.name}>{bg.name}</option>\n            })}\n          </select>\n        </div>\n      </div>\n\n      <SelectedBgChunks\n        selectedBg={selectedBg}\n        equipment={equipment}\n        languages={languages}\n        bgFeatures={bgFeatures}\n        skills={skills}\n      />\n      <PhysicalCharacteristicsChunk />\n    </div>\n  )\n}\n\nexport default CharDescript\n","import React, { useState } from 'react'\nimport { SpellType } from './../../lib/types'\n\ninterface Props {\n  rawSpell: SpellType\n}\n\nconst formatSpell = (spell: any) => {\n  const range = JSON.parse(spell.range)\n  const formatted = { ...spell }\n  formatted.range = range\n  return formatted\n}\n\nconst buildDescTypeEntries = (desc: any) => {\n  return (\n    <div className='label-text-pair-outer space-y-4' key={_getRandoNum()}>\n      <div>{desc.name}.</div>\n      {desc.entries.map((entry: any) => {\n        if (typeof entry == 'string') {\n          return <div key={_getRandoNum()}>{entry}</div>\n        }\n        if (entry.type) {\n          return (\n            <ul key={_getRandoNum()}>\n              {entry.items.map((item: any) => {\n                return <li key={_getRandoNum()}>{item}</li>\n              })}\n            </ul>\n          )\n        }\n      })}\n    </div>\n  )\n}\n\nconst buildDescTypeStr = (desc: string) => {\n  return <div key={_getRandoNum()}>{desc}</div>\n}\n\nconst buildDescTypeList = (desc: any) => {\n  return (\n    <div key={_getRandoNum()}>\n      <ul>\n        {desc.items.map((item: string) => {\n          return <li key={_getRandoNum()}>{item}</li>\n        })}\n      </ul>\n    </div>\n  )\n}\n\nconst buildDescTypeTable = (desc: any) => {\n  // there are two types of tables\n  //prob need to figure out a less awful way to differentiate\n  let isType2 = false\n\n  try {\n    isType2 = desc.rows[0][0].type ? true : false\n  } catch {\n    isType2 = false\n  }\n\n  if (isType2 == true) {\n    return (\n      <div className='table-outer' key={_getRandoNum()}>\n        <div className='caption'>({desc.caption})</div>\n        <div className='table-inner'>\n          <div className='table-header'>\n            {desc.colLabels.map((label: string) => {\n              return (\n                <div className='table-col' key={_getRandoNum()}>\n                  {label}\n                </div>\n              )\n            })}\n          </div>\n          {desc.rows.map((row: any) => {\n            return (\n              <div key={_getRandoNum()} className='table-row'>\n                {row.map(\n                  (col: string | { roll: { min: number; max: number } }) => {\n                    if (typeof col != 'string') {\n                      const min =\n                        col.roll.min < 10 ? `0${col.roll.min}` : col.roll.min\n                      const max =\n                        col.roll.max < 10 ? `0${col.roll.max}` : col.roll.max\n                      const str = `${min} - ${max}`\n\n                      return (\n                        <div className='table-col' key={_getRandoNum()}>\n                          {str}\n                        </div>\n                      )\n                    }\n\n                    return (\n                      <div className='table-col' key={_getRandoNum()}>\n                        {col}\n                      </div>\n                    )\n                  }\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className='table-outer' key={_getRandoNum()}>\n      <div className='caption'>({desc.caption})</div>\n      <div className='table-inner'>\n        <div className='table-header'>\n          {desc.colLabels.map((label: string) => {\n            return (\n              <div className='table-col' key={_getRandoNum()}>\n                {label}\n              </div>\n            )\n          })}\n        </div>\n        {desc.rows.map((row: any) => {\n          return (\n            <div key={_getRandoNum()} className='table-row'>\n              {row.map((colTxt: string) => {\n                return (\n                  <div className='table-col' key={_getRandoNum()}>\n                    {colTxt}\n                  </div>\n                )\n              })}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst buildHigherLevelHtml = (higherLevel: string) => {\n  if (higherLevel) {\n    return (\n      <div className='label-text-pair-outer'>\n        <div>At Higher Levels.</div>\n        <div>{higherLevel}</div>\n      </div>\n    )\n  }\n  return null\n}\n\nconst buildSpellDescriptHtml = (spell: any) => {\n  const htmlDescriptChunkInner = []\n\n  for (const desc of spell.desc) {\n    if (typeof desc == 'string') {\n      htmlDescriptChunkInner.push(buildDescTypeStr(desc))\n      continue\n    }\n\n    if (desc.hasOwnProperty('type')) {\n      const type = desc.type\n\n      if (type === 'entries') {\n        htmlDescriptChunkInner.push(buildDescTypeEntries(desc))\n      }\n      if (type === 'list') {\n        htmlDescriptChunkInner.push(buildDescTypeList(desc))\n      }\n      if (type === 'table') {\n        htmlDescriptChunkInner.push(buildDescTypeTable(desc))\n      }\n    }\n  }\n\n  return <div className='space-y-4'>{htmlDescriptChunkInner}</div>\n}\n\nconst Spell: React.FC<Props> = ({ rawSpell }) => {\n  const [detailsActive, setDetailsActive] = useState<boolean>(false)\n  const [spell] = useState(formatSpell(rawSpell))\n\n  const rangeTextHash: any = {\n    point: {\n      touch: 'Touch',\n      self: 'Self',\n      sight: 'Sight',\n      unlimited: 'Unlimited',\n      amount: `${spell.range.distance?.amount} ${spell.range.distance?.type}`,\n    },\n    radius: `${spell.range.distance?.amount} ${spell.range.distance?.type} radius`,\n    sphere: `${spell.range.distance?.amount} ${spell.range.distance?.type} sphere`,\n    cone: `${spell.range.distance?.amount} ${spell.range.distance?.type} cone`,\n  }\n\n  const getRangeTextFromHash = () => {\n    const range = spell.range\n    const type = spell.range.type\n\n    if (type === 'point') {\n      if (range.distance.hasOwnProperty('amount')) {\n        return rangeTextHash.point.amount\n      }\n\n      return rangeTextHash.point[range.distance.type]\n    }\n\n    return rangeTextHash[type]\n  }\n\n  return (\n    <div className='bg-white'>\n      <div\n        className='spell-preview'\n        onClick={() => setDetailsActive(!detailsActive)}\n      >\n        <div className='spell-preview-name'>{spell.name}</div>\n        <div className='spell-preview-subhead'>\n          {spell.level}{' '}\n          {spell.concentration === true ? (\n            <span>&bull; Concentration</span>\n          ) : (\n            ''\n          )}\n        </div>\n        <span className='expand-spell'>\n          {detailsActive === false ? '+' : '-'}\n        </span>\n      </div>\n      <div\n        className={\n          detailsActive ? 'spell-detail active space-y-4' : 'spell-detail'\n        }\n      >\n        <div className='italic-lead'>\n          {spell.level} {spell.school}\n        </div>\n        <div>\n          <div className='label-text-pair-outer'>\n            <div>Casting Time.</div>\n            <div>{spell.castingTime}</div>\n          </div>\n          <div className='label-text-pair-outer'>\n            <div>Range/Area.</div>\n            <div>{getRangeTextFromHash()}</div>\n          </div>\n          <div className='label-text-pair-outer'>\n            <div>Components.</div>\n            <div>\n              {spell.components} {spell.material ? `(${spell.material})` : null}\n            </div>\n          </div>\n          <div className='label-text-pair-outer'>\n            <div>Duration.</div>\n            <div>{spell.duration}</div>\n          </div>\n          <div className='label-text-pair-outer'>\n            <div>Source.</div>\n            <div>{spell.page}</div>\n          </div>\n        </div>\n        <div>{buildSpellDescriptHtml(spell)}</div>\n        {buildHigherLevelHtml(spell.higherLevel)}\n      </div>\n    </div>\n  )\n}\n\nexport default Spell\n\nfunction _getRandoNum() {\n  return Math.random()\n}\n","import React, { useState } from 'react'\nimport './../../scss/Spells.scss'\nimport Spell from './spell'\nimport { useGetAllSpellsQuery } from './../../generated/graphql'\nimport classnames from 'classnames'\ninterface SpellLevel {\n  lvl: string\n  active: boolean\n}\n\nconst spellCasters = [\n  'Sorcerer',\n  'Wizard',\n  'Bard',\n  'Ranger',\n  'Cleric',\n  'Paladin',\n  'Fighter',\n  'Druid',\n  'Warlock',\n]\nconst spellLevels: SpellLevel[] = [\n  {\n    lvl: '0',\n    active: false,\n  },\n  {\n    lvl: '1',\n    active: false,\n  },\n  {\n    lvl: '2',\n    active: false,\n  },\n  {\n    lvl: '3',\n    active: false,\n  },\n  {\n    lvl: '4',\n    active: false,\n  },\n  {\n    lvl: '5',\n    active: false,\n  },\n  {\n    lvl: '6',\n    active: false,\n  },\n  {\n    lvl: '7',\n    active: false,\n  },\n  {\n    lvl: '8',\n    active: false,\n  },\n  {\n    lvl: '9',\n    active: false,\n  },\n]\n\nconst SpellsSelector: React.FC = () => {\n  const [selectedCaster, setSelectedCaster] = useState<string | null>(null)\n  const [filteredSpells, setFilteredSpells] = useState<any>(null)\n  const { data, loading } = useGetAllSpellsQuery()\n\n  const noSpellsFoundMessage =\n    filteredSpells?.length == 0 ? (\n      <div className='no-spells'>No spells found</div>\n    ) : null\n\n  if (!data || loading) {\n    return <div>Loading...</div>\n  }\n\n  if (data && !filteredSpells) {\n    setFilteredSpells(data?.allSpells?.spells || [])\n  }\n\n  const handleCasterListSelected = (\n    event: React.ChangeEvent<HTMLSelectElement>\n  ) => {\n    const caster = event.target.value\n    const spells = getCurrentFilteredSpells(caster, spellLevels)\n    setFilteredSpells(spells)\n    setSelectedCaster(caster)\n  }\n\n  const updateSpellLevelStates = (clickedSpellLevel: SpellLevel) => {\n    const targetIndex = spellLevels.indexOf(clickedSpellLevel)\n    spellLevels[targetIndex].active = !spellLevels[targetIndex].active\n    const filteredSpells = getCurrentFilteredSpells(selectedCaster, spellLevels)\n    setFilteredSpells(filteredSpells)\n  }\n\n  const getCurrentFilteredSpells = (\n    caster: string | null,\n    spellLevels: SpellLevel[]\n  ) => {\n    const allSpells = data?.allSpells?.spells\n    if (!allSpells) {\n      return []\n    }\n\n    let filteredSpells: any[] = []\n\n    type HashTable = {\n      filteringByLevel: boolean\n      [key: string]: boolean\n    }\n    // process the spell levels\n    let activeSpellLevelHash: HashTable = {\n      filteringByLevel: false,\n    }\n    // make a simple hash for quicker reference when we loop hundreds of spells\n    for (const lvl of spellLevels) {\n      if (lvl.active) {\n        activeSpellLevelHash.filteringByLevel = true\n        activeSpellLevelHash[lvl.lvl] = true\n      }\n    }\n\n    // this block will handle checking the spell matches both criteria\n    if (activeSpellLevelHash.filteringByLevel && caster) {\n      filteredSpells = allSpells.length\n        ? allSpells.filter((spell) => {\n            const eligCasters =\n              spell && spell.dndClass ? spell.dndClass.split(', ') : []\n            const levelIsIncluded = spell\n              ? activeSpellLevelHash[spell.levelInt]\n              : null\n            return eligCasters.includes(caster) && levelIsIncluded\n          })\n        : []\n    }\n\n    // we're only filtering by spell level\n    else if (activeSpellLevelHash.filteringByLevel) {\n      filteredSpells = allSpells.filter((spell) =>\n        spell ? activeSpellLevelHash[spell.levelInt] : false\n      )\n    }\n\n    // we're only filtering by caster\n    else if (caster) {\n      filteredSpells = allSpells.filter((spell) =>\n        spell?.dndClass?.split(', ').includes(caster)\n      )\n    }\n\n    return filteredSpells.length || caster ? filteredSpells : allSpells\n  }\n\n  return (\n    <div className='space-y-4'>\n      <div className='filter-block space-y-4'>\n        <div className='text-off-white font-bold'>Filter By:</div>\n        <div>\n          <select className='w-full border rounded-b text-xl p-2' onChange={handleCasterListSelected}>\n            <option value=''>Select a Caster List</option>\n            {spellCasters.map((caster) => {\n              return (\n                <option key={'s-c-' + caster} value={caster}>\n                  {caster}\n                </option>\n              )\n            })}\n          </select>\n        </div>\n        <div className='flex justify-between w-full px-10'>\n          {spellLevels.map((lvl) => {\n            return (\n              <div\n                onClick={() => updateSpellLevelStates(lvl)}\n                className={classnames({\n                  'bg-indigo-500 text-off-white': lvl.active,\n                  'bg-white text-indigo-500': lvl.active === false,\n                  'relative whitespace-nowrap h-12 w-12 rounded border-2 border-indigo-500 cursor:pointer':\n                    true,\n                })}\n                key={'s-l-' + lvl.lvl}\n              >\n                <span className='absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 font-bold'>\n                  - {lvl.lvl} -\n                </span>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n      <div className='space-y-4'>\n        {filteredSpells\n          ? filteredSpells.map((spell: any) => {\n              return (\n                <div\n                  className='rounded bg-white p-2 border-2 border-indigo-500'\n                  key={spell.slug}\n                >\n                  <Spell rawSpell={spell}></Spell>\n                </div>\n              )\n            })\n          : null}\n        {noSpellsFoundMessage}\n      </div>\n    </div>\n  )\n}\n\nexport default SpellsSelector\n","import React, { useState } from 'react'\nimport { useAllFeatsQuery } from './../../generated/graphql'\n\ninterface FeatInterface {\n  id: string\n  name: string\n  desc: string\n  points: string[]\n  prereq?: string\n}\n\nconst Feats: React.FC = () => {\n  const [focusedFeat, setFocusedFeat] = useState<FeatInterface | null>(null)\n  const { data, loading } = useAllFeatsQuery()\n\n  if (!data && loading) {\n    return <div>...Loading</div>\n  }\n\n  const handleMethodChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const feat = data?.allFeats?.feats.find(\n      (f) => f?.id == event.target.value\n    ) as FeatInterface\n    if (feat) {\n      setFocusedFeat(feat)\n    }\n  }\n\n  if (data && !focusedFeat) {\n    const feat = data?.allFeats?.feats[0] as FeatInterface\n    setFocusedFeat(feat)\n  }\n  if (data && data.allFeats && focusedFeat) {\n    return (\n      <div className='space-y-4'>\n        <div>\n          <select\n            className='w-full border rounded-b text-xl p-2'\n            onChange={(e) => handleMethodChange(e)}\n          >\n            {data.allFeats.feats.map((f) => {\n              if (f) {\n                return (\n                  <option value={f.id} key={f.id}>\n                    {f.name}\n                  </option>\n                )\n              }\n              return null\n            })}\n          </select>\n        </div>\n\n        <div>{focusedFeat.desc}</div>\n\n        {focusedFeat.prereq ? (\n          <div>Prerequisite: {focusedFeat.prereq}</div>\n        ) : null}\n\n        {focusedFeat.points && focusedFeat.points.length > 0 && (\n          <ul>\n            {focusedFeat.points.map((p: string, i: number) => {\n              return <li key={i}>{p}</li>\n            })}\n          </ul>\n        )}\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport default Feats\n","import React, { useState } from 'react'\n\nconst GeneralBlock: React.FC = () => {\n  const [hitDieRemaining, setHitDieRemaining] = useState(7)\n  const [showRemainingHitDieInput, toggleShowRemainingHitDieInput] =\n    useState(false)\n  return (\n    <div className='p-1 grid grid-cols-5'>\n      {/* initiative */}\n      <div className='flex align-center justify-center'>\n        <div>\n          <div className='font-roboto text-xs uppercase text-center mb-2'>\n            Initiative\n          </div>\n          <div className='border-2 border-red-400 rounded py-1 px-4 text-2xl text-center bg-white'>\n            +2\n          </div>\n        </div>\n      </div>\n      {/* AC */}\n      <div className='w-32 h-28 relative'>\n        <div className='z-20 relative pt-4'>\n          <div className='text-xs text-gray-400 font-roboto text-center'>\n            ARMOR\n          </div>\n          <div className='text-center font-roboto bold text-2xl'>18</div>\n          <div className='text-xs text-gray-400 font-roboto text-center'>\n            CLASS\n          </div>\n        </div>\n        <div className='absolute top-0 left-0 right-0 bottom-0 z-10'>\n          <svg\n            xmlns='http://www.w3.org/2000/svg'\n            viewBox='0 0 79 90'\n            className='w-full h-full'\n          >\n            <path\n              fill='#FEFEFE'\n              d='M72.8,30.7v13.7c-1,3.6-9.7,30.9-31.9,38.6c-0.3-0.4-0.8-0.7-1.4-0.7c-0.6,0-1,0.3-1.4,0.7\n                        C26,78.7,17.9,68.6,12.9,59.8c0,0,0,0,0,0c-0.3-0.5-0.6-1-0.8-1.5c-3.6-6.7-5.4-12.4-5.9-14V30.7c0.7-0.3,1.2-0.9,1.2-1.7\n                        c0-0.1,0-0.2-0.1-0.3c6.2-4,8.5-11.5,9.2-15.2L38.1,7c0.3,0.4,0.8,0.7,1.4,0.7c0.6,0,1.1-0.3,1.4-0.7l21.4,6.6\n                        c0.8,3.6,3,11.1,9.2,15.2V29c0,0.2,0,0.4,0.1,0.6C71.8,30.1,72.3,30.5,72.8,30.7z'\n            ></path>\n            <path\n              fill='rgba(248, 113, 113)'\n              d='M73.2,27.3c-0.4,0-0.8,0.2-1.1,0.4c-5.8-3.9-7.9-11.3-8.6-14.5l-0.1-0.4l-22-6.7c-0.1-0.9-0.8-1.7-1.8-1.7\n                        s-1.7,0.8-1.8,1.7l-22,6.7l-0.1,0.4c-0.6,3.2-2.7,10.6-8.6,14.5c-0.3-0.3-0.7-0.4-1.1-0.4c-1,0-1.8,0.8-1.8,1.9\n                        c0,0.8,0.5,1.5,1.2,1.7v13.5v0.2c0.9,3.2,9.7,31.2,32.4,39.2c0.1,1,0.8,1.8,1.8,1.8s1.8-0.8,1.8-1.8c9.3-3.3,17.3-10.1,23.8-20.4\n                        c5.3-8.4,7.9-16.5,8.6-18.8V30.9c0.7-0.3,1.2-0.9,1.2-1.7C75,28.1,74.2,27.3,73.2,27.3z M72.5,44.3c-1,3.6-9.6,30.5-31.5,38.2\n                        c-0.3-0.4-0.8-0.7-1.4-0.7c-0.6,0-1,0.3-1.4,0.7C16.3,74.8,7.8,47.9,6.7,44.3V30.9c0.7-0.3,1.2-0.9,1.2-1.7c0-0.1,0-0.2-0.1-0.3\n                        c6.1-4,8.4-11.4,9.1-15l21.3-6.5c0.3,0.4,0.8,0.7,1.4,0.7c0.6,0,1.1-0.3,1.4-0.7l21.2,6.5c0.8,3.6,3,11,9.1,15c0,0.1,0,0.2,0,0.3\n                        c0,0.8,0.5,1.5,1.2,1.7V44.3z M73.2,27.3c-0.4,0-0.8,0.2-1.1,0.4c-5.8-3.9-7.9-11.3-8.6-14.5l-0.1-0.4l-22-6.7\n                        c-0.1-0.9-0.8-1.7-1.8-1.7s-1.7,0.8-1.8,1.7l-22,6.7l-0.1,0.4c-0.6,3.2-2.7,10.6-8.6,14.5c-0.3-0.3-0.7-0.4-1.1-0.4\n                        c-1,0-1.8,0.8-1.8,1.9c0,0.8,0.5,1.5,1.2,1.7v13.5v0.2c0.9,3.2,9.7,31.2,32.4,39.2c0.1,1,0.8,1.8,1.8,1.8s1.8-0.8,1.8-1.8\n                        c9.3-3.3,17.3-10.1,23.8-20.4c5.3-8.4,7.9-16.5,8.6-18.8V30.9c0.7-0.3,1.2-0.9,1.2-1.7C75,28.1,74.2,27.3,73.2,27.3z M72.5,44.3\n                        c-1,3.6-9.6,30.5-31.5,38.2c-0.3-0.4-0.8-0.7-1.4-0.7c-0.6,0-1,0.3-1.4,0.7C16.3,74.8,7.8,47.9,6.7,44.3V30.9\n                        c0.7-0.3,1.2-0.9,1.2-1.7c0-0.1,0-0.2-0.1-0.3c6.1-4,8.4-11.4,9.1-15l21.3-6.5c0.3,0.4,0.8,0.7,1.4,0.7c0.6,0,1.1-0.3,1.4-0.7\n                        l21.2,6.5c0.8,3.6,3,11,9.1,15c0,0.1,0,0.2,0,0.3c0,0.8,0.5,1.5,1.2,1.7V44.3z M78.1,24.5c-8.7-1.8-9.9-14.9-9.9-15l-0.1-0.8L39.5,0\n                        L10.9,8.7l-0.1,0.8c0,0.1-1.2,13.3-9.9,15l-1,0.2v20.4v0.3C0,45.8,9.6,82.1,39.1,89.9l0.3,0.1l0.3-0.1C69.5,82.1,79,45.8,79.1,45.4\n                        V24.7L78.1,24.5z M76.7,45C76,47.5,66.6,80.1,39.5,87.5C12.6,80.1,3.2,47.4,2.5,45V26.7c8.3-2.4,10.3-13,10.7-16.1l26.4-8l26.4,8\n                        c0.4,3.1,2.4,13.7,10.7,16.1V45z M63.5,13.2l-0.1-0.4l-22-6.7c-0.1-0.9-0.8-1.7-1.8-1.7s-1.7,0.8-1.8,1.7l-22,6.7l-0.1,0.4\n                        c-0.6,3.2-2.7,10.6-8.6,14.5c-0.3-0.3-0.7-0.4-1.1-0.4c-1,0-1.8,0.8-1.8,1.9c0,0.8,0.5,1.5,1.2,1.7v13.5v0.2\n                        c0.9,3.2,9.7,31.2,32.4,39.2c0.1,1,0.8,1.8,1.8,1.8s1.8-0.8,1.8-1.8c9.3-3.3,17.3-10.1,23.8-20.4c5.3-8.4,7.9-16.5,8.6-18.8V30.9\n                        c0.7-0.3,1.2-0.9,1.2-1.7c0-1-0.8-1.9-1.8-1.9c-0.4,0-0.8,0.2-1.1,0.4C66.2,23.9,64.1,16.4,63.5,13.2z M72.5,30.9v13.5\n                        c-1,3.6-9.6,30.5-31.5,38.2c-0.3-0.4-0.8-0.7-1.4-0.7c-0.6,0-1,0.3-1.4,0.7C16.3,74.8,7.8,47.9,6.7,44.3V30.9\n                        c0.7-0.3,1.2-0.9,1.2-1.7c0-0.1,0-0.2-0.1-0.3c6.1-4,8.4-11.4,9.1-15l21.3-6.5c0.3,0.4,0.8,0.7,1.4,0.7c0.6,0,1.1-0.3,1.4-0.7\n                        l21.2,6.5c0.8,3.6,3,11,9.1,15c0,0.1,0,0.2,0,0.3C71.3,30,71.8,30.6,72.5,30.9z'\n            ></path>\n          </svg>\n        </div>\n      </div>\n      {/* hit dice / death save fail/pass */}\n      <div className='col-span-3 border-red-400 border-2 ml-4 p-2 rounded bg-white'>\n        <div className='grid grid-cols-2 h-full'>\n          {/* hit die */}\n          <div className='p-1'>\n            <div className='font-roboto text-xs text-gray-400'>\n              (TOTAL) 7d10\n            </div>\n            <div>\n              <div className='font-roboto uppercase text-center'>Remaining</div>\n              {showRemainingHitDieInput ? (\n                <input\n                  className='w-full rounded border'\n                  onChange={(e) => {\n                    if (isNaN(Number(e.currentTarget.value))) {\n                      return false\n                    }\n                    setHitDieRemaining(Number(e.currentTarget.value))\n                  }}\n                  onBlur={() => toggleShowRemainingHitDieInput(false)}\n                />\n              ) : (\n                <div\n                  className='text-xl font-roboto text-center'\n                  onClick={() => toggleShowRemainingHitDieInput(true)}\n                >\n                  {hitDieRemaining}\n                </div>\n              )}\n            </div>\n            <div className='font-roboto uppercase text-center'>Hit Die</div>\n          </div>\n          {/* successes / failures */}\n          <div className='border-l p-1'>\n              <div className='text-xs text-gray-400 font-roboto uppercase'>Successes</div>\n              <div className='space-x-1'>\n                <input className='round-full' name='successes' type='checkbox'/>\n                <input className='round-full' name='successes' type='checkbox'/>\n                <input className='round-full' name='successes' type='checkbox'/>\n              </div>\n              <div className='text-xs text-gray-400 font-roboto uppercase'>Failures</div>\n              <div className='space-x-1'>\n                <input className='round-full' name='successes' type='checkbox'/>\n                <input className='round-full' name='successes' type='checkbox'/>\n                <input className='round-full' name='successes' type='checkbox'/>\n              </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GeneralBlock\n","import React from 'react'\n\nconst SavingThrowBlock: React.FC = () => {\n  const saves = [\n    {\n      stat: 'STRENGTH',\n      prof: false,\n      bonus: '+2',\n    },\n    {\n      stat: 'DEXTERITY',\n      prof: false,\n      bonus: '+1',\n    },\n    {\n      stat: 'CONSITUTION',\n      prof: true,\n      bonus: '+6',\n    },\n    {\n      stat: 'INTELLIGENCE',\n      prof: false,\n      bonus: '+0',\n    },\n    {\n      stat: 'WISDOM',\n      prof: false,\n      bonus: '+0',\n    },\n    {\n      stat: 'CHARISMA',\n      prof: true,\n      bonus: '+8',\n    },\n  ]\n\n  const prof = (\n    <div className='text-xs w-2 h-2 rounded-full ring-2 bg-gray-800 ring-black'></div>\n  )\n  const notProf = (\n    <div className='text-xs w-2 h-2 rounded-full ring-2 ring-black'></div>\n  )\n\n  return (\n    <div className='p-6 border-2 border-red-400 rounded bg-white'>\n      <div className='space-y-2'>\n        {saves.map((save) => (\n          <div className='grid grid-cols-6'>\n            <div className='flex items-center justify-center text-center'>\n              {save.prof ? prof : notProf}\n            </div>\n            <div className='text-xs font-roboto'>{save.bonus}</div>\n            <div className='font-roboto text-xs col-span-4'>{save.stat}</div>\n          </div>\n        ))}\n        <div className='mt-4 font-roboto text-sm text-center'>SAVING THROWS</div>\n      </div>\n    </div>\n  )\n}\n\nexport default SavingThrowBlock\n","import React from 'react'\n\nconst SkillsBlock: React.FC = () => {\n  const saves = [\n    {\n      skill: 'Acrobatics',\n      stat: 'DEX',\n      prof: false,\n      bonus: '+1',\n    },\n    {\n      skill: 'Animal Handling',\n      stat: 'WIS',\n      prof: false,\n      bonus: '+0',\n    },\n    {\n      skill: 'Arcana',\n      stat: 'INT',\n      prof: false,\n      bonus: '+0',\n    },\n    {\n      skill: 'Athletics',\n      stat: 'STR',\n      prof: true,\n      bonus: '+5',\n    },\n    {\n      skill: 'Deception',\n      stat: 'CHA',\n      prof: true,\n      bonus: '+8',\n    },\n    {\n      skill: 'History',\n      stat: 'INT',\n      prof: false,\n      bonus: '+0',\n    },\n    {\n      skill: 'Insight',\n      stat: 'WIS',\n      prof: false,\n      bonus: '+0',\n    },\n    {\n      skill: 'Intimidation',\n      stat: 'CHA',\n      prof: true,\n      bonus: '+8',\n    },\n    {\n      skill: 'Investigation',\n      stat: 'INT',\n      prof: false,\n      bonus: '+0',\n    },\n    {\n      skill: 'Medicine',\n      stat: 'WIS',\n      prof: false,\n      bonus: '+0',\n    },\n    {\n      skill: 'Nature',\n      stat: 'INT',\n      prof: false,\n      bonus: '+0',\n    },\n    {\n      skill: 'Perception',\n      stat: 'WIS',\n      prof: true,\n      bonus: '+3',\n    },\n    {\n      skill: 'Performance',\n      stat: 'CHA',\n      prof: false,\n      bonus: '+5',\n    },\n    {\n      skill: 'Persuasion',\n      stat: 'CHA',\n      prof: true,\n      bonus: '+8',\n    },\n    {\n      skill: 'Religion',\n      stat: 'INT',\n      prof: false,\n      bonus: '+0',\n    },\n    {\n      skill: 'Sleight of Hand',\n      stat: 'DEX',\n      prof: false,\n      bonus: '+1',\n    },\n    {\n      skill: 'Stealth',\n      stat: 'DEX',\n      prof: false,\n      bonus: '+1',\n    },\n    {\n      skill: 'Survival',\n      stat: 'WIS',\n      prof: false,\n      bonus: '+0',\n    },\n  ]\n\n  const prof = (\n    <div className='text-xs w-2 h-2 rounded-full ring-2 bg-gray-800 ring-black'></div>\n  )\n  const notProf = (\n    <div className='text-xs w-2 h-2 rounded-full ring-2 ring-black'></div>\n  )\n\n  return (\n    <div className='p-6'>\n      <div className='space-y-2'>\n        <div className='grid grid-cols-5 mb-2'>\n            <div className='text-xs font-roboto text-gray-500 bold'>PROF</div>\n            <div className='text-xs font-roboto text-gray-500 bold'>MOD</div>\n            <div className='col-span-2 text-xs font-roboto text-gray-500 bold'>SKILL</div>\n            <div className='text-xs font-roboto text-gray-500 bold'>BONUS</div>\n        </div>\n        {saves.map((save) => (\n          <div className='grid grid-cols-5'>\n            <div className='flex items-center justify-center'>\n              {save.prof ? prof : notProf}\n            </div>\n            <div className='font-roboto text-xs flex items-center'>{save.stat}</div>\n            <div className='font-roboto text-xs col-span-2'>{save.skill}</div>\n            <div className='text-xs font-roboto'>\n              {save.bonus}\n              {save.skill === 'Stealth' ? (\n                <span>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" className='w-4 h-4 inline-block'><g><polygon fill=\"#fff\" points=\"35 8 36 39 12 39 14 8\"></polygon><path fill=\"#b00000\" d=\"M27.38,17.75a9.362,9.362,0,0,1,1.44,5.68v1.12a9.4423,9.4423,0,0,1-1.44,5.71A5.21983,5.21983,0,0,1,23,32H21V16h2A5.19361,5.19361,0,0,1,27.38,17.75Z\"></path><path fill=\"#b00000\" d=\"M44.39,12.1,23.89.39,3.5,12.29,3.61,35.9l20.5,11.71L44.5,35.71ZM35.21,24.55a13.50293,13.50293,0,0,1-1.5,6.41,11.09308,11.09308,0,0,1-4.25,4.42A12.00926,12.00926,0,0,1,23.34,37H15V11h8.16a12.35962,12.35962,0,0,1,6.2,1.56,10.97521,10.97521,0,0,1,4.29,4.41,13.31084,13.31084,0,0,1,1.56,6.39Z\"></path></g></svg>\n                </span>\n              ) : null}\n            </div>\n          </div>\n        ))}\n        <div className='mt-4 font-roboto text-sm text-center'>\n          SKILLS\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SkillsBlock\n","import React from 'react'\n\ninterface Props {\n    attribute: string\n    bonus: string\n    score: number\n}\n\nconst CoreStatBlock: React.FC<Props> = ({attribute, bonus, score}) => {\n  return (\n    <div className='p-1 border-2 border-red-400 rounded bg-white'>\n      <div className='text-center'>\n        <div className='font-roboto text-gray-500 text-xs'>{attribute.toUpperCase()}</div>\n        <div className='px-4 py-1 border rounded font-roboto text-xl'>{bonus}</div>\n        <div className='font-roboto bold mt-1'>\n          <span className='px-2 py-1 border-2 border-red-400 rounded-full'>{score}</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CoreStatBlock\n","import React, { useState } from 'react'\n\ninterface Props {\n  maxHealth: number\n}\n\nconst HealthBlock: React.FC<Props> = ({ maxHealth }) => {\n  const [currentHp, setcurrentHp] = useState(maxHealth)\n  const [tempHp, setTempHp] = useState('0')\n  const [inputVal, setInputVal] = useState('')\n  const [showTempHpInput, toggleShowTempHpInput] = useState(false)\n  \n  const incrementHealth = () => {\n    if (isNaN(Number(inputVal))) {\n      return false\n    }\n    const newHealth = currentHp + Number(inputVal)\n    setcurrentHp(newHealth <= maxHealth ? newHealth : maxHealth)\n    setInputVal('')\n  }\n\n  const decrementHealth = () => {\n    if (isNaN(Number(inputVal))) {\n      return false\n    }\n    const intTempHp = Number(tempHp)\n    const intInputVal = Number(inputVal)\n    // get total to restore minus temp\n    const totalMinusTemp = intInputVal - intTempHp\n\n    // deal with temp hp\n    if (tempHp) {\n      setTempHp(intInputVal - intTempHp < 0 ? (intInputVal - intTempHp).toString() : '0')\n    }\n    // set true new health\n    const newHealth = currentHp - totalMinusTemp\n    setcurrentHp(newHealth > -1 ? newHealth : 0)\n    setInputVal('')\n  }\n\n  return (\n    <div className='p-2'>\n      <div className='grid grid-cols-4 space-x-4'>\n        <div className='space-y-1'>\n          <button \n            className='w-full p-1 text-xs border-2 border-green-500 rounded text-green-500 font-roboto text-center'\n            onClick={incrementHealth}\n          >\n            HEAL\n          </button>\n          <input\n            className='max-w-full border rounded'\n            value={inputVal}\n            onChange={(e) => setInputVal(e.currentTarget.value)}\n          />\n          <button\n            className='w-full p-1 text-xs border-2 border-red-500 rounded text-red-500 font-roboto text-center'\n            onClick={decrementHealth}\n          >\n            DAMAGE\n          </button>\n        </div>\n        <div className='grid grid-cols-2 col-span-2'>\n          <div>\n            <div className='uppercase text-xs font-roboto bold text-gray-400'>\n              Current\n            </div>\n            <div className='bold font-roboto text-xl'>\n              {currentHp} &nbsp;\n            </div>\n          </div>\n          <div>\n            <div className='uppercase text-xs font-roboto bold text-gray-400'>\n              Max\n            </div>\n            <div className='bold font-roboto text-xl'>/ {maxHealth}</div>\n          </div>\n          <div className='uppercase text-xs font-roboto bold text-gray-400'>\n            Hit Points\n          </div>\n        </div>\n        <div>\n          <div className='uppercase text-xs font-roboto bold text-gray-400'>\n            Temp\n          </div>\n          {\n            showTempHpInput ? (\n              <input \n                className='max-w-full border rounded'\n                value={tempHp}\n                onChange={e => setTempHp(e.currentTarget.value)}\n                onBlur={() => {\n                  if (isNaN(Number(tempHp))) {\n                    setTempHp('0')\n                  }\n                  toggleShowTempHpInput(false)\n                }}/>\n            ) : (\n              <div \n                className='uppercase text-xs font-roboto bold text-gray-400'\n                onClick={() => toggleShowTempHpInput(true)}\n              >\n                {Number(tempHp) > 0 ? (\n                  <span className='bold text-black font-roboto text-xl'>{tempHp}</span>\n                ) : (\n                  '--'\n                )}\n              </div>\n            )\n          }\n          \n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default HealthBlock\n","import React from 'react'\nimport CoreStatBlock from './core-stat-block'\nimport HealthBlock from './health-block'\n\nconst CharacterCoreStats: React.FC = () => {\n  const coreStats = [\n    {\n      attribute: 'str',\n      bonus: '+2',\n      score: 14,\n    },\n    {\n      attribute: 'dex',\n      bonus: '+1',\n      score: 12,\n    },\n    {\n      attribute: 'con',\n      bonus: '+3',\n      score: 17,\n    },\n    {\n      attribute: 'int',\n      bonus: '+0',\n      score: 11,\n    },\n    {\n      attribute: 'wis',\n      bonus: '+0',\n      score: 10,\n    },\n    {\n      attribute: 'cha',\n      bonus: '+5',\n      score: 20,\n    },\n  ]\n\n  return (\n    <div className='pb-2'>\n      <div className='grid grid-cols-2 space-x-8'>\n        <div className='grid grid-cols-6 space-x-4 p'>\n          {coreStats.map((stat) => (\n            <CoreStatBlock\n              attribute={stat.attribute}\n              bonus={stat.bonus}\n              score={stat.score}\n            />\n          ))}\n        </div>\n        {/* right col split into 2 */}\n        <div className='grid grid-cols-3 space-x-4'>\n          <div className='grid grid-cols-2 space-x-4'>\n            <div className='border-2 border-red-400 rounded flex items-center justify-center text-center bg-white'>\n              <div>\n                <div className='font-roboto text-xs'>PROFICIENCY</div>\n                <div className='font-roboto text-xl bold'>+3</div>\n                <div className='font-roboto text-xs'>BONUS</div>\n              </div>\n            </div>\n            <div className='border-2 border-red-400 rounded flex items-center justify-center text-center bg-white'>\n              <div>\n                <div className='font-roboto text-xs'>WALKING</div>\n                <div className='font-roboto text-xl bold'>30 ft</div>\n                <div className='font-roboto text-xs'>SPEED</div>\n              </div>\n            </div>\n          </div>\n          <div className='col-span-2 border-2 border-red-400 rounded bg-white'>\n            <HealthBlock maxHealth={67} />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CharacterCoreStats\n","import React, { useState } from 'react'\n\nconst CharacterSubHeader: React.FC = () => {\n  return (\n    <>\n      <div className='inline-block mr-4 rounded'>\n        <img \n          className='max-w-xxs rounded' \n          alt='Image is gone, find another'\n          src='https://i.pinimg.com/originals/39/7b/93/397b933463afe1dbce57d50d915ef29f.jpg'/>\n      </div>\n      <div className='inline-block'>\n        <div className='text-4xl font-roboto text-white'>Logan Ninefingers</div>\n        <div className='text-sm font-roboto text-gray-400'>Illrigger 7</div>\n        <div className='text-sm font-roboto text-gray-300'>Painkiller</div>\n      </div>\n    </>\n  )\n}\n\nexport default CharacterSubHeader\n","import React from 'react'\n\nconst PassiveBlock: React.FC = () => {\n  \n  return (\n    <div className='p-6 border-2 border-red-400 rounded bg-white'>\n      <div className='space-y-2'>\n        <div className='flex items-center justify-between'>\n            <div className='border rounded-full text-lg px-2'>13</div>\n            <div className='uppercase font-roboto text-xs'>Passive Perception (WIS)</div>\n        </div>\n        <div className='flex items-center justify-between'>\n            <div className='border rounded-full text-lg px-2'>10</div>\n            <div className='uppercase font-roboto text-xs'>Passive Investigation (INT)</div>\n        </div>\n        <div className='flex items-center justify-between'>\n            <div className='border rounded-full text-lg px-2'>10</div>\n            <div className='uppercase font-roboto text-xs'>Passive Insight (WIS)</div>\n        </div>\n        <div className='mt-4 font-roboto text-sm text-center'>SENSES</div>\n      </div>\n    </div>\n  )\n}\n\nexport default PassiveBlock\n","import React, { useState } from 'react'\nimport classnames from 'classnames'\n\ntype IsActiveType = 'actions' | 'features' | 'inv' | 'notes'\n\nconst ActionFeatureBlock: React.FC = () => {\n  const [isActive, setIsActive] = useState<IsActiveType>('actions')\n\n  const checkIsActive = (caller: IsActiveType) => caller === isActive\n\n  const baseHeaderClasses =\n    'font-roboto text-xs text-gray-400 uppercase hover:text-black hover:bold cursor-pointer'\n  const activeClasses = 'border-b-4'\n  return (\n    <div className='p-4 bg-white'>\n      <div className='flex justify-between w-full'>\n        <div\n          className={classnames({\n            [baseHeaderClasses]: true,\n            [activeClasses]: checkIsActive('actions'),\n          })}\n          onClick={() => setIsActive('actions')}\n        >\n          Actions\n        </div>\n        <div\n          className={classnames({\n            [baseHeaderClasses]: true,\n            [activeClasses]: checkIsActive('features'),\n          })}\n          onClick={() => setIsActive('features')}\n        >\n          Features & Traits\n        </div>\n        <div\n          className={classnames({\n            [baseHeaderClasses]: true,\n            [activeClasses]: checkIsActive('inv'),\n          })}\n          onClick={() => setIsActive('inv')}\n        >\n          Inventory\n        </div>\n        <div\n          className={classnames({\n            [baseHeaderClasses]: true,\n            [activeClasses]: checkIsActive('notes'),\n          })}\n          onClick={() => setIsActive('notes')}\n        >\n          Notes\n        </div>\n      </div>\n      {/* action block */}\n      {isActive === 'actions' && (\n        <div className='mt-4 space-y-2'>\n          <div className='text-xs font-roboto text-gray-400'>\n            Attacks per Action: 2\n          </div>\n          <div className='grid grid-cols-4'>\n            <div className='font-roboto text-xs uppercase'>Attack</div>\n            <div className='font-roboto text-xs uppercase'>Range</div>\n            <div className='font-roboto text-xs uppercase'>Hit</div>\n            <div className='font-roboto text-xs uppercase'>Damage</div>\n          </div>\n          <div className='grid grid-cols-4'>\n            <div className='text-xs font-bold flex items-center'>\n              Greatsword +1\n            </div>\n            <div className='text-xs font-bold flex items-center'>5 ft</div>\n            <div>\n              <span className='font-roboto text-lg border rounded px-4 py-1 inline-block'>\n                +9\n              </span>\n            </div>\n            <div className='font-roboto text-lg border rounded p-1 text-center'>\n              2d6 + 6\n            </div>\n          </div>\n          <div className='grid grid-cols-4'>\n            <div className='text-xs font-bold flex items-center'>GS (GWM)</div>\n            <div className='text-xs font-bold flex items-center'>5 ft</div>\n            <div>\n              <span className='font-roboto text-lg border rounded px-4 py-1 inline-block'>\n                +4\n              </span>\n            </div>\n            <div className='font-roboto text-lg border rounded p-1 text-center'>\n              2d6 + 16\n            </div>\n          </div>\n          <div className='grid grid-cols-4'>\n            <div className='text-xs font-bold flex items-center'>\n              Crossbow, Heavy\n            </div>\n            <div className='text-xs font-bold flex items-center'>100/400</div>\n            <div>\n              <span className='font-roboto text-lg border rounded px-4 py-1 inline-block'>\n                +5\n              </span>\n            </div>\n            <div className='font-roboto text-lg border rounded p-1 text-center'>\n              1d10 + 2\n            </div>\n          </div>\n          <div className='grid grid-cols-4'>\n            <div className='text-xs font-bold flex items-center'>Spell</div>\n            <div className='text-xs font-bold flex items-center'>See spell</div>\n            <div>\n              <span className='font-roboto text-lg border rounded px-4 py-1 inline-block'>\n                +8\n              </span>\n            </div>\n            <div className='font-roboto text-lg border rounded p-1 text-center'>\n              See spell\n            </div>\n          </div>\n          <div className='grid grid-cols-4'>\n            <div className='text-xs font-bold flex items-center'>Spell DC</div>\n            <div className='text-xs font-bold flex items-center'>n/a</div>\n            <div>\n              <span className='font-roboto text-lg border rounded px-4 py-1 inline-block'>\n                DC 16\n              </span>\n            </div>\n            <div className='font-roboto text-lg border rounded p-1 text-center'>\n              n/a\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* features block */}\n      {isActive === 'features' && (\n        <div className='mt-4 space-y-2 text-xs'>\n          {/* class features */}\n          <div className='space-y-1'>\n            <div className='font-roboto text-lg'>Illrigger</div>\n            <div className='font-bold'>Forked Tongue</div>\n            <div>\n              You have a facility with speech and know how to manipulate an\n              audience. Whenever you make an ability check to persuade, deceive,\n              or intimidate, you can treat a d20 roll of 7 or lower as an 8.\n              Additionally you learn the Infernal language.\n            </div>\n            <div className='font-bold'>Infernal Conduit</div>\n            <div className='space-y-1'>\n              <div>\n                There is a pool of infernal power within you that replenishes\n                after you take a <strong>long rest</strong>. This pool is\n                represented by dice, starting with 1d10 at 1st level.\n              </div>\n              <div>\n                As an action, choose a number of dice from your remaining pool\n                and touch another creature. If they are unwilling, this is a\n                melee spell attack with which you are proficient, using Charisma\n                as your spell- casting ability. If you miss, nothing happens—you\n                do not roll or lose dice from your pool. If you hit, or if\n                you’re targeting a willing creature, roll the chosen dice.\n              </div>\n              <div>\n                The result of your roll is the number of hit points you\n                transfer. If you’re touching an ally, they gain that many hit\n                points, ignoring any hit points in excess of their maximum. You\n                lose hit points equal to the number of hit points they gained.\n                If your sacrifice reduces you to 0 hit points, you fall\n                unconscious.\n              </div>\n              <div>\n                If you’re touching an enemy, they take necrotic damage equal to\n                your roll, and you gain that many hit points. If you would gain\n                hit points in excess of your maximum, you gain that number of\n                temporary hit points instead.\n              </div>\n              <div>\n                <div className='text-gray-400 font-bold'>1d10 (Long rest)</div>\n                <div className='space-x-1'>\n                  <input\n                    className='round-full'\n                    name='infernal-conduit'\n                    type='checkbox'\n                  />\n                  <input\n                    className='round-full'\n                    name='infernal-conduit'\n                    type='checkbox'\n                  />\n                  <input\n                    className='round-full'\n                    name='infernal-conduit'\n                    type='checkbox'\n                  />\n                  <input\n                    className='round-full'\n                    name='infernal-conduit'\n                    type='checkbox'\n                  />\n                </div>\n              </div>\n            </div>\n            <div className='font-bold'>Baleful Interdict</div>\n            <div className='space-y-1'>\n              <div>\n                When you reach 2nd level, you learn to use the power of Hell to\n                censure other creatures. As a bonus action, you can place a seal\n                on a target you can see within 30 feet. You can do this a number\n                of times equal to your Charisma modifier. When you finish a\n                short or long rest, you regain all your seals.\n              </div>\n              <div>\n                When you or an ally hits a target you can see with any seals on\n                it, you can consume the seals to make the attack deal an extra\n                2d6 necrotic damage to the target per seal consumed.1 If you are\n                within 30 feet of the target, you regain 2 hit points for each\n                die of damage your seals deals.\n              </div>\n              <div>\n                A creature with a seal on them is an interdicted creature.\n              </div>\n              <div>\n                Seals evaporate if not used after 1 minute. Only the illrigger\n                who placed the seal knows it’s there; it appears to the\n                illrigger as a glowing glyph on the creature’s forehead. If a\n                creature with any of your seals on it dies, you can move all of\n                its seals to another creature within range.\n              </div>\n              <div className='font-bold text-gray-500'>I Am Death.</div>\n              <div> At 6th level, after placing a seal on a creature, your attacks against that creature have advantage until the end of your turn.</div>\n            </div>\n            <div>\n              <div className='text-gray-400 font-bold'>2d6 (Short rest)</div>\n              <div className='space-x-1'>\n                <input\n                  className='round-full'\n                  name='baleful-interdict'\n                  type='checkbox'\n                />\n                <input\n                  className='round-full'\n                  name='baleful-interdict'\n                  type='checkbox'\n                />\n                <input\n                  className='round-full'\n                  name='baleful-interdict'\n                  type='checkbox'\n                />\n                <input\n                  className='round-full'\n                  name='baleful-interdict'\n                  type='checkbox'\n                />\n                <input\n                  className='round-full'\n                  name='baleful-interdict'\n                  type='checkbox'\n                />\n              </div>\n            </div>\n          </div>\n          {/* subclass features */}\n          <div className='space-y-1'>\n            <div className='font-roboto text-lg'>Painkiller</div>\n            <div className='font-bold'>Invoke Authority</div>\n            <div className='space-y-1'>\n              <div>\n                When you use your Invoke Authority, you choose which option to\n                use. Once you use this feature, you must finish a long rest to\n                use it again.\n              </div>\n              <div>\n                <span className='font-bold text-red-500'>\n                  Invoke Authority: Devastator. &nbsp;\n                </span>\n                As an action, you invoke the authority of Dispater. A number of\n                allies equal to your Charisma modifier, whom you can see within\n                60 feet, and you, may use a reaction to make one weapon attack.\n              </div>\n              <div>\n                <span className='font-bold text-red-500'>\n                  Invoke Authority: Infernal Surge. &nbsp;\n                </span>\n                Upon invoking Dispater’s authority, you gain an extra action in\n                addition to your normal action and any possible bonus action.\n              </div>\n              <input\n                className='round-full mr-2'\n                name='baleful-interdict'\n                type='checkbox'\n              />\n              <span className='text-gray-400 font-bold'>(Long rest)</span>\n            </div>\n            <div className='font-bold'>By the Throat</div>\n            <div>Starting at 7th level, you can, as an action, place a seal on an enemy within 30 feet. If they are Large or smaller, they must make a Wisdom saving throw (DC = 8 + your proficiency bonus + your Charisma modifier) or be grappled (escape DC 15), and the target is restrained until the grapple ends.</div>\n          </div>\n          {/* feats */}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default ActionFeatureBlock\n","import React from 'react'\nimport GeneralBlock from './character-components/general-block'\nimport SavingThrowBlock from './character-components/saving-throw-block'\nimport SkillsBlock from './character-components/skills-block'\nimport CharacterCoreStats from './character-components/character-core-stats'\nimport CharacterSubHeader from './character-components/character-subheader'\nimport PassiveBlock from './character-components/passive-block'\nimport ActionFeatureBlock from './character-components/action-feature-block'\n\nconst CharacterSheet: React.FC = () => {\n  return (\n    <div className='md:mx-6'>\n      {/* subheader */}\n      <div className='-ml-96 pl-96 -mr-96 pr-96 -mt-8 pt-4 pb-4 bg-gray-dark' >\n        <CharacterSubHeader />\n      </div>\n\n      {/* stats row */}\n      <div className='pt-6'>\n        <CharacterCoreStats />\n      </div>\n\n      {/* 3 columns */}\n      <div className='mt-6 grid grid-cols-4 space-x-6'>\n        {/* left column */}\n        <div className='space-y-6 border-2 border-red-400 rounded p-2'>\n          <SavingThrowBlock />\n          <PassiveBlock />\n        </div>\n        \n        {/* mid column */}\n        <div className='border-2 border-red-400 rounded bg-white'><SkillsBlock/></div>\n\n        {/* right column (main beef) */}\n        <div className='col-span-2 space-y-10'>\n          <GeneralBlock/>\n          <div className='border-red-400 rounded border-2 h-96 overflow-x-scroll'>\n            <ActionFeatureBlock />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CharacterSheet\n","import React, { useState } from 'react'\nimport { useSignUpMutation } from '../generated/graphql'\n\nconst SignUp: React.FC = () => {\n  const [user, setUser] = useState('')\n  const [pass, setPass] = useState('')\n  const [signUpSuccessful, setSignUpSuccessful] = useState(false)\n  const [performSignup, { data, loading }] = useSignUpMutation()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!user || !pass) {\n      return\n    }\n\n    const { data } = await performSignup({\n      variables: {\n        username: user,\n        password: pass,\n      },\n    })\n\n    if (data?.signup?.boolean === true) {\n      setSignUpSuccessful(true)\n      window.location.href = '/signin'\n    }\n  }\n\n  return (\n    <div>\n      {signUpSuccessful ? (\n        <div className='space-y-4 relative w-1/2 m-auto m-0 pt-12 text-xl text-center font-bold'>\n          Sign up successful! \n        </div>\n      ) : (\n        <form\n          className='space-y-4 relative w-1/2 m-auto m-0 pt-12'\n          onSubmit={handleSubmit}\n        >\n          <div>\n            <label className='block mb-1' htmlFor='username' hidden>\n              Username\n            </label>\n            <input\n              name='username'\n              className='w-full border rounded text-xl p-2 text-center'\n              placeholder='username'\n              value={user}\n              onChange={(e) => setUser(e.currentTarget.value)}\n            />\n          </div>\n          <div>\n            <label className='block mb-1' htmlFor='password' hidden>\n              Password\n            </label>\n            <input\n              name='password'\n              type='password'\n              className='w-full border rounded text-xl p-2 text-center'\n              placeholder='password'\n              value={pass}\n              onChange={(e) => setPass(e.currentTarget.value)}\n            />\n          </div>\n          <div>\n            <button\n              type='submit'\n              className='w-full border rounded p-3 bg-indigo-600 text-white font-bold'\n            >\n              SIGN UP\n            </button>\n          </div>\n        </form>\n      )}\n    </div>\n  )\n}\n\nexport default SignUp\n","import React, { useState } from 'react'\nimport { useSigninMutation } from '../generated/graphql'\nimport { AUTH_TOKEN } from '../constants'\n\nconst SignIn: React.FC = () => {\n  const [formHasErrors, setFormHasErrors] = useState(false)\n  const [user, setUser] = useState('')\n  const [pass, setPass] = useState('')\n  const [performSignup, { data, loading }] = useSigninMutation()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!user || !pass) {\n      return\n    }\n    \n    const { data } = await performSignup({\n      variables: {\n        username: user,\n        password: pass,\n      },\n    })\n    \n    if (data?.signin?.jwtToken) {\n      localStorage.setItem(AUTH_TOKEN, data.signin.jwtToken)\n      window.location.href = '/'\n    } else {\n      setFormHasErrors(true)\n    }\n  }\n\n  return (\n    <>\n      <form\n        className='space-y-4 relative w-1/2 m-auto m-0 pt-12'\n        onSubmit={handleSubmit}\n      >\n        <div>\n          <label className='block mb-1' htmlFor='username' hidden>\n            Username\n          </label>\n          <input\n            name='username'\n            className='w-full border rounded text-xl p-2 text-center'\n            placeholder='username'\n            value={user}\n            onChange={(e) => setUser(e.currentTarget.value)}\n          />\n        </div>\n        <div>\n          <label className='block mb-1' htmlFor='password' hidden>\n            Password\n          </label>\n          <input\n            name='password'\n            type='password'\n            className='w-full border rounded text-xl p-2 text-center'\n            placeholder='password'\n            value={pass}\n            onChange={(e) => setPass(e.currentTarget.value)}\n          />\n        </div>\n        <div>\n          <button\n            type='submit'\n            className='w-full border rounded p-3 bg-indigo-600 text-white font-bold'\n          >\n            SIGN IN\n          </button>\n        </div>\n        {formHasErrors && (\n          <div className='mt-4 text-center text-xl text-red-500 font-bold'>\n            Incorrect username or password\n          </div>\n        )}\n      </form>\n    </>\n  )\n}\n\nexport default SignIn\n","import React from 'react'\nimport { AUTH_TOKEN } from '../constants'\n\nconst SignOut: React.FC = () => {\n    localStorage.setItem(AUTH_TOKEN, '')\n    window.location.href = ('/signin')\n    return null\n}\n\nexport default SignOut","import classnames from 'classnames'\nimport React from 'react'\nimport { useLocation } from 'react-router'\n\ninterface Props {\n  children?: any\n}\nconst Layout: React.FC<Props> = ({ children }) => {\n  const location = useLocation()\n  debugger\n  return (\n    <div\n      className={classnames({\n        'pb-40 fixed h-full w-full bg-no-repeat bg-cover overflow-scroll':true,\n        'pt-24': location.pathname === '/create/sheet',\n        'pt-40': location.pathname !== '/create/sheet'\n\n      })}\n      style={{ backgroundImage: \"url('/spooky_bg.jpeg')\" }}\n    >\n      {children}\n    </div>\n  )\n}\nexport default Layout\n","import React from 'react'\n\nconst Home: React.FC = () => (\n  <div className='space-y-10 mt-10'>\n    <div className='flex justify-center gap-x-10 max-w-full w-full'>\n      <div className='self-end relative'>\n        <a className='hover:no-underline' href='/create/description'>\n          <img src='/assets/strip-1.png' alt='' />\n          <div className='absolute top-1/2 left-7 -translate-x-1/2 -translate-y-1/2 text-2xl font-roboto font-bold text-blue-500'>\n            Create a Character\n          </div>\n        </a>\n      </div>\n      <div className='self-end relative'>\n        <a className='hover:no-underline' href='/view/classes'>\n          <img src='/assets/strip-2.png' alt='' />\n          <div className='absolute top-1/2 left-7 -translate-x-1/2 -translate-y-1/2 text-2xl font-roboto font-bold text-yellow-500'>\n            View Classes\n          </div>\n        </a>\n      </div>\n    </div>\n    <div className='flex justify-center gap-x-10 max-w-full w-full'>\n      <div className='self-end relative'>\n        <a className='hover:no-underline' href='/view/spells'>\n          <img src='/assets/strip-3.png' alt='' />\n          <div className='absolute top-1/2 left-7 -translate-x-1/2 -translate-y-1/2 text-2xl font-roboto font-bold text-green-500'>\n            View Spells\n          </div>\n        </a>\n      </div>\n      <div className='self-end relative'>\n        <a className='hover:no-underline' href='/view/feats'>\n          <img src='/assets/strip-4.png' alt='' />\n          <div className='absolute top-1/2 left-7 -translate-x-1/2 -translate-y-1/2 text-2xl font-roboto font-bold text-indigo-500'>\n            View Feats\n          </div>\n        </a>\n      </div>\n    </div>\n  </div>\n)\n\nexport default Home\n","import React, { useEffect, useState } from 'react'\nimport classnames from 'classnames'\nimport { numberToSpeakable } from './../../lib/utils'\nimport { useAllFeatsQuery } from '../../generated/graphql'\n\ninterface Props {\n  feature: {\n    id: string\n    entries: any\n    classSource: string\n    isClassFeatureVariant: string\n    level: number\n    name: string\n    page: number\n    source: string\n    scores?: string[]\n  }\n  viewOnly?: boolean\n}\nconst FeatureAsi: React.FC<Props> = ({ feature, viewOnly }) => {\n  const [detailsActive, toggleDetailsActive] = useState(false)\n  const [entries, setEntries] = useState<any>(null)\n  const [choice, setChoice] = useState('')\n\n  const [featSelection, setFeatSelection] = useState<any>(null)\n  const [asiSelection1, setAsiSelection1] = useState('')\n  const [asiSelection2, setAsiSelection2] = useState('')\n\n  const { data: feats } = useAllFeatsQuery()\n\n  useEffect(() => {\n    const parsed = JSON.parse(feature.entries).e\n    setEntries(parsed)\n  }, [feature.entries])\n\n  return (\n    <div className='space-y-3'>\n      <div className='border bg-white'>\n        <div\n          className={classnames({\n            'p-2 hover:bg-cream cursor-pointer': true,\n            'bg-cream': detailsActive,\n            'border-1 border-sky-blue': true && !viewOnly ? true : false,\n          })}\n          onClick={() => toggleDetailsActive(!detailsActive)}\n        >\n          <div className='text-md font-roboto'>{feature.name}</div>\n          <div className='text-xs text-gray-500'>\n            {numberToSpeakable(feature.level)} level\n          </div>\n        </div>\n        {detailsActive && (\n          <div className='p-2 text-sm space-y-2'>\n            {entries.map((entry: any) => (\n              <div>{entry}</div>\n            ))}\n            {!viewOnly && (\n              <div className='space-y-3'>\n                <select\n                  className='w-full border rounded text-sm p-2'\n                  defaultValue={''}\n                  onChange={(e) => setChoice(e.currentTarget.value)}\n                >\n                  <option value=''>- Choose an Option -</option>\n                  <option value='asi'>Ability Score Improvement</option>\n                  <option value='feat'>Feat</option>\n                </select>\n                {choice === 'asi' && (\n                  <div className='ml-2 space-y-2'>\n                    <select\n                      className='w-full border rounded text-sm p-2'\n                      defaultValue={''}\n                      onChange={(e) => setChoice(e.currentTarget.value)}\n                    >\n                      <option value=''>- Choose an Option -</option>\n                      <option>Charisma Score</option>\n                    </select>\n                    <select\n                      className='w-full border rounded text-sm p-2'\n                      defaultValue={''}\n                      onChange={(e) => setChoice(e.currentTarget.value)}\n                    >\n                      <option value=''>- Choose an Option -</option>\n                      <option>Charisma Score</option>\n                    </select>\n                  </div>\n                )}\n                {choice === 'feat' && (\n                  <select\n                    className='w-full ml-2 border rounded text-sm p-2'\n                    defaultValue={''}\n                    onChange={(e) => {\n                      const feat = feats?.allFeats?.feats.filter(\n                        (f) => e.currentTarget.value === f?.id\n                      )\n                      if (feat?.length) {\n                        setFeatSelection(feat[0])\n                      }\n                    }}\n                  >\n                    <option value=''>- Choose an Option -</option>\n                    {feats?.allFeats?.feats.map((x) => (\n                      <option value={x?.id}>{x?.name}</option>\n                    ))}\n                  </select>\n                )}\n                {choice === 'feat' && featSelection && (\n                  <div className='ml-2'>\n                    <div>{featSelection.desc}</div>\n\n                    {featSelection.prereq ? (\n                      <div>Prerequisite: {featSelection.prereq}</div>\n                    ) : null}\n\n                    {featSelection.points && featSelection.points.length && (\n                      <ul className='list-disc list-inside ml-2'>\n                        {featSelection.points.map((p: string, i: number) => {\n                          return <li key={i}>{p}</li>\n                        })}\n                      </ul>\n                    )}\n\n                    {featSelection.scores && (\n                        <select \n                            className='w-full border rounded text-sm p-2'\n                            defaultValue={''}\n                        >\n                            <option>- Choose an Ability Score-</option>\n                            {\n                                featSelection.scores.map((score: string) => (\n                                    <option key={score} value={score}>{score}</option>\n                                ))\n                            }\n                        </select>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\nexport default FeatureAsi\n","import React, { useEffect, useState } from 'react'\nimport classnames from 'classnames'\nimport { numberToSpeakable } from '../../lib/utils'\ninterface Props {\n  feature: {\n    id: string\n    entries: any\n    classSource: string\n    isClassFeatureVariant: string\n    level: number\n    name: string\n    page: number\n    source: string\n    hasOptions?: boolean\n  }\n  viewOnly?: boolean\n}\n\ninterface OptionsTypeProps {\n  options: {\n    choose: {\n      count: number\n      from: any\n    }\n  }\n}\nconst SkillOptionType: React.FC<OptionsTypeProps> = ({ options }) => {\n  const arrayToIterate = Array(options.choose.count).fill('x', 0)\n  return (\n    <>\n      {arrayToIterate.map((x, i) => {\n        return (\n          <select\n            className='w-full border rounded text-sm p-2'\n            defaultValue={''}\n            key={i}\n          >\n            <option value=''>- Choose a Skill -</option>\n            <option>\n              This will require a graphql request to stored skills known\n            </option>\n          </select>\n        )\n      })}\n    </>\n  )\n}\nconst FightOptionType: React.FC<OptionsTypeProps> = ({ options }) => {\n  const arrayToIterate = Array(options.choose.count).fill('x', 0)\n  \n  return (\n    <>\n      {arrayToIterate.map((x, i) => {\n        return (\n          <select\n            className='w-full border rounded text-sm p-2'\n            defaultValue={''}\n            key={i}\n          >\n            <option value=''>- Choose a Fighting Style -</option>\n            {options.choose.from.map((x: any) => (\n                <option value={x}>{x}</option>\n            ))}\n          </select>\n        )\n      })}\n    </>\n  )\n}\n\ninterface StringTypeProps {\n  entry: string\n}\nconst StringType: React.FC<StringTypeProps> = ({ entry }) => <div>{entry}</div>\n\n\n\nconst FeatureGeneral: React.FC<Props> = ({ feature, viewOnly }) => {\n  const [detailsActive, toggleDetailActive] = useState(false)\n  const [entries, setEntries] = useState([])\n\n  useEffect(() => {\n    const parsed = JSON.parse(feature.entries).e\n    setEntries(parsed)\n  }, [feature.entries])\n  \n  return (\n    <div className='space-y-3'>\n      <div className='border bg-white'>\n        <div\n          className={classnames({\n            'p-2 hover:bg-cream cursor-pointer': true,\n            'bg-cream': detailsActive,\n            'border-1 border-sky-blue': feature.hasOptions && !viewOnly ? true : false\n          })}\n          onClick={() => toggleDetailActive(!detailsActive)}\n        >\n          <div className='font-roboto'>{feature.name}</div>\n          <div className='text-xs text-gray-500'>\n            {numberToSpeakable(feature.level)} level\n          </div>\n        </div>\n        {detailsActive && (\n          <div className='p-2 text-sm space-y-2'>\n            {entries.map((entry: any) => {\n              if (typeof entry == 'string') {\n                return <StringType entry={entry} />\n              }\n              if (entry.type === 'skillOptions' && !viewOnly) {\n                return <SkillOptionType options={entry.options} />\n              }\n              if (entry.type === 'fightStyleOptions' && !viewOnly) {\n                return <FightOptionType options={entry.options} />\n              }\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default FeatureGeneral\n","import React, { useEffect, useState } from 'react'\nimport classnames from 'classnames'\nimport { start } from 'repl'\n\ninterface Props {\n  startingProficiencies: {\n    tools: any\n    weapons: any\n    armor: any\n    skills: any\n  }\n  savingThrows: any\n}\n\nconst FeatureStartProf: React.FC<Props> = ({\n  startingProficiencies,\n  savingThrows,\n}) => {\n  const [profDetailsActive, toggleProfDetailsActive] = useState(false)\n  \n  if (!startingProficiencies) {\n    return null\n  }\n\n  const arrayToIterate: string[] = Array(\n    startingProficiencies.skills.choose.count\n  ).fill('x', 0)\n\n  return (\n    <div className='space-y-3'>\n      <div className='border bg-white'>\n        <div\n          className={classnames({\n            'p-2 hover:bg-cream cursor-pointer': true,\n            'bg-cream border-b': profDetailsActive,\n          })}\n          onClick={() => toggleProfDetailsActive(!profDetailsActive)}\n        >\n          <div className='text-lg font-roboto'>Proficiencies</div>\n          <div className='text-xs text-gray-500'>1st level</div>\n        </div>\n        {profDetailsActive && (\n          <div className='p-2 text-sm'>\n            <div className='capitalize'>\n              <strong>Armor:</strong>{' '}\n              {startingProficiencies.armor?.join(', ') || 'None'}\n            </div>\n            <div className='capitalize'>\n              <strong>Weapons:</strong>{' '}\n              {startingProficiencies.weapons?.join(', ') || 'None'}\n            </div>\n            <div className='capitalize'>\n              <strong>Tools:</strong>{' '}\n              {startingProficiencies.tools?.join(', ') || 'None'}\n            </div>\n            <div className='capitalize'>\n              <strong>Saving Throws:</strong>{' '}\n              {savingThrows?.join(', ') || 'None'}\n            </div>\n            <div>\n              <div>\n                <strong>Skills:</strong> Choose{' '}\n                {startingProficiencies.skills.choose.count} from{' '}\n                {startingProficiencies.skills.choose.from.join(', ')}\n              </div>\n              <div className='mt-1 space-y-2'>\n                {arrayToIterate.map((x, i) => (\n                  <select\n                    className='w-full border rounded text-sm p-2'\n                    defaultValue={''}\n                    key={i}\n                  >\n                    <option value=''>- Choose a Skill -</option>\n                    {startingProficiencies.skills.choose.from.map(\n                      (skill: string) => {\n                        return (\n                          <option key={i} value='skill'>\n                            {skill}\n                          </option>\n                        )\n                      }\n                    )}\n                  </select>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default FeatureStartProf\n","import React, { useEffect, useState, Dispatch, SetStateAction } from 'react'\nimport { useClassByIdQuery } from '../../generated/graphql'\nimport FeatureAsi from './feature-asi'\nimport FeatureGeneral from './feature-general'\nimport classnames from 'classnames'\nimport FeatureStartProf from './feature-start-prof'\n\ninterface Props {\n  classObj: {\n    id: string\n    name: string\n  }\n  setClassSelected: Dispatch<SetStateAction<boolean>>\n}\n\nconst ClassFeatures: React.FC<Props> = ({ classObj, setClassSelected }) => {\n  const levels = [\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n  ]\n  const [currentLevel, setCurrentLevel] = useState(1)\n  const [classFeatures, setClassFeatures] = useState<any[]>([])\n  const [classFeaturesHigher, setClassFeaturesHigher] = useState<any[]>([])\n  const [startingProficiencies, setStartingProficiencies] = useState<any>(null)\n  const [hpDetailsActive, toggleHpDetailsActive] = useState(false)\n  const [higherFeaturesVisible, toggleHigherFeaturesVisible] = useState(false)\n  const { data, loading } = useClassByIdQuery({\n    variables: {\n      id: classObj.id,\n    },\n  })\n\n  useEffect(() => {\n    const filteredEligible =\n      data?.classById?.classFeaturesByClassId.nodes.filter((x) =>\n        x?.level ? x.level <= currentLevel : false\n      )\n    setClassFeatures(filteredEligible || [])\n    const filteredIneligible =\n      data?.classById?.classFeaturesByClassId.nodes.filter((x) =>\n        x?.level ? x.level > currentLevel : false\n      )\n    setClassFeaturesHigher(filteredIneligible || [])\n\n    const parsed = data\n      ? JSON.parse(data?.classById?.startingProficiencies)\n      : null\n\n    setStartingProficiencies(parsed)\n  }, [\n    data?.classById?.classFeaturesByClassId.nodes,\n    currentLevel,\n    data?.classById?.startingProficiencies,\n  ])\n\n  if (loading) {\n    return <div>... Loading</div>\n  }\n\n  return (\n    <div className='space-y-4'>\n      {/* row 1 - PAGE HEADER */}\n      <div className='flex items-center justify-between border-b py-5'>\n        <div className='text-xl font-bold'>Character Level: {currentLevel}</div>\n        <div className='border rounded p-2 bg-white'>\n          <div>\n            <span className='font-bold'>Max Hit Points: &nbsp;</span>\n            <span></span>\n          </div>\n          <div>\n            <span className='font-bold'>Hit Dice: &nbsp;</span>\n            <span>\n              {currentLevel}d{data?.classById?.hdFaces}\n            </span>\n          </div>\n        </div>\n      </div>\n      {/* row 2 */}\n      <div className='flex justify-between'>\n        <div className='flex space-x-4 items-center'>\n          <img\n            className='w-12 rounded'\n            src={`/assets/${data?.classById?.name.toLowerCase()}_logo.jpeg`}\n            alt=''\n          />\n          <div className='font-bold text-xl'>{data?.classById?.name}</div>\n        </div>\n        <div className='flex space-x-2 items-center'>\n          <label className='font-bold text-sm mb-0' htmlFor='level'>\n            Level\n          </label>\n          <select\n            className='w-full border rounded text-md p-1'\n            onChange={(e) => {\n              if (e == null) return\n              setCurrentLevel(Number(e.currentTarget.value))\n            }}\n            name='level'\n            value={currentLevel}\n          >\n            {levels.map((lvl) => (\n              <option key={lvl} value={lvl}>\n                {lvl}\n              </option>\n            ))}\n          </select>\n          <div\n            className='text-red-500 text-4xl font-bold h-full cursor-pointer'\n            onClick={() => setClassSelected(false)}\n          >\n            &times;\n          </div>\n        </div>\n      </div>\n      {/* row 3 STUPID NOTHINGNESS */}\n      <div className='font-roboto text-sm uppercase'>Class Features</div>\n      {/* row 4 HITPOINTS */}\n      <div className='space-y-3'>\n        <div className='border bg-white'>\n          <div\n            className={classnames({\n              'p-2 hover:bg-cream cursor-pointer': true,\n              'bg-cream border-b': hpDetailsActive,\n            })}\n            onClick={() => toggleHpDetailsActive(!hpDetailsActive)}\n          >\n            <div className='text-lg font-roboto'>Hit Points</div>\n            <div className='text-xs text-gray-500'>1st level</div>\n          </div>\n          {hpDetailsActive && (\n            <div className='p-2 text-sm'>\n              <div>\n                <strong>Hit Dice:</strong> 1d12 per{' '}\n                {classObj.name.toLowerCase()} level\n              </div>\n              <div>\n                <strong>Hit Points at 1st Level:</strong>{' '}\n                {data?.classById?.hdFaces} + your Constitution modifier\n              </div>\n              <div>\n                <strong>Hit Points at Higher Levels:</strong>{' '}\n                {data?.classById?.hdNumber}d{data?.classById?.hdFaces} (or{' '}\n                {data?.classById?.hdFaces\n                  ? Math.floor(data?.classById?.hdFaces / 2) + 1\n                  : null}\n                ) + your Constitution modifier per{' '}\n                {data?.classById?.name.toLowerCase()} level after 1st\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      {/* row 5 STARTING PROFICIENCIES */}\n      <FeatureStartProf\n        startingProficiencies={startingProficiencies}\n        savingThrows={data?.classById?.proficiency}\n      />\n      {/* row 6 ALL ELIGIBLE CLASS FEATURES */}\n      <div className='space-y-3'>\n        {classFeatures.map((feature, i) => {\n          if (feature.name.toLowerCase() === 'ability score improvement') {\n            return (\n              <div key={i} className='relative'>\n                {true && (\n                  <div className='absolute -top-2 -left-2'>\n                    <div className='bg-sky-blue circle rounded-full flex items-center justify-center h-6 w-6 text-white font-bold'>\n                      !\n                    </div>\n                  </div>\n                )}\n                <FeatureAsi feature={feature} />\n              </div>\n            )\n          } else {\n            return (\n              <div className='relative' key={i}>\n                {feature.hasOptions && (\n                  <div className='absolute -top-2 -left-2'>\n                    <div className='bg-sky-blue circle rounded-full flex items-center justify-center h-6 w-6 text-white font-bold'>\n                      !\n                    </div>\n                  </div>\n                )}\n                <FeatureGeneral feature={feature} />\n              </div>\n            )\n          }\n        })}\n      </div>\n      {/* row 7 - HIGHER LEVEL */}\n      <div className='space-y-3'>\n        <div className='relative inline-block'>\n          <div className='uppercase font-roboto text-md'>\n            Available at Higher Levels ({20 - currentLevel})\n          </div>\n          <div\n            className='absolute -right-8 -top-2 text-4xl leading-none cursor-pointer font-bold text-green-400'\n            onClick={() => toggleHigherFeaturesVisible(!higherFeaturesVisible)}\n          >\n            {higherFeaturesVisible ? '-' : '+'}\n          </div>\n        </div>\n        {higherFeaturesVisible && (\n          <>\n            {classFeaturesHigher.map((feature, i) => {\n              if (feature.name.toLowerCase() === 'ability score improvement') {\n                return (\n                  <div key={i}>\n                    <FeatureAsi viewOnly feature={feature} />\n                  </div>\n                )\n              } else {\n                return (\n                  <div key={i}>\n                    <FeatureGeneral viewOnly feature={feature} />\n                  </div>\n                )\n              }\n            })}\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default ClassFeatures\n","import React, { useState } from 'react'\nimport { useAllClassNamesQuery } from '../../generated/graphql'\nimport ClassFeatures from './class-features'\n\nconst ClassCreation: React.FC = () => {\n  const { data: classes, loading } = useAllClassNamesQuery()\n  const [classSelected, setClassSelected] = useState<any>(null)\n\n  if (loading) {\n    return <div>...Loading</div>\n  }\n\n  if (!classSelected && classes) {\n    return (\n      <div className='space-y-2 max-w-screen-sm m-auto m-0'>\n        {classes.allClasses?.nodes.map((c) => (\n          <div\n            className='w-full p-2 border-2 border-gray-200 rounded bg-white cursor-pointer flex justify-between items-center'\n            onClick={() => setClassSelected(c ? c : null)}\n            key={c?.id}\n          >\n            <div className='flex items-center space-x-6 cursor:pointer'>\n              <img\n                className='w-12 rounded'\n                src={`/assets/${c?.name.toLowerCase()}_logo.jpeg`}\n                alt=''\n              />\n              <div className='uppercase font-roboto font-bold text-xl'>\n                {c?.name}\n              </div>\n            </div>\n            <svg\n              xmlns='http://www.w3.org/2000/svg'\n              viewBox='0 0 1035 1612'\n              className='w-4 h-full'\n            >\n              <path\n                fill='#1C9AEF'\n                d='M653.5,109l741,742q19,19,19,45t-19,45l-741,742q-19,19-45.5,19t-45.5-19l-165-166q-19-19-19-45t19-45l531-531-531-531q-19-19-19-45t19-45l165-166q19-19,45.5-19T653.5,109Z'\n                transform='translate(-378.5 -90)'\n              ></path>\n            </svg>\n          </div>\n        ))}\n      </div>\n    )\n  }\n\n  if (classSelected) {\n    return (\n      <div className='space-y-2 max-w-screen-sm m-auto m-0'>\n        <ClassFeatures classObj={classSelected} setClassSelected={setClassSelected}/>\n      </div>\n    )\n  }\n\n  return <div>Create a class here</div>\n}\n\nexport default ClassCreation\n","import React from 'react'\nimport './scss/App.scss'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { AUTH_TOKEN } from './constants'\nimport NavBar from './components/nav'\nimport Classes from './components/classes/classes'\nimport RaceSelectionForm from './components/races/race-form'\nimport AsiGenerator from './components/ability-scores/asi-generator'\nimport CharDescription from './components/descript/descript'\nimport SpellsSelector from './components/spells/spells'\nimport Feats from './components/feats/feats'\nimport { ApolloProvider } from '@apollo/client'\nimport { ApolloClient, InMemoryCache } from '@apollo/client'\nimport { LinkType } from './lib/types'\nimport CharacterSheet from './components/character-sheet/character-sheet'\nimport SignUp from './components/sign-up'\nimport SignIn from './components/sign-in'\nimport { setContext } from '@apollo/client/link/context'\nimport { HttpLink } from '@apollo/client'\nimport SignOut from './components/sign-out'\nimport Layout from './components/layout'\nimport Home from './components/home'\nimport ClassCreation from './components/class-creation/class-creation'\n\nconst publicLinks: LinkType[] = [\n  {\n    link: '/signup',\n    text: 'Signup',\n  },\n  {\n    link: '/signin',\n    text: 'Signin',\n  },\n]\n\nconst privateLinks: LinkType[] = [\n  {\n    link: '/create/description',\n    text: '1. Description',\n  },\n  {\n    link: '/create/races',\n    text: '2. Race',\n  },\n  {\n    link: '/create/asi',\n    text: '3. Abilities',\n  },\n  {\n    link: '/create/class',\n    text: '4. Class (TODO)',\n  },\n  {\n    link: '/create/sheet',\n    text: '5. Character Sheet',\n  },\n  {\n    link: '/view/spells',\n    text: 'View Spells',\n  },\n  {\n    link: '/view/feats',\n    text: 'View Feats',\n  },\n  {\n    link: '/view/classes',\n    text: 'View Classes',\n  },\n]\nconst signout = {\n  link: '/signout',\n  text: 'Signout',\n}\n\nconst App: React.FC = () => {\n  const authToken = localStorage.getItem(AUTH_TOKEN)\n\n  if (!authToken) {\n    const client = new ApolloClient({\n      uri: process.env.NODE_ENV === 'development' ? 'http://localhost:8080/graphql' :'/graphql',\n      cache: new InMemoryCache(),\n    })\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <Layout>\n            <Switch>\n              {/* signed out */}\n              {!authToken && (\n                <div className='cotainer'>\n                  <NavBar links={publicLinks} isPublic />\n                  <Route exact path='/'>\n                    <div className='layout'>\n                      <div className='font-roboto uppercase text-3xl text-center'>Public landing page</div>\n                    </div>\n                  </Route>\n                  <Route path='/signin'>\n                    <div className='layout'>\n                      <SignIn />\n                    </div>\n                  </Route>\n                  <Route path='/signup'>\n                    <div className='layout'>\n                      <SignUp />\n                    </div>\n                  </Route>\n                </div>\n              )}\n            </Switch>\n          </Layout>\n        </Router>\n      </ApolloProvider>\n    )\n  } else {\n    const link = new HttpLink({\n      uri: process.env.NODE_ENV === 'development' ? 'http://localhost:8080/graphql' :'/graphql',\n      // Additional options\n    })\n\n    const authLink = setContext((_, { headers }) => {\n      const token = localStorage.getItem(AUTH_TOKEN)\n      return {\n        headers: {\n          ...headers,\n          authorization: token ? `Bearer ${token}` : 'Bearer',\n        },\n      }\n    })\n\n    const client = new ApolloClient({\n      link: authLink.concat(link),\n      cache: new InMemoryCache(),\n      defaultOptions: {\n        watchQuery: {\n          fetchPolicy: 'no-cache',\n          errorPolicy: 'ignore',\n        },\n        query: {\n          fetchPolicy: 'no-cache',\n          errorPolicy: 'all',\n        },\n      },\n    })\n\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <Switch>\n            <Layout>\n              <NavBar links={privateLinks} signout={signout} />\n\n              <Route exact path='/'>\n                <div className='container'>\n                  <Home />\n                </div>\n              </Route>\n\n              <Route path='/create/races'>\n                <div className='container'>\n                  <RaceSelectionForm />\n                </div>\n              </Route>\n\n              <Route path='/create/asi'>\n                <div className='container'>\n                  <AsiGenerator />\n                </div>\n              </Route>\n\n              <Route path='/create/class'>\n                <div className='container'>\n                  <ClassCreation />\n                </div>\n              </Route>\n              \n              <Route path='/create/description'>\n                <div className='container'>\n                  <CharDescription />\n                </div>\n              </Route>\n\n              <Route path='/create/sheet'>\n                <div className=''>\n                  <CharacterSheet />\n                </div>\n              </Route>\n\n              <Route path='/view/classes'>\n                <div className='container'>\n                  <Classes />\n                </div>\n              </Route>\n\n              <Route path='/view/spells'>\n                <div className='container spells'>\n                  <SpellsSelector />\n                </div>\n              </Route>\n\n              <Route path='/view/feats'>\n                <div className='container'>\n                  <Feats />\n                </div>\n              </Route>\n\n\n              <Route path='/signout'>\n                <div className=''>\n                  <SignOut />\n                </div>\n              </Route>\n            </Layout>\n          </Switch>\n        </Router>\n      </ApolloProvider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}